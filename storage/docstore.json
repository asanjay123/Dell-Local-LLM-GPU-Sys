{"docstore/metadata": {"ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f": {"doc_hash": "c74f19f67e4f93414b8e0d2f4cd4b910685cf36375d6151a1a245f1ba180385c"}, "9608f604-0aa4-41dc-95e4-c398faffee59": {"doc_hash": "b558e942a6f64b3f26f18bd42a02e7b3e2ca588ef0ec0586226f5ee15ce98107"}, "1472bb32-ba40-4663-ad4e-88a379956d90": {"doc_hash": "da6425d734b3a8f277910381f78134a29e82e991e957bdee588c5ab5cbf8dc1e", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "ae53c8e6-c694-4e87-bea5-fbd33713669d": {"doc_hash": "840d4f716841548a74dc17f7c3f48bd727db8fd18bdc5e53d0023631583502ab", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "ca26c800-9892-4c66-ba1e-bf863050022b": {"doc_hash": "65bf0c5883b321f31404f0f6d38625f7169878eacff6c5c5354aad702d6022d0", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "231ab9ca-fa1b-4c2e-9d34-2f524bce0be6": {"doc_hash": "c3caa2110a6f7d65e058fbaca97e7a9f8d23776631c9abe2c382249e75817791", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "32448ad9-e248-43c4-931f-78f92922bcb1": {"doc_hash": "0244231cd9137360dedbd61aada9b084f3b329023617f3b963aebd5a8e8f502b", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "74d15f8c-d4c0-43ae-a19d-13016283f4c9": {"doc_hash": "534d0f2e2d4b14fd9a152aa5fc5968e2fbe7b2ce6787821f8c6c3316b5f93c60", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "1b20283c-ddc9-4782-8395-096c4a86dbb6": {"doc_hash": "ddc9449147de8d944d48d22edc92a8ca2316f0de50e8622726c60ab2f0066674", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "41544a6f-b0bf-4a2f-9c8b-2875251edadc": {"doc_hash": "16dff921339582b96200cebba2b2d2ed930b56552c4bc74e90e2c231c1f783d4", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "a8f2d9f4-9ca5-47bb-91b3-504727a4f2f8": {"doc_hash": "295b2f624f4736066c0e664b552e71ac4e4b081b52432e922a89ad8f5819cfa7", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "e1a57b67-63b9-4bf6-b447-cb3014eaa524": {"doc_hash": "e2cb34599f7535fb752ff90baf21c142d41376ed47cd7869ee0b309f3af98b98", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "05a5f862-af0b-4657-b89d-221f6ec61a25": {"doc_hash": "df9574c0d5c71edb14b0bae811f8f286812ff3147aaee14bd3b8e022a4bd2a67", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "e0923949-891f-4204-959c-542e4b7c41b8": {"doc_hash": "8669b7da050c8b928af0a05f96409c4bcba7722734defdefc9bd016afe201161", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "633ccc35-ddb6-4b88-ad0d-d9f74fd290b0": {"doc_hash": "a71455b28706e04684737d16484c5283739696d694aef65908708b94196ebfef", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "9e76414a-8833-4cd1-979e-378efe19320c": {"doc_hash": "993c3de493743cd45fcb3949b4bdad5a8ac295b6e06e87804e729919a01ef25a", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "81197b5c-0389-4564-941f-75878a05318d": {"doc_hash": "ae03e4484485e7e83de1d47b8fd30ea81b253109c40091104f9f39cde4d7911b", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "08192867-2750-406d-bed6-d517519b4896": {"doc_hash": "ec918eb7799dcb8999cbed556ccd17ede0ffce6960688645daa7ffaf6ec5ffbe", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "a7344246-a3af-42ab-aaa9-44cacdcfdc39": {"doc_hash": "e45b3e6f1ab47acb4b487689400ab63ed1c3a7401da4d13f2e93545a712920f9", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "f1f00229-0c5f-4cd2-ac15-6796e7b2b029": {"doc_hash": "6fe4f9719e54720d67b999ebcc4a60e58d68027c7719965737fc3cc238ec92c6", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "19d94f00-f0dc-42de-9c49-87f4eab344e4": {"doc_hash": "51c749d058bf94437e5f62318cc06d777bcf1a573a23acd113cf62389cf68e07", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "cc1f20cc-aba2-4120-9ad8-1152139f0fff": {"doc_hash": "e99f430c427373b6961f9b607752189b4bf876b14a220a56e466ccdee898438f", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "4629f306-f3d7-4359-8edc-2ca3296c2b0a": {"doc_hash": "88efab95f247c7212e57474b1c1f5a688aa22a00d0f449496d5d34baee8727ec", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "6704b004-142e-4d47-9e1e-8ebd457b46b7": {"doc_hash": "d733092417fa3eb4480120935dbf5a46113abcefbff177e7c3c78e878d6aecac", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "80272e76-de5c-4685-b057-0ae4f57ea92e": {"doc_hash": "d6ccccbcd99c848d9eb91c18bbe7e83bba422c5223e027732a2ca5c57d97e2b1", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "5bcff6cd-681f-47ac-8b2b-e6cfbbbac474": {"doc_hash": "a772b0350b538e86ee5c952bb73d4757c78d193bb9021cd72eaed764a71fa65f", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "78f19769-ac28-41c3-be95-79af18d37a4c": {"doc_hash": "a5adf9511c771244c835d7780b1bc654b64c7c5d300aeb2602ca9df0f93672ba", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "b32e99e3-afa0-4899-9f8b-5f9837db5acd": {"doc_hash": "6d4cff3a847f639a7a96069965e4bff1cb026512e4c1256a469e4cd3da3dc74d", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "4ce1e049-5e08-48ed-afc5-d27ce7d2cafa": {"doc_hash": "15fd5d96a9fa3ef52fbe30c9c0162a70f77d64081c035173e1f3f42f86cacd90", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "45d9a296-ae06-4d0a-874a-59956d559999": {"doc_hash": "e044d32a3aec3a739772dee169e4b239502f57625c329fc7696f093fdf62172c", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "497e6b35-70ef-4352-a6c3-68bc4dce0a95": {"doc_hash": "785418c9442b1b90fd49446d97f50489bcac2462fcd90d15ade3432f094e92d3", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "05230e54-9208-495e-a1a1-acf17c128856": {"doc_hash": "29f96222a41b52a64acd8917472717b3d6237dd7adfd2de5acc8515a77fef5a2", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "33fd56ed-ac26-4ac7-bee1-42a061cc54c0": {"doc_hash": "01de6298b6bb353a005f0511e106d8c4f179693bf792578d6256841d6aa60b27", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "af3b2431-b344-462a-a1e2-cfc1b3be5357": {"doc_hash": "b66ca9068187eb64c156a3dae676dee71094fe34517102918557ce7c19e04596", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "135fee3f-6ccd-409b-bd7f-981a73ca1376": {"doc_hash": "ad52210d2a546ea6da9d6df75e04541f83e8a26a5866e931e2c504d5ac30941a", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "af5f5680-cf8d-4fad-a608-22827dcc3d68": {"doc_hash": "14518296a3a6cd60e7c53e143a2cc4565924cef8000ffa58d975e8a537b57515", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "531f4505-76be-49f5-ac98-b990198c0ac2": {"doc_hash": "4a2764fe281dbdf11a05472eafd9d541b78be19a4e3700b8afe6c34aeabcf644", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "bb1f5cfe-6784-489f-8a47-67b25e8c89a9": {"doc_hash": "05d32e1d6cd9546a297bf2017dd872c7e0f3614ee9eff17c2b7fbcbc8efd540d", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "4065dd88-695b-4ae1-8cc7-5d4242a683a1": {"doc_hash": "760a57df6e37e0dad004e4f4ad59ce4a05a866ba89d821117836e64172659e98", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "d596ba80-e9c9-49ca-86ef-1ec02710b1ed": {"doc_hash": "27a8b3a16a2312c972b5712ff841fba31c2f96e7381fc75d1b2661011024f412", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "68693dc3-779f-46fc-b7ec-ecf0c33be39c": {"doc_hash": "a1d69dd8ba6d5771adb08cc8a71d52e650f851bed2d87cddd6bd4511cf9f3cd1", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "c00660ed-9580-4301-8cc8-c7ba364bd7cc": {"doc_hash": "a9ce6d3a25eb0fb958571b6b48ffbef0dd442b68c1f85ed240beb2d2606cca20", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "628228df-00b6-4c1e-af44-452800b36f8a": {"doc_hash": "34259f0605f4d16f1082feb8ad1ea275ad6a10152ce3f4b3d1200ec88a14007b", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "b2b0a16d-f014-4c40-91fe-2706a1f122e5": {"doc_hash": "839542ec74f2e492d67e81f7f63b61f1f354e1b1c7cc916a9c8ecaa5934134f6", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "358a3e20-66b6-46b3-8fb3-31f8083b2716": {"doc_hash": "bbafeb8889e28fd43c49899d38402fe73c0f6fe8feb02bf130eb72ecd6ec28cf", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "ec393b6f-e846-4d4e-ab78-8459444bd0d3": {"doc_hash": "52cdd3a785c26731bbef7422ced5adb82bf663b1682ea625d9264de70763ad04", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "20e6e519-1841-4541-912d-e2a07b05d349": {"doc_hash": "3e78f098178655c7cd88bcfe01fc5580442274f26afb1af75adf38c45b46742d", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "a08be7dc-c197-4a16-bd59-9f8b6760ea7b": {"doc_hash": "bfe68bc1ea3bca0cf820096ff54948aa51f0248bf716c2df033b997d53527bbd", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "b0e48c2f-e795-40c6-9312-26b9f21760d4": {"doc_hash": "be596c1067928d15e91f8398eb50843699180aab821df0ab9fc6b3a0060f55c8", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "8709c34c-e7b0-432b-9cbf-523fbcfcdbc0": {"doc_hash": "5a350c8f228de1298595260d8a12c89c6f13241c720da8db3013ebb4be49ff8c", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "c5233735-ec9e-4079-b1fb-ed756eece8d2": {"doc_hash": "d70ff9464da7c27539d76a82f81fe0f06359bac5e60dbe2e65b328c096ec4c1c", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "93ca8501-a8c1-4241-b9b3-aeee3cd42029": {"doc_hash": "078223b81402bddcfddaf01af42308d96a86ed0506f4a3a256b1cd485bf46c31", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "19e15187-1eab-44da-8d42-c3b8e16dc0ef": {"doc_hash": "d1a7c9ef36b902073e049a448559296d22e9f96283ad5831b38b00bf92d80bb9", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "0aea4aee-6978-4d4b-8f83-1d952c6a7577": {"doc_hash": "0f0156ff731d4ff164da62475b7101f4c7746473574d8faefe79419c30cc3800", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "345a7f0b-3f6d-40d8-8c95-f996b7ef7035": {"doc_hash": "645e58f4290b66b7862982d76b138eeadb614d06e1932b2a8a0cba04f334a0c3", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "80a40057-da97-40d7-9284-10e5852de8b4": {"doc_hash": "882e03235c7d8745af732da307b57739154b249f2db9d216ed67d07f04c981fe", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "4119fa5b-f399-4c71-a8ac-f2b4c4ad2798": {"doc_hash": "948935e32d278f9529caa22f4095b476fa584cbb9e601127453be7dcbf9f640b", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "b2b1f2f7-7b51-4eef-97c5-77529de5668c": {"doc_hash": "a0deb293de78c2840bd4c4350c8bcb1c4555113ee7e4d47a52dcceb9ab5739c2", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "bd0fefb4-9eaa-4174-8337-bd1aa613f38d": {"doc_hash": "7b4c2741720d56137bb07b98f0ce937a92d2b0a5cd6ca5a47fd5104780aea303", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "19752d92-fb6f-4105-9725-6850307ae3e3": {"doc_hash": "d7f7404098cee7804ea35b3641b8c492590725eb880d71f5bc7632547d585229", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "b96445a9-2d64-495e-b22c-17712f9a3ff7": {"doc_hash": "1840deae1155cf0d5d31d40a1bad18dc95867065207f0606224394e3e3bc25c8", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "1e112192-ce57-4364-8fc7-71531b26fe5f": {"doc_hash": "646e4b06dafabf5903ea4bdfc94887a5e59c2e893a3737a0913a9499ad2eb12b", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "75829444-bccd-40e0-b04d-a28a7b84dd33": {"doc_hash": "8d8b22b021fbf71f1914b0bb0f25aec8b5fb0e1168d517e5229852cd37930e11", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "4a0e96d2-1909-45c5-a7a4-ea646d9af7c5": {"doc_hash": "88537e81dffe2a23457b962dc59b3900ef11e54bd81539081e1891a4d3372c68", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "1cf88464-f860-4119-8cc1-e257d0abcd9a": {"doc_hash": "6f505b63253f223ad46203fb30fdf10f59004be4e777b81f2e75fa90748f6c44", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "90c3cfa9-dc17-42f4-9196-ede4f85f977f": {"doc_hash": "70431f3fec8a271600118f032ad200aaf20cd32e5097e593886755c0a287db71", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "59d4d8c4-0942-4748-a22d-7c64f4eadf81": {"doc_hash": "cae937dd993550db785a2fe7532d1c61ed02de53f3966536d0c63d5bb951008f", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "e122c0cc-1848-4a64-969e-431db86f6f0b": {"doc_hash": "385261e74e54f7b5f0339c0b1d40f0f637dcdc36979f1dba32f82c5dfd6c9e68", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "f2a316c5-b728-4408-87cd-dc7d343d5f7d": {"doc_hash": "847ecf831208161e6f7c361a8b052dc0d0587a9e48db415369bf3ffaccd00767", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "b23a8fdf-4289-4529-84ea-8f980c3d74e4": {"doc_hash": "ca18d0ec913a20f50013479dfffd351f403ca188c00b3964ff643727150da3ff", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "c0b7ca3c-25ce-450a-9bb0-f8fa712dfdca": {"doc_hash": "3ac799b410ff989c6df41a117f2ec3ff8384beb715659b88029b96a9126118ca", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "22ccfccd-aa89-48b3-8fb6-2ad3c05c99e0": {"doc_hash": "82a3aab8eb9401b13ca5591990d025d70ea1a2ca36e334670158550dc7dd8ca7", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "58461a93-cbfd-4552-83bd-e3ab7356d095": {"doc_hash": "3639c9aa4a99b88b754f9720cb87aad75646668e01c742b1ba76a32ee54c0dae", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "50cbe525-7367-44af-8718-f5f73e507f3e": {"doc_hash": "e0bdf3f89d2392dd5ec1be8d162b53d48a00ae748ed40c26a141238de53b4706", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "1f87cb26-c953-49ef-99e3-a7d2693f738d": {"doc_hash": "cef12b98279ee9d0fbcc0c749fc553c9cfb57a24f03910cfdd22e063fb4caf43", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "db07472f-1aca-48d6-8c1e-08a51789fde6": {"doc_hash": "b897989bd5b29d11a3ad995c60133d2de3a859181f56337abe7dd238e74f6d5b", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "4fca5ee8-a17e-4439-ba8d-810304a971f1": {"doc_hash": "3b48ab412e94c21ab62ad298ae47b47c6de7bdf904fd0b46e63d153ac0a2b6a4", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "2b0cdc1f-a921-48e6-9316-2b41554a29ae": {"doc_hash": "c188b442872288eb3308c81263e43edb36e15820f91d3e3bf2a6f876ba00b7f8", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "dd55cf0e-c8bb-45ad-82fa-12c466c86f09": {"doc_hash": "10a94702ce7573f47fdedc29ed3a7209ba207f1395dd92cde8dbbb7e8b1463a0", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "86ef4402-abf3-4fda-bd70-dde5651bcaf3": {"doc_hash": "c783030406f8da4835bea73d8791c777900004dcc8ea4d1c0ec326e3e527cae2", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "75245e91-a3ef-4f4f-aa9e-98ffb252654b": {"doc_hash": "0db2b8794e4abedb305b24a62a29a8546e31c16348307039e4bc3c788d425e25", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "07584687-9dbd-4c23-a34a-860fdd1f0a59": {"doc_hash": "d200dd5f422d1100d3c1f745c95e95c4492a853dfc1b9ac725d2c5f9e7312ac7", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "3041c9bf-cc44-42b8-bf2b-79b23b8bc4d3": {"doc_hash": "9673e42c30c13b66e43b2b165e2d6a19bdbfaab2092d223dd60d3d1ee6057390", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "c076b365-76bc-43f3-b1b9-9ebf51a2efa2": {"doc_hash": "281f131e3ba789d9c8fa33662ab2a50a5d8208cbf5f58e16f2bf4b7f6cb30652", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "ac0ffff7-7678-4831-918e-1791c02100cf": {"doc_hash": "670a7b40b99b210ea25a0cc4b69e661dd0ff4a3f63516514ebe2ba2f5895281d", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "964f0df5-73d1-482e-8a8e-fc9ae9fc12c3": {"doc_hash": "f24fb5dab62fce109248d2c614814793e9011d33c7c12b32326fca5b50a97877", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "7b472a46-f426-4061-8646-e20d86a6f255": {"doc_hash": "b9e39c4ffa47bc52848781fd8c4c246fe339c59369eb796396255a9c23b32802", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "8e552055-ef62-48c6-9533-074483ce4fe3": {"doc_hash": "f99dfc6ab8710ef43a4ed8af99b9cca4d305d96468c5625814888e969ab2a1dd", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "50dea32e-2387-45ce-ab1c-f47c0ea8a5b1": {"doc_hash": "1e076f0d09e20ec2e30d3932e2dc470d6d84d72ffa90b8a955701fd4d11e33fa", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "0c0d3d7e-a21f-46d3-aaec-8b50ebff0aea": {"doc_hash": "ce093897df7f1606452e462aee01a646b4c52c5dd99a6d22d4d234966c71d1d4", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "d01d3273-130a-44b3-8fd8-36ca7424523b": {"doc_hash": "feb542500bf925d2db686ee13b9d4119cef0aafb369f127f88ded1a7593941b2", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "08336141-8f91-4c40-abe8-8df694953bdb": {"doc_hash": "5fc545f27a4c4d5a13ff30eee1c0a5c45fb47f3ed38ab1e7ff86bf140397250a", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "533a349a-8428-4bdb-af76-5c2a3bde7c04": {"doc_hash": "20ad9749253a85bca5f765a61b000f09331e8d4cbe01e245f8d146dc8cc2fe2b", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "b5c68073-871e-4f72-9704-f5ce21b50de5": {"doc_hash": "ff32c7abefca602b82cb3b00119b2fa1187f63c27665a21cbb7087a7dedeabd4", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "2aaf2078-af54-4d6a-ac0f-d1404bd7cc0e": {"doc_hash": "9d669e4c5c9ae923cb4e2db7716c11001b5151006c018661d1bd47c0ebfd5ddc", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "2ca18a48-9d18-45f4-ba37-e7e77936ad38": {"doc_hash": "ef7bc800fbe2318baab903df1015b7f0c838e938ff848e3080e3a6939a769bb4", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "cf74b004-7a24-4725-b581-f6363e003c8b": {"doc_hash": "9d2fff96784626a6e0b41aac353474ec42ea2ed0008b5dfe8c783742b76edb18", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "871a352f-12cc-4c99-ac4c-a35a71690c89": {"doc_hash": "efe1d3d7a13b871048055496f6ec3e2b6de4a6d4ad47598e9e5e81fd81c9df60", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "164e803f-7fc6-493e-b11b-b795305cb4a8": {"doc_hash": "69d78879603e949156f12ebdf14483dde0bd2e8554c93b5e4707a01480160075", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "902be665-cc31-4056-b4ab-f251dc68ab65": {"doc_hash": "815406ba2f30edd5267d88473b5f9e9c9f8d00d964f36ad90415a5e733a64060", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "c521454e-6605-414f-af7b-20f57993b0e9": {"doc_hash": "4a0c74ab394a2126bdbf9921e3c28d254617ed3ad32af3fea874bb749e62973c", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "7e856a36-b65c-4def-a9b8-50f278661a9e": {"doc_hash": "51be2eafc47d67fc9cc221adf243306e4a433dee0a037e9c5c6f0c723bb7cd91", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "49016831-549f-4b60-9422-bce1320cc3b8": {"doc_hash": "f863f39f71dde1cc342d04a3b148c4f80fb2bfa3780b58b1e32ac335c7203b54", "ref_doc_id": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f"}, "5a88e3a3-b62a-4dfc-a852-4b45dcdb8c23": {"doc_hash": "b558e942a6f64b3f26f18bd42a02e7b3e2ca588ef0ec0586226f5ee15ce98107", "ref_doc_id": "9608f604-0aa4-41dc-95e4-c398faffee59"}}, "docstore/data": {"1472bb32-ba40-4663-ad4e-88a379956d90": {"__data__": {"text": "Redfish DMTF Logo\nDocument Identifier: DSP0266\n\nDate: 2023-04-04\n\nVersion: 1.18.0\n\nRedfish Specification\n\n\n\n\n\nSupersedes: 1.17.1\n\nDocument Class: Normative\n\nDocument Status: Published\n\nDocument Language: en-US\n\nCopyright Notice\nCopyright \u00a9 2015-2023 DMTF. All rights reserved.\nDMTF is a not-for-profit association of industry members dedicated to promoting enterprise and systems management and interoperability. Members and non-members may reproduce DMTF specifications and documents, provided that correct attribution is given. As DMTF specifications may be revised from time to time, the particular version and release date should always be noted.\n\nImplementation of certain elements of this standard or proposed standard may be subject to third party patent rights, including provisional patent rights (herein \"patent rights\"). DMTF makes no representations to users of the standard as to the existence of such rights, and is not responsible to recognize, disclose, or identify any or all such third party patent right, owners or claimants, nor for any incomplete or inaccurate identification or disclosure of such rights, owners or claimants. DMTF shall have no liability to any party, in any manner or circumstance, under any legal theory whatsoever, for failure to recognize, disclose, or identify any such third party patent rights, or for such party's reliance on the standard or incorporation thereof in its product, protocols or testing procedures. DMTF shall have no liability to any party implementing such standard, whether such implementation is foreseeable or not, nor to any patent owner or claimant, and shall have no liability or responsibility for costs or losses incurred if a standard is withdrawn or modified after publication, and shall be indemnified and held harmless by any party implementing the standard from any and all claims of infringement by a patent owner for such implementations.\n\nFor information about patents held by third-parties which have notified DMTF that, in their opinion, such patent may relate to or impact implementations of DMTF standards, visit http://www.dmtf.org/about/policies/disclosures.php.\n\nThis document's normative language is English. Translation into other languages is permitted.\n\nCONTENTS\n\nForeword\nAcknowledgments\nIntroduction\n1 Scope\n2 Normative references\n3 Terms, definitions, symbols, and abbreviated terms\n3.1 Hardware terms\n3.1.1 baseboard management controller (BMC)\n3.1.2 IPMI\n3.1.3 KVM-IP\n3.1.4 NIC\n3.1.5 PCI\n3.1.6 PCIe\n3.2 Web development terms\n3.2.1 CORS\n3.2.2 CRUD\n3.2.3 CSRF\n3.2.4 event\n3.2.5 excerpt\n3.2.6 HTTP\n3.2.7 HTTPS\n3.2.8 hypermedia API\n3.2.9 IP\n3.2.10 JSON\n3.2.11 member\n3.2.12 message\n3.2.13 OData\n3.2.14 OData service document\n3.2.15 operation\n3.2.16 parent resource\n3.2.17 property\n3.2.18 request\n3.2.19 response\n3.2.20 subscription\n3.2.21 task\n3.2.22 task monitor\n3.2.23 TCP\n3.2.24 TLS\n3.2.25 XSS\n3.3 Redfish terms\n3.3.1 collection\n3.3.2 Redfish client\n3.3.3 Redfish protocol\n3.3.4 Redfish schema\n3.3.5 Redfish service\n3.3.6 resource\n3.3.7 resource collection\n3.3.8 resource tree\n3.3.9 resource type\n3.3.10 service root\n3.3.11 subordinate resource\n4 Typographical conventions\n5 Overview\n5.1 Goals\n5.2 Design tenets\n5.3 Limitations\n5.4 Additional design background and rationale\n5.4.1 REST-based interface\n5.4.2", "doc_id": "1472bb32-ba40-4663-ad4e-88a379956d90", "embedding": null, "doc_hash": "da6425d734b3a8f277910381f78134a29e82e991e957bdee588c5ab5cbf8dc1e", "extra_info": null, "node_info": {"start": 0, "end": 3301, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "3": "ae53c8e6-c694-4e87-bea5-fbd33713669d"}}, "__type__": "1"}, "ae53c8e6-c694-4e87-bea5-fbd33713669d": {"__data__": {"text": "and rationale\n5.4.1 REST-based interface\n5.4.2 Data-oriented\n5.4.3 Separation of protocol from data model\n5.4.4 Hypermedia API service root\n5.4.5 OpenAPI v3.0 support\n5.4.6 OData conventions\n5.5 Service elements\n5.5.1 Synchronous and asynchronous operation support\n5.5.2 Eventing mechanism\n5.5.3 Actions\n5.5.4 Service discovery\n5.5.5 Remote access support\n5.6 Security\n6 Protocol details\n6.1 Universal Resource Identifiers\n6.2 HTTP methods\n6.3 HTTP redirect\n6.4 Media types\n6.5 ETags\n6.6 Protocol version\n6.7 Redfish-defined URIs and relative reference rules\n7 Service requests\n7.1 Request headers\n7.2 GET (read requests)\n7.2.1 GET (read requests) overview\n7.2.2 Resource collection requests\n7.2.3 Service root request\n7.2.4 OData service and metadata document requests\n7.3 Query parameters\n7.3.1 Query parameter overview\n7.3.2 The $expand query parameter\n7.3.3 The $select query parameter\n7.3.4 The $filter query parameter\n7.4 HEAD\n7.5 Data modification requests\n7.5.1 Data modification requests overview\n7.5.2 Modification success responses\n7.5.3 Modification error responses\n7.6 PATCH (update)\n7.7 PATCH on array properties\n7.8 PUT (replace)\n7.9 POST (create)\n7.10 DELETE (delete)\n7.11 POST (action)\n7.12 Operation apply time\n7.13 Deep operations\n8 Service responses\n8.1 Response headers\n8.2 Link header\n8.3 Status codes\n8.4 OData metadata responses\n8.4.1 OData metadata responses overview\n8.4.2 OData $metadata\n8.4.2.1 Referencing other schemas\n8.4.2.2 Referencing OEM extensions\n8.4.3 OData service document\n8.5 Resource responses\n8.6 Error responses\n9 Data model\n9.1 Resources\n9.2 Resource types\n9.3 Resource collections\n9.4 OEM resources\n9.5 Common data types\n9.5.1 Primitive types\n9.5.2 Enumerations\n9.5.3 Empty string values\n9.5.4 GUID and UUID values\n9.5.5 Date-Time values\n9.5.6 Duration values\n9.5.7 Reference properties\n9.5.8 Non-resource reference properties\n9.5.9 Array properties\n9.5.10 Structured properties\n9.5.11 Message object\n9.5.11.1 Overview\n9.5.11.2 MessageId format\n9.6 Properties\n9.6.1 Properties overview\n9.6.2 Resource identifier (@odata.id) property\n9.6.3 Resource type (@odata.type) property\n9.6.4 Resource ETag (@odata.etag) property\n9.6.5 Resource context (@odata.context) property\n9.6.6 Id\n9.6.7 Name\n9.6.8 Description\n9.6.9 MemberId\n9.6.10 Count (Members@odata.count) property\n9.6.11 Members\n9.6.12 Next link (Members@odata.nextLink) property\n9.6.13 Links\n9.6.13.1 Reference to a related resource\n9.6.13.2 References to multiple related resources\n9.6.14 Actions property\n9.6.14.1 Action representation\n9.6.14.2 Action responses\n9.6.15 Oem\n9.6.16 Status\n9.7 Naming conventions\n9.7.1 Naming rules\n9.7.2 URI naming rules\n9.8 Extending standard resources\n9.8.1 Extending standard resources overview\n9.8.2 OEM property format and content\n9.8.3 OEM-specified object naming\n9.8.4 OEM resource types\n9.8.5 OEM", "doc_id": "ae53c8e6-c694-4e87-bea5-fbd33713669d", "embedding": null, "doc_hash": "840d4f716841548a74dc17f7c3f48bd727db8fd18bdc5e53d0023631583502ab", "extra_info": null, "node_info": {"start": 3259, "end": 6094, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "1472bb32-ba40-4663-ad4e-88a379956d90", "3": "ca26c800-9892-4c66-ba1e-bf863050022b"}}, "__type__": "1"}, "ca26c800-9892-4c66-ba1e-bf863050022b": {"__data__": {"text": "naming\n9.8.4 OEM resource types\n9.8.5 OEM registries\n9.8.6 OEM URIs\n9.8.7 OEM property examples\n9.8.8 OEM actions\n9.9 Payload annotations\n9.9.1 Payload annotations overview\n9.9.2 Allowable values for strings\n9.9.3 Allowable patterns for string values\n9.9.4 Allowable values for numbers and durations\n9.9.5 Extended information\n9.9.5.1 Extended object information\n9.9.5.2 Extended property information\n9.9.6 Action info annotation\n9.9.7 Settings and settings apply time annotations\n9.9.8 Operation apply time and operation apply time support annotations\n9.9.9 Maintenance window annotation\n9.9.10 Collection capabilities annotation\n9.9.11 Requested count and allow over-provisioning annotations\n9.9.12 Zone affinity annotation\n9.9.13 Supported certificates annotation\n9.9.14 Deprecated annotation\n9.9.15 Writable properties annotation\n9.10 Settings resource\n9.11 Special resource situations\n9.11.1 Overview\n9.11.2 Absent resources\n9.12 Registries\n9.13 Schema annotations\n9.13.1 Schema annotations overview\n9.13.2 Description annotation\n9.13.3 Long description annotation\n9.13.4 Resource capabilities annotation\n9.13.5 Resource URI patterns annotation\n9.13.6 Additional properties annotation\n9.13.7 Permissions annotation\n9.13.8 Required annotation\n9.13.9 Required on create annotation\n9.13.10 Units of measure annotation\n9.13.11 Expanded resource annotation\n9.13.12 Owning entity annotation\n9.13.13 Deprecated annotation\n9.13.14 URI segment annotation\n9.14 Versioning\n9.15 Localization\n10 File naming and publication\n10.1 Registry file naming\n10.2 Profile file naming\n10.3 Dictionary file naming\n10.4 Localized file naming\n10.5 DMTF Redfish file repository\n11 Schema definition languages\n11.1 OData Common Schema Definition Language\n11.1.1 OData Common Schema Definition Language overview\n11.1.2 File naming conventions for CSDL\n11.1.3 Core CSDL files\n11.1.4 CSDL format\n11.1.4.1 Referencing other CSDL files\n11.1.4.2 CSDL data services\n11.1.5 Elements of CSDL namespaces\n11.1.5.1 Qualified names\n11.1.5.2 Entity type and complex type elements\n11.1.5.3 Action element\n11.1.5.4 Action element for OEM actions\n11.1.5.5 Action with a response body\n11.1.5.6 Property element\n11.1.5.7 Navigation property element\n11.1.5.8 Enum type element\n11.1.5.9 Annotation element\n11.2 JSON Schema\n11.2.1 JSON Schema overview\n11.2.2 File naming conventions for JSON Schema\n11.2.3 Core JSON Schema files\n11.2.4 JSON Schema format\n11.2.5 JSON Schema definitions body\n11.2.5.1 Resource definitions in JSON Schema\n11.2.5.2 Enumerations in JSON Schema\n11.2.5.3 Actions in JSON Schema\n11.2.5.4 OEM actions in JSON Schema\n11.2.5.5 Action with a response body\n11.2.6 JSON Schema terms\n11.3 OpenAPI\n11.3.1 OpenAPI overview\n11.3.2 File naming conventions for OpenAPI schema\n11.3.3 Core OpenAPI schema files\n11.3.4 openapi.yaml\n11.3.5 OpenAPI file format\n11.3.6 OpenAPI components body\n11.3.6.1 Resource definitions in OpenAPI\n11.3.6.2 Enumerations in OpenAPI\n11.3.6.3 Actions in OpenAPI\n11.3.6.4 OEM actions in", "doc_id": "ca26c800-9892-4c66-ba1e-bf863050022b", "embedding": null, "doc_hash": "65bf0c5883b321f31404f0f6d38625f7169878eacff6c5c5354aad702d6022d0", "extra_info": null, "node_info": {"start": 6101, "end": 9082, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "ae53c8e6-c694-4e87-bea5-fbd33713669d", "3": "231ab9ca-fa1b-4c2e-9d34-2f524bce0be6"}}, "__type__": "1"}, "231ab9ca-fa1b-4c2e-9d34-2f524bce0be6": {"__data__": {"text": "Actions in OpenAPI\n11.3.6.4 OEM actions in OpenAPI\n11.3.7 OpenAPI terms used by Redfish\n11.4 Schema modification rules\n12 Service details\n12.1 Eventing\n12.1.1 Eventing overview\n12.1.2 POST to subscription collection\n12.1.3 Open an SSE connection\n12.1.4 EventType-based eventing\n12.1.5 Subscribing to events\n12.1.6 Event formats\n12.1.7 OEM extensions\n12.2 Asynchronous operations\n12.3 Resource tree stability\n12.4 Discovery\n12.4.1 Discovery overview\n12.4.2 UPnP compatibility\n12.4.3 USN format\n12.4.4 M-SEARCH response\n12.4.5 Notify, alive, and shutdown messages\n12.5 Server-sent events\n12.5.1 General\n12.5.2 Event service\n12.5.2.1 Event message SSE stream\n12.5.2.2 Metric report SSE stream\n12.6 Update service\n12.6.1 Overview\n12.6.2 Software update types\n12.6.2.1 Simple updates\n12.6.2.2 Multipart HTTP push updates\n13 Security details\n13.1 Transport Layer Security (TLS) protocol\n13.1.1 Transport Layer Security (TLS) protocol overview\n13.1.2 Cipher suites\n13.1.3 Certificates\n13.2 Sensitive data\n13.3 Authentication\n13.3.1 Authentication overview\n13.3.2 Authentication requirements\n13.3.2.1 Resource and operation authentication requirements\n13.3.2.2 HTTP header authentication requirements\n13.3.2.3 Authentication failure requirements\n13.3.3 HTTP Basic authentication\n13.3.4 Redfish session login authentication\n13.3.4.1 Redfish login sessions\n13.3.4.2 Session login\n13.3.4.3 Session lifetime\n13.3.4.4 Session termination or logout\n13.3.5 Client certificate authentication\n13.4 Authorization\n13.4.1 Authorization overview\n13.4.2 Privilege model\n13.4.2.1 Roles\n13.4.2.2 Restricted roles and restricted privileges\n13.4.2.3 OEM privileges\n13.4.3 Redfish service operation-to-privilege mapping\n13.4.3.1 Why specify operation-to-privilege mapping?\n13.4.3.2 Representing operation-to-privilege mappings\n13.4.3.3 Operation map syntax\n13.4.3.4 Mapping overrides syntax\n13.4.3.5 Property override example\n13.4.3.6 Subordinate override\n13.4.3.7 Resource URI override\n13.4.3.8 Privilege AND and OR syntax\n13.4.4 Delegated authorization with OAuth 2.0\n13.4.4.1 OAuth 2.0 overview\n13.4.4.2 OAuth 2.0 data model requirements\n13.4.4.3 OAuth 2.0 access tokens\n13.4.4.4 Redfish OAuth2.0 scope usage\n13.5 Account service\n13.5.1 Account service overview\n13.5.2 Password management\n13.5.3 Password change required handling\n13.6 Asynchronous tasks\n13.7 Event subscriptions\n14 Redfish Host Interface\n15 Redfish composability\n15.1 Composition requests\n15.1.1 Composition requests overview\n15.1.2 Specific composition\n15.1.3 Constrained composition\n15.1.4 Expandable resources\n15.2 Updating a composed resource\n16 Aggregation\n16.1 Classes of aggregators\n16.1.1 Implicit and complex aggregators\n16.1.2 Use cases\n16.2 Aggregation service\n16.2.1 Aggregation service overview\n16.2.2 Aggregator requirements\n16.2.3 Aggregates\n16.2.4 Aggregation sources and connection methods\n17 ANNEX A (informative) Change log\n18", "doc_id": "231ab9ca-fa1b-4c2e-9d34-2f524bce0be6", "embedding": null, "doc_hash": "c3caa2110a6f7d65e058fbaca97e7a9f8d23776631c9abe2c382249e75817791", "extra_info": null, "node_info": {"start": 9083, "end": 11971, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "ca26c800-9892-4c66-ba1e-bf863050022b", "3": "32448ad9-e248-43c4-931f-78f92922bcb1"}}, "__type__": "1"}, "32448ad9-e248-43c4-931f-78f92922bcb1": {"__data__": {"text": "sources and connection methods\n17 ANNEX A (informative) Change log\n18 Bibliography\nForeword\nDMTF's Redfish Forum develops the Redfish standard.\n\nDMTF is a not-for-profit association of industry members that promotes enterprise and systems management and interoperability. For information about DMTF, see DMTF.\n\nThis version supersedes version 1.17.1. For a list of the changes, see ANNEX A (informative) Change log.\n\nAcknowledgments\nDMTF acknowledges the following individuals for their contributions to the Redfish standard, including this document and Redfish schemas, interoperability profiles, and message registries:\n\nRafiq Ahamed \u2014 Hewlett Packard Enterprise\nRichelle Ahlvers \u2014 Intel Corporation, Broadcom Inc.\nJeff Autor \u2014 Hewlett Packard Enterprise\nDavid Black \u2014 Dell Technologies\nJeff Bobzin \u2014 Insyde Software Corp.\nPatrick Boyd \u2014 Dell Technologies\nDavid Brockhaus \u2014 Vertiv\nRichard Brunner \u2014 VMware Inc.\nSean Byland \u2014 Hewlett Packard Enterprise\nLee Calcote \u2014 Seagate Technology\nKeith Campbell \u2014 Lenovo\nDerek Chan \u2014 Google LLC\nP Chandrasekhar \u2014 Dell Technologies\nBarbara Craig \u2014 Hewlett Packard Enterprise\nChris Davenport \u2014 Hewlett Packard Enterprise\nGamma Dean \u2014 Vertiv\nMichael Du \u2014 Huawei Technologies Co., Ltd.\nDaniel Dufresne \u2014 Dell Technologies\nSamer El-Haj-Mahmoud \u2014 Arm Limited, Lenovo, Hewlett Packard Enterprise\nGeorge Ericson \u2014 Dell Technologies\nWassim Fayed \u2014 Microsoft Corporation\nKevin Ferguson \u2014 Vertiv\nMike Garrett \u2014 Hewlett Packard Enterprise\nSteve Geffin \u2014 Vertiv\nMartin Halstead \u2014 Hewlett Packard Enterprise\nJoe Handzik \u2014 Hewlett Packard Enterprise\nJon Hass \u2014 Dell Technologies\nJeff Hilland \u2014 Hewlett Packard Enterprise\nBlake Hilliard \u2014 Hewlett Packard Enterprise\nChris Hoffman \u2014 Vertiv\nCactus Jiang \u2014 Vertiv\nBarry Kittner \u2014 Intel Corporation\nSteven Krig \u2014 Intel Corporation\nJennifer Lee \u2014 Intel Corporation\nJohn Leung \u2014 Intel Corporation\nMagnus Lundmark \u2014 Ericsson AB\nSteve Lyle \u2014 Hewlett Packard Enterprise\nGunnar Mills \u2014 IBM\nJagan Molleti \u2014 Dell Technologies\nMilena Natanov \u2014 Microsoft Corporation\nBalaji Natrajan \u2014 Microchip Technology Inc., Hewlett Packard Enterprise\nScott Phuong \u2014 Cisco Systems, Inc.\nMichael Pizzo \u2014 Microsoft Corporation\nChris Poblete \u2014 Dell Technologies\nSlawek Putyrski \u2014 Intel Corporation\nMichael Raineri \u2014 Dell Technologies\nJoseph Reynolds \u2014 IBM\nIrina Salvan \u2014 Microsoft Corporation\nBill Scherer \u2014 Hewlett Packard Enterprise\nGeoff Schunicht \u2014 Hewlett Packard Enterprise\nAbhirup Seal \u2014 Dell Technologies\nHemal Shah \u2014 Broadcom Inc.\nJim Shelton \u2014 Vertiv\nTom Slaight \u2014 Intel Corporation\nJosiah Smith \u2014 Eaton\nDonnie Sturgeon \u2014 Vertiv\nPawel Szymanski \u2014 Intel Corporation\nEd Tanous \u2014 Google LLC\nWilly Tu \u2014 Google LLC\nPaul Vancil \u2014 Dell Technologies\nGanesh Viswanathan \u2014 Dell Technologies\nClaire Weinan \u2014 Google LLC\nJoseph White \u2014 Dell Technologies\nLinda Wu \u2014 NVIDIA Corporation, Super Micro Computer, Inc.\nJustin York \u2014 Hewlett Packard Enterprise\nIntroduction\nRedfish is a standard that uses RESTful interface semantics to access a schema based data model to conduct management operations. It is suitable for a wide range of devices, from stand-alone servers, to composable infrastructures, and to large-scale cloud environments.\n\nThe initial Redfish scope targeted servers. DMTF and its alliance partners expanded that scope to cover most data center IT equipment and other solutions, and both in- and out-of-band access methods.\n\nAdditionally, DMTF and other organizations that use Redfish as part of their industry standard or solution have added educational material.\n\nThis document defines the RESTful interface", "doc_id": "32448ad9-e248-43c4-931f-78f92922bcb1", "embedding": null, "doc_hash": "0244231cd9137360dedbd61aada9b084f3b329023617f3b963aebd5a8e8f502b", "extra_info": null, "node_info": {"start": 11948, "end": 15511, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "231ab9ca-fa1b-4c2e-9d34-2f524bce0be6", "3": "74d15f8c-d4c0-43ae-a19d-13016283f4c9"}}, "__type__": "1"}, "74d15f8c-d4c0-43ae-a19d-13016283f4c9": {"__data__": {"text": "or solution have added educational material.\n\nThis document defines the RESTful interface protocol and the various concepts and services necessary to implement a Redfish interface. The definition of the schema based data model and standard messages for the Redfish interface are covered separately in the following documents:\n\nDMTF DSP8010, Redfish Schema Bundle, https://www.dmtf.org/dsp/DSP8010 contains the individual schema definition files in multiple schema description languages.\nDMTF DSP0268, Redfish Data Model Specification, https://www.dmtf.org/dsp/DSP0268 contains the normative descriptions and example payloads for all standard Redfish schema in a single reference guide.\nDMTF DSP8011, Redfish Standard Registries Bundle, https://www.dmtf.org/dsp/DSP8011 contains the message registries used for error reporting and event messages.\n1 Scope\nThis specification defines the required protocols, data model, behaviors, and other architectural components for an interoperable, multivendor, remote, and out-of-band capable interface. This interface meets the cloud-based and web-based IT professionals' expectations for scalable platform management. While large and hyperscale environments are the primary focus, clients can use the specification for individual system management.\n\nThe specification defines the required elements for all Redfish implementations, and the optional elements that system vendors and manufacturers can choose. This specification also defines at which points an implementation can provide OEM-specific extensions.\n\nThe specification sets normative requirements for Redfish services and associated materials, such as Redfish schema files. In general, the specification does not set requirements for Redfish clients but indicates how a client can successfully and effectively access and use a Redfish service.\n\nThe specification does not require that implementations of the Redfish interfaces and functions require particular hardware or firmware.\n\n2 Normative references\nThe following documents are referred to in the text in such a way that some or all of their content constitutes requirements of this document. For dated references, only the edition cited applies. For undated references, the latest edition of the referenced document (including any amendments) applies.\n\nDMTF DSP0270, Redfish Host Interface Specification, https://www.dmtf.org/sites/default/files/standards/documents/DSP0270_1.0.0.pdf\nRedfish Schema: RedfishExtensions v1.0.0, https://redfish.dmtf.org/schemas/v1/RedfishExtensions_v1.xml\nTransport Layer Security (TLS) Parameters, https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml\nJSON Schema: A Media Type for Describing JSON Documents draft-handrews-json-schema-01, https://tools.ietf.org/html/draft-handrews-json-schema-01\nJSON Schema Validation: A Vocabulary for Structural Validation of JSON draft-handrews-json-schema-validation-01, https://tools.ietf.org/html/draft-handrews-json-schema-validation-01\nIETF RFC1738, T. Berners-Lee et al, Uniform Resource Locators (URL), https://tools.ietf.org/html/rfc1738\nIETF RFC3986, T. Berners-Lee et al, Uniform Resource Identifier (URI): Generic Syntax, https://tools.ietf.org/html/rfc3986\nIETF RFC4122, P. Leach et al, A Universally Unique IDentifier (UUID) URN Namespace, https://tools.ietf.org/html/rfc4122\nIETF RFC5280, D. Cooper et al, Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile,\nIETF RFC6585, M. Nottingham et al, Additional HTTP Status Codes, https://tools.ietf.org/html/rfc6585\nIETF RFC6749, D. Hardt, Ed., The OAuth 2.0 Authorization Framework,", "doc_id": "74d15f8c-d4c0-43ae-a19d-13016283f4c9", "embedding": null, "doc_hash": "534d0f2e2d4b14fd9a152aa5fc5968e2fbe7b2ce6787821f8c6c3316b5f93c60", "extra_info": null, "node_info": {"start": 15494, "end": 19123, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "32448ad9-e248-43c4-931f-78f92922bcb1", "3": "1b20283c-ddc9-4782-8395-096c4a86dbb6"}}, "__type__": "1"}, "1b20283c-ddc9-4782-8395-096c4a86dbb6": {"__data__": {"text": "D. Hardt, Ed., The OAuth 2.0 Authorization Framework, https://tools.ietf.org/html/rfc6749\nIETF RFC6901, P. Bryan, Ed. et al, JavaScript Object Notation (JSON) Pointer, https://tools.ietf.org/html/rfc6901\nIETF RFC7230, R. Fielding et al, Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing, https://tools.ietf.org/html/rfc7230\nIETF RFC7231, R. Fielding et al, Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content, https://tools.ietf.org/html/rfc7231\nIETF RFC7232, R. Fielding et al, Hypertext Transfer Protocol (HTTP/1.1): Conditional Requests, https://tools.ietf.org/html/rfc7232\nIETF RFC7234, R. Fielding et al, Hypertext Transfer Protocol (HTTP/1.1): Caching, https://tools.ietf.org/html/rfc7234\nIETF RFC7540, M. Belshe et al, Hypertext Transfer Protocol Version 2 (HTTP/2), https://tools.ietf.org/html/rfc7540\nIETF RFC7519, M. Jones et al, JSON Web Token (JWT), https://tools.ietf.org/html/rfc7519\nIETF RFC7525, Y. Sheffer et al, Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS), https://tools.ietf.org/html/rfc7525\nIETF RFC7578, L. Masinter et al, Returning Values from Forms: multipart/form-data, https://tools.ietf.org/html/rfc7578\nIETF RFC7617, J. Reschke et al, The 'Basic' HTTP Authentication Scheme, https://tools.ietf.org/html/rfc7617\nIETF RFC8259, T. Bray, Ed., The JavaScript Object Notation (JSON) Data Interchange Format, https://tools.ietf.org/html/rfc7617\nIETF RFC8288, M. Nottingham, Web Linking, https://tools.ietf.org/html/rfc8288\nISO 639-1:2002, Codes for the representation of names of languages - Part 1: Alpha-2 code, https://www.iso.org/standard/22109.html\n24 February 2014, OData Version 4.0 Part 1: Protocol, https://docs.oasis-open.org/odata/odata/v4.0/os/part1-protocol/odata-v4.0-os-part1-protocol.html\n24 February 2014, OData Version 4.0 Part 3: Common Schema Definition Language (CSDL), https://docs.oasis-open.org/odata/odata/v4.0/os/part3-csdl/odata-v4.0-os-part3-csdl.html\n10 March 2016, OData Version 4.0 Plus Errata 03 OASIS Standard incorporating Draft 01 of Errata 03, https://docs.oasis-open.org/odata/odata/v4.0/errata03/csd01/complete/vocabularies/Org.OData.Measures.V1.xml\n20 November 2014, SNIA TLS Specification for Storage Systems, https://www.snia.org/tech_activities/standards/curr_standards/tls\nThe OpenAPI Specification, https://swagger.io/specification/\nThe Unified Code for Units of Measure, https://ucum.org/ucum.html\n9 September 2021, Fetch Living Standard, https://fetch.spec.whatwg.org/\n17 September 2021, 9.2 Server-sent events in the HTML Living Standard, https://html.spec.whatwg.org/multipage/server-sent-events.html\n3 Terms, definitions, symbols, and abbreviated terms\nSome terms and phrases in this document have specific meanings beyond their typical English meanings. This clause defines those terms and phrases.\n\nThe terms \"shall\" (\"required\"), \"shall not\", \"should\"", "doc_id": "1b20283c-ddc9-4782-8395-096c4a86dbb6", "embedding": null, "doc_hash": "ddc9449147de8d944d48d22edc92a8ca2316f0de50e8622726c60ab2f0066674", "extra_info": null, "node_info": {"start": 19157, "end": 22073, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "74d15f8c-d4c0-43ae-a19d-13016283f4c9", "3": "41544a6f-b0bf-4a2f-9c8b-2875251edadc"}}, "__type__": "1"}, "41544a6f-b0bf-4a2f-9c8b-2875251edadc": {"__data__": {"text": "terms \"shall\" (\"required\"), \"shall not\", \"should\" (\"recommended\"), \"should not\" (\"not recommended\"), \"may\", \"need not\" (\"not required\"), \"can\" and \"cannot\" in this document are to be interpreted as described in ISO/IEC Directives, Part 2, Clause 7. The terms in parenthesis are alternatives for the preceding term, for use in exceptional cases when the preceding term cannot be used for linguistic reasons. Note that ISO/IEC Directives, Part 2, Clause 7 specifies additional alternatives. Occurrences of such additional alternatives shall be interpreted in their normal English meaning.\n\nThe terms \"clause\", \"subclause\", \"paragraph\", and \"annex\" in this document are to be interpreted as described in ISO/IEC Directives, Part 2, Clause 6.\n\nThe terms \"normative\" and \"informative\" in this document are to be interpreted as described in ISO/IEC Directives, Part 2, Clause 3. In this document, clauses, subclauses, or annexes labeled \"(informative)\" do not contain normative content. Notes and examples are always informative elements.\n\nThe term \"deprecated\" in this document is to be interpreted as material that is not recommended for use in new development efforts. Existing and new implementations may use this material, but they should move to the favored approach. Deprecated material may be implemented in order to achieve backwards compatibility. Deprecated material should contain references to the last published version that included the deprecated material as normative material and to a description of the favored approach. Deprecated material may be removed from the next major version of the specification.\n\nThis document defines these additional terms:\n\n3.1 Hardware terms\n3.1.1 baseboard management controller (BMC)\nembedded device or service\n\nNote 1 to entry: Typically an independent microprocessor or system-on-chip with associated firmware in a computer system that completes out-of-band systems monitoring and management-related tasks.\n\n3.1.2 IPMI\nIntelligent Platform Management Interface\n\n3.1.3 KVM-IP\nkeyboard, video, mouse redirection over IP\n\n3.1.4 NIC\nnetwork interface controller\n\n3.1.5 PCI\nPeripheral Component Interconnect\n\n3.1.6 PCIe\nPeripheral Component Interconnect Express\n\n3.2 Web development terms\n3.2.1 CORS\ncross-origin resource sharing\n\n3.2.2 CRUD\nbasic Create, Read, Update, and Delete operations that any interface can support\n\n3.2.3 CSRF\ncross-site request forgery\n\n3.2.4 event\ndata structure that corresponds to one or more alerts\n\n3.2.5 excerpt\nsubset of data that is copied from one resource and presented in another resource\n\nNote 1 to entry: An excerpt provides data in convenient locations without duplication of entire resources.\n\n3.2.6 HTTP\nHypertext Transfer Protocol\n\n3.2.7 HTTPS\nHypertext Transfer Protocol Secure\n\nNote 1 to entry: TLS secures HTTP.\n\n3.2.8 hypermedia API\nAPI that enables you to navigate through URIs that a service returns\n\n3.2.9 IP\nInternet Protocol\n\n3.2.10 JSON\nJavaScript Object Notation\n\n3.2.11 member\nsingle resource instance in a resource collection\n\n3.2.12 message\ncomplete HTTP-formatted or HTTPS-formatted request or response\n\nNote 1 to entry: In the REST-based Redfish protocol, every request results in a response.\n\n3.2.13 OData\nOpen Data Protocol (OData), as defined in OData Version 4.0 Part 1: Protocol\n\n3.2.14 OData service document\nresource that provides information about the service root for generic OData clients\n\n3.2.15 operation\nHTTP POST, GET, PUT, PATCH, HEAD, and DELETE request methods that map to generic CRUD operations\n\n3.2.16 parent resource\nparent to another resource if the initial segment of the resource URI is the same as the URI of the other resource, but is at least one level higher\n\nNote 1 to entry: For example,", "doc_id": "41544a6f-b0bf-4a2f-9c8b-2875251edadc", "embedding": null, "doc_hash": "16dff921339582b96200cebba2b2d2ed930b56552c4bc74e90e2c231c1f783d4", "extra_info": null, "node_info": {"start": 22076, "end": 25795, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "1b20283c-ddc9-4782-8395-096c4a86dbb6", "3": "a8f2d9f4-9ca5-47bb-91b3-504727a4f2f8"}}, "__type__": "1"}, "a8f2d9f4-9ca5-47bb-91b3-504727a4f2f8": {"__data__": {"text": "resource, but is at least one level higher\n\nNote 1 to entry: For example, /redfish/v1/Chassis/A88 is a parent resource of /redfish/v1/Chassis/A88/Assembly.\n\n3.2.17 property\nname-value pair in a Redfish-defined request or response\n\nNote 1 to entry: A property can be any valid JSON data type.\n\n3.2.18 request\nmessage from a client to a service\n\n3.2.19 response\nmessage from a service to a client in response to a request message\n\n3.2.20 subscription\nregistration of a destination to receive events\n\n3.2.21 task\nrepresentation of a long-running operation\n\n3.2.22 task monitor\nopaque service-generated URI that the client who initiates the request can use to monitor an asynchronous operation\n\n3.2.23 TCP\nTransmission Control Protocol\n\n3.2.24 TLS\nTransport Layer Security\n\n3.2.25 XSS\ncross-site scripting\n\n3.3 Redfish terms\n3.3.1 collection\nsee resource collection\n\n3.3.2 Redfish client\ncommunicates with a Redfish service and accesses one or more of the service's resources or functions\n\n3.3.3 Redfish protocol\ndiscovers, connects to, and inter-communicates with a Redfish service\n\n3.3.4 Redfish schema\na set of human and machine-readable documents that define Redfish resources using one or more of the supported schema definition languages\n\n3.3.5 Redfish service\nimplementation of the protocols, resources, and functions that deliver the interface that this specification defines and its associated behaviors for one or more managed systems\n\nNote 1 to entry: Also known as the service.\n\n3.3.6 resource\nURI-addressable Redfish data structure\n\n3.3.7 resource collection\nset of similar resources where the number of instances can shrink or grow\n\n3.3.8 resource tree\ntree structure of resources accessible through a well-known starting URI\n\nNote 1 to entry: A client can discover the available resources on a Redfish service by following the resource hyperlinks from the base of the tree.\n\n3.3.9 resource type\nset of definitions for properties and actions contained within a resource and documented in the Redfish schema files\n\n3.3.10 service root\nstarting-point resource for locating and accessing the other resources and associated metadata that make up an instance of a Redfish service\n\n3.3.11 subordinate resource\nis subordinate to another resource if the initial segment of the resource URI is the same as the URI of the other resource, but is at least one level deeper\n\nNote 1 to entry: For example, /redfish/v1/Chassis/A88/Assembly is a subordinate resource of the Chassis resource named A88.\n\n4 Typographical conventions\nThe following typographical convention indicates deprecated material:\n\nDEPRECATED\n\nDeprecated material appears here.\n\nEND DEPRECATED\n\nIn places where this typographical convention cannot be used, such as tables or figures, the \"DEPRECATED\" label is used alone.\n\n5 Overview\nRedfish is a management standard that uses a data model representation with a RESTful interface.\n\nBeing RESTful, Redfish is easier to use and implement.\n\nBeing model-oriented, it can express the relationships between components and the semantics of the Redfish services and components within them. The model is also easy to extend.\n\nBy requiring JSON representation, Redfish enables easy integration with programming environments. It is also easy to interpret by humans.\n\nAn interoperable Redfish schema defines this model, which is freely available and published in OpenAPI YAML, OData CSDL, and JSON Schema formats.\n\n5.1 Goals\nAs an architecture, data model, and set of protocols that enable a client to access Redfish services, Redfish has these goals.\n\nTable 1 describes these goals:\n\nTable 1 \u2014 Redfish goals\nGoal\tPurpose\nScalable\tCan scale on stand-alone machines or racks of equipment.\nFlexible\tCan implement through existing hardware or entirely as a software service.\nExtensible\tCan easily add new and", "doc_id": "a8f2d9f4-9ca5-47bb-91b3-504727a4f2f8", "embedding": null, "doc_hash": "295b2f624f4736066c0e664b552e71ac4e4b081b52432e922a89ad8f5819cfa7", "extra_info": null, "node_info": {"start": 25779, "end": 29586, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "41544a6f-b0bf-4a2f-9c8b-2875251edadc", "3": "e1a57b67-63b9-4bf6-b447-cb3014eaa524"}}, "__type__": "1"}, "e1a57b67-63b9-4bf6-b447-cb3014eaa524": {"__data__": {"text": "or entirely as a software service.\nExtensible\tCan easily add new and vendor-specific capabilities to the data model.\nBackward-compatible\tCan add capabilities while preserving investments in earlier implementations.\nInteroperable\tProvides consistent functionality across multiple vendor implementations.\nStandards-based\tBuilt on ubiquitous and secure protocols. Leverages other standards where applicable.\nSimple\tEasy-to-use without the need for highly specialized programming skills or systems knowledge.\nLightweight\tDesigned to reduce complexity and implementation costs. Minimizes the required footprint for implementations.\n5.2 Design tenets\nTo deliver these goals, Redfish:\n\nProvides a RESTful interface by using a JSON payload and a data model.\nSeparates the protocol from the data model, which enables the independent revision and use of each.\nSpecifies versioning rules for protocols and schema.\nLeverages strength of ubiquitous standards where it meets architectural requirements, such as JSON, HTTP, OData, OpenAPI, and the RFCs that this document references.\nOrganizes the data model so that it provides clearly demarcated and value-add features in the same payload as standardized items.\nMakes data in payloads as obvious in context as possible.\nMaintains implementation flexibility. Does not tie the interface to any particular underlying implementation or architecture.\nFocuses on widely used capabilities. To avoid complexity, does not add functions that only a small percentage of users value.\n5.3 Limitations\nRedfish minimizes the need for clients to complete upgrades by using strict versioning and forward-compatibility rules, and separation of the protocols from the data model. However, Redfish does not guarantee that clients never need to update their software. For example, clients might need to upgrade to manage new system or component types, or update the data model.\n\nInteroperable does not mean identical. Many elements of Redfish are optional. Clients should be prepared to discover the optional elements by using the built-in discovery methods.\n\nThe resource tree reflects the topology of the system and its devices. Consequently, different hardware or device types result in different resource trees, even for identical systems from the same manufacturer. References between resources may result in a graph instead of a tree. Clients that traverse the resource tree should provide logic to avoid infinite loops.\n\nAdditionally, not all Redfish resources use simple REST read-and-write semantics. Different use cases may follow other types of client logic. For example, clients cannot simply read user credentials or certificates from one service and write them to another service.\n\nFinally, the hyperlink values between resources and other elements can vary across implementations. Clients should not assume that they can reuse hyperlinks across different Redfish service instances.\n\n5.4 Additional design background and rationale\n5.4.1 REST-based interface\nRedfish exposes many service applications as RESTful interfaces. This document defines a RESTful interface.\n\nRedfish defines a RESTful interface because it:\n\nEnables a lightweight implementation, using fewer layers than previous standards.\nIs a prevalent access method in the industry.\nIs easy to learn, document, and implement in modern programming languages.\nHas a number of development environments and a healthy tooling ecosystem.\nFits with the design goal of simplicity.\nEqually applies to software application space as it does to embedded environments, which enables convergence and sharing of code within the management ecosystem.\nAdapts well to any data modeling language.\nHas industry-provided security and discovery mechanisms.\n5.4.2 Data-oriented\nThe Redfish data model is developed by focusing on the contents of the payload. By concentrating on the contents of the payload first, Redfish payloads are easily mapped to schema definition languages and encoding types. The data model is defined in various schema languages, including OpenAPI YAML, OData CSDL, and JSON Schema.\n\n5.4.3 Separation of protocol from data model\nRedfish separates the protocol operations from the data model and", "doc_id": "e1a57b67-63b9-4bf6-b447-cb3014eaa524", "embedding": null, "doc_hash": "e2cb34599f7535fb752ff90baf21c142d41376ed47cd7869ee0b309f3af98b98", "extra_info": null, "node_info": {"start": 29589, "end": 33775, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "a8f2d9f4-9ca5-47bb-91b3-504727a4f2f8", "3": "05a5f862-af0b-4657-b89d-221f6ec61a25"}}, "__type__": "1"}, "05a5f862-af0b-4657-b89d-221f6ec61a25": {"__data__": {"text": "protocol from data model\nRedfish separates the protocol operations from the data model and versions the protocol independently from the data model. This enables clients to extend and change the data model as needed without requiring the protocol version to change.\n\n5.4.4 Hypermedia API service root\nRedfish has a single service root URI and clients can discover all resources through referenced URIs. The hypermedia API enables the discovery of resources through hyperlinks.\n\n5.4.5 OpenAPI v3.0 support\nThe OpenAPI v3.0 provides a rich ecosystem of tools for using RESTful interfaces that meet the design requirements of that specification. Starting with Redfish Specification v1.6.0, the Redfish schemas support the OpenAPI YAML file format and URI patterns that conform to the OpenAPI Specification were defined. Conforming Redfish services that support the Redfish protocol version v1.6.0 or later implement those URI patterns to enable use of the OpenAPI ecosystem.\n\nFor details, see OpenAPI Specification v3.0.\n\n5.4.6 OData conventions\nWith the popularity of RESTful APIs, there are nearly as many RESTful interfaces as there are applications. While following REST patterns helps promote good practices, due to design differences between the many RESTful APIs there few common conventions between them.\n\nTo provide for interoperability between APIs, OData defines a set of common RESTful conventions and annotations. Redfish follows OData conventions for describing schema, URL conventions, and definitions for typical properties in a JSON payload.\n\n5.5 Service elements\n5.5.1 Synchronous and asynchronous operation support\nSome operations can take more time than a client typically wants to wait. For this reason, some operations can be asynchronous at the discretion of the service. The request portion of an asynchronous operation is no different from the request portion of a synchronous operation.\n\nTo determine whether an operation was completed synchronously or asynchronously, clients can review the HTTP status codes. For more information, see the Asynchronous operations clause.\n\n5.5.2 Eventing mechanism\nRedfish enables clients to receive messages outside the normal request and response paradigm. The service uses these messages, or events, to asynchronously notify the client of a state change or error condition, usually of a time critical nature.\n\nThis specification defines two styles of eventing:\n\nPush-style eventing.\n\nWhen the service detects the need to send an event, it calls HTTP POST to push the event message to the client. Clients can enable reception of events by creating a subscription entry in the event service, or an administrator can create subscriptions as part of the Redfish service configuration.\n\nServer-sent events (SSE)-style eventing.\n\nThe client opens an SSE connection to the service through a GET on the ServerSentEventUri-specified URI in the event service.\n\nFor information, see the Eventing clause.\n\n5.5.3 Actions\nActions are Redfish operations that do not easily map to RESTful interface semantics. These types of operations may not directly affect properties in the Redfish resources. The Redfish schema defines certain standard actions for common Redfish resources. For these standard actions, the Redfish schema contains the normative language on the behavior of the action.\n\n5.5.4 Service discovery\nWhile the service itself is at a well-known URI, clients need to discover the network address of the service. Like UPnP, Redfish uses SSDP for discovery. A wide variety of devices, such as printers and client operating systems, support SSDP. It is simple, lightweight, IPv6 capable, and suitable for implementation in embedded environments.\n\nFor more information, see the Discovery clause.\n\n5.5.5 Remote access support\nRemote management functionality typically includes access mechanisms for redirecting operator interfaces such as serial console, keyboard video and mouse (KVM-IP), command shell, or command-line interface, and virtual media. While these mechanisms are critical functionality, they cannot be reasonably implemented as a RESTful interface.\n\nTherefore, this standard does not define the protocols or access mechanisms", "doc_id": "05a5f862-af0b-4657-b89d-221f6ec61a25", "embedding": null, "doc_hash": "df9574c0d5c71edb14b0bae811f8f286812ff3147aaee14bd3b8e022a4bd2a67", "extra_info": null, "node_info": {"start": 33757, "end": 37947, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "e1a57b67-63b9-4bf6-b447-cb3014eaa524", "3": "e0923949-891f-4204-959c-542e4b7c41b8"}}, "__type__": "1"}, "e0923949-891f-4204-959c-542e4b7c41b8": {"__data__": {"text": "interface.\n\nTherefore, this standard does not define the protocols or access mechanisms for those services but encourages implementations that leverage existing standards. However, the Redfish schema includes resources and properties that enable client discovery of these capabilities and access mechanisms to enable interoperability.\n\n5.6 Security\nThe challenge of remote interface security is to protect both the interface and exchanged data. To accomplish this, Redfish provides authentication and encryption. As part of this security, Redfish defines and requires minimum levels of encryption.\n\nFor more information, see the Security details clause.\n\n6 Protocol details\nIn this document, the Redfish protocol refers to the RESTful mapping to HTTP, TCP/IP, and other protocol, transport, and messaging layer aspects. HTTP is the application protocol that transports the messages and TCP/IP is the transport protocol. The RESTful interface is a mapping to the message protocol.\n\nThe Redfish protocol is designed around a web service-based interface model, which provides network and interaction efficiency for both user interface (UI) and automation usage. Specifically, the protocol can leverage existing tool chains.\n\nTable 2 describes the items that the Redfish protocol uses:\n\nTable 2 \u2014 Redfish protocol\nItem\tDescription\nHTTP methods\tMaps to common CRUD operations.\nActions\tExpands operations beyond CRUD-type operations.\nMedia types\tNegotiates the type of data sent in the message body.\nHTTP status codes\tIndicates the success or failure of the server's request.\nError responses\tReturns more information than HTTP status codes.\nTLS\tSecures messages. See Security details.\nAsynchronous semantics\tManages long-running operations.\nA Redfish interface shall be exposed through a web service endpoint implemented by using HTTP version 1.1. See RFC7230, RFC7231, and RFC7232.\n\nA Redfish interface may additionally be exposed through a web service endpoint implemented by using HTTP version 2.0. See RFC7540.\n\nThe subsequent clauses describe how the Redfish interface uses and adds constraints to HTTP to ensure interoperability of Redfish implementations.\n\n6.1 Universal Resource Identifiers\nA Universal Resource Identifier (URI) identifies a resource, including the service root and all Redfish resources.\n\nA URI shall identify each unique instance of a resource.\nURIs shall not include any RFC1738-defined unsafe characters.\nFor example, the {, }, , |, ^, ~, [, ], `, and \\ characters are unsafe because gateways and other transport agents can sometimes modify these characters.\nDo not use the # character for anything other than the start of a fragment.\nURIs shall not include any percent-encoding of characters. This restriction does not apply to the query parameters portion of the URI.\nA GET operation on a URI returns a representation of the resource with properties and hyperlinks to associated resources. The service root URI is well known and is based on the protocol version.\n\nTo discover the URIs to additional resources, extract the associated resource hyperlinks from earlier responses. The hypermedia API enables the discovery of resources through hyperlinks.\n\nRedfish considers the RFC3986-defined scheme, authority, service root, and version, and unique resource path component parts of the URI.\n\nFor example, this URI:\n\nhttps://mgmt.vendor.com/redfish/v1/Systems/1\nContains these component parts:\n\nhttps: is the scheme.\nmgmt.vendor.com is the authority to which to delegate the URI.\nredfish/v1 is the service root and version.\nSystems/1 is the unique resource path.\nIn a URI:\n\nThe scheme and authority component parts are not part of the unique resource path because redirection capabilities and local operations may cause the connection portion to vary.\nThe service root and resource path component parts uniquely identify the resource in a Redfish service.\nIn an implementation:\n\nThe resource path component part shall be unique.\nA relative reference in the body and HTTP headers payload can identify a resource in that same implementation.\nAn absolute URI in the body and HTTP headers payload can identify a resource in a different implementation.\nFor the absolute URI definition, see RFC3986.\n\nFor", "doc_id": "e0923949-891f-4204-959c-542e4b7c41b8", "embedding": null, "doc_hash": "8669b7da050c8b928af0a05f96409c4bcba7722734defdefc9bd016afe201161", "extra_info": null, "node_info": {"start": 37949, "end": 42169, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "05a5f862-af0b-4657-b89d-221f6ec61a25", "3": "633ccc35-ddb6-4b88-ad0d-d9f74fd290b0"}}, "__type__": "1"}, "633ccc35-ddb6-4b88-ad0d-d9f74fd290b0": {"__data__": {"text": "a different implementation.\nFor the absolute URI definition, see RFC3986.\n\nFor example, a POST operation may return the /redfish/v1/Systems/2 URI in the Location header of the response, which points to the POST-created resource.\n\nAssuming that the client connects through the mgmt.vendor.com appliance, the client accesses the resource through the https://mgmt.vendor.com/redfish/v1/Systems/2 absolute URI.\n\nURIs that conform to RFC3986 may also contain the query, ?query, and frag, #frag, components. For information about queries, see Query parameters. When a URI includes a fragment (frag) to submit an operation, the server ignores the fragment.\n\nIf a property in a response references another property within a resource, use the RFC6901-defined URI fragment identifier representation format. If the property is a reference property in the schema, the fragment shall reference a valid resource identifier. For example, the following fragment identifies a property at index 0 of the Fans array in the /redfish/v1/Chassis/MultiBladeEncl/Thermal resource:\n\n{\n   \"@odata.id\": \"/redfish/v1/Chassis/MultiBladeEncl/Thermal#/Fans/0\"\n}\nFor requirements on constructing Redfish URIs, see the resource URI patterns annotation clause.\n\n6.2 HTTP methods\nTable 3 describes the mapping of HTTP methods to the Redfish-supported operations. If the Required column contains Yes, a Redfish interface shall support the HTTP method. If the Required column contains No, a Redfish interface may support the HTTP method.\n\nTable 3 \u2014 Mapping of HTTP methods to Redfish-supported operations\nHTTP method\tInterface semantic\tRequired\nPOST\tCreate resource\nResource action\nEventing\tYes\nGET\tRetrieve resource\tYes\nPUT\tReplace resource\tNo\nPATCH\tUpdate resource\tYes\nDELETE\tDelete resource\tYes\nHEAD\tRetrieve resource header\tNo\nOPTIONS\tRetrieve header\nCross-origin resource sharing (CORS) pre-flight\tNo\nFor HTTP methods that the Redfish service does not support or that Table 3 omits, the Redfish service shall return the HTTP 405 Method Not Allowed status code or the HTTP 501 Not Implemented status code.\n\n6.3 HTTP redirect\nHTTP redirect enables a service to redirect a request to another URL. Among other things, HTTP redirect enables Redfish resources to alias areas of the data model.\n\nAll Redfish clients shall correctly handle HTTP redirect.\n\nThe service for the redirected resource shall enforce the authentication and authorization requirements for the redirected resource.\n\n6.4 Media types\nSome resources may be available in more than one type of representation. The media type indicates the representation type.\n\nIn HTTP messages, the media type is specified in the Content-Type header. To tell a service to return the response through certain media types, the client sets the HTTP Accept header to a list of the media types.\n\nAll resources shall be available through the JSON application/json media type.\nRedfish services shall make every resource available in a JSON-based representation as a JSON object, as specified in RFC8259. Receivers shall not reject a JSON-encoded message, and shall offer at least one JSON-based response representation. An implementation may offer additional non-JSON media type representations.\nTo request compression in the response body, clients specify an Accept-Encoding request header.\n\n6.5 ETags\nTo reduce unnecessary RESTful accesses to resources, the Redfish service should support the association of a separate entity tag (ETag) with each resource.\n\nImplementations should support the return of ETag properties for each resource.\nImplementations should support the return of ETag headers for each single-resource response.\nImplementations shall support the return of ETag headers for GET requests of ManagerAccount resources.\nBecause the service knows whether the new version of the object is substantially different, the service generates and provides the ETag as part of the resource payload.\n\nThe ETag mechanism supports both strong and weak validation. If a resource supports an ETag, it shall use the RFC7232-defined ETag.\n\nThis specification does not mandate a particular algorithm for ETag", "doc_id": "633ccc35-ddb6-4b88-ad0d-d9f74fd290b0", "embedding": null, "doc_hash": "a71455b28706e04684737d16484c5283739696d694aef65908708b94196ebfef", "extra_info": null, "node_info": {"start": 42177, "end": 46289, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "e0923949-891f-4204-959c-542e4b7c41b8", "3": "9e76414a-8833-4cd1-979e-378efe19320c"}}, "__type__": "1"}, "9e76414a-8833-4cd1-979e-378efe19320c": {"__data__": {"text": "ETag.\n\nThis specification does not mandate a particular algorithm for ETag creation, but ETags should be highly collision-free.\n\nAn ETag can be:\n\nA hash\nA generation ID\nA time stamp\nSome other value that changes when the underlying object changes\nIf a client performs a PUT operation or PATCH operation to update a resource, it should include an ETag from a previous GET in the HTTP If-Match or If-None-Match header. Both strong and weak ETags are allowed in these headers. If a service supports the return of the ETag header on a resource, it may respond with the HTTP 428 Precondition Required status code if the If-Match or If-None-Match header is missing from the PUT or PATCH request for the same resource, as specified in RFC6585.\n\nIn addition to the return of the ETag property on each resource, a Redfish service should return the ETag header on:\n\nA client PUT, POST, or PATCH operation\nA GET operation for an individual resource\nThe format of the ETag header is:\n\nETag: <string>\nFor responses to $expand requests:\n\nThe @odata.etag property of each resource in the response shall contain the ETag of the resource as if it were not expanded.\nThe ETag header should contain the ETag of the entire response body.\nFor resources that update frequently, such as resources with a date-time configuration or a sensor reading, implementations might consider methods to reduce frequent ETag updates, such as rounding a property value when calculating an ETag for the resource. This might be important if clients want to use the If-Match header to prevent collisions with other clients. For example, if a client is attempting to modify a Manager resource and the DateTime property updates the ETag every second, a client performing a PATCH operation on the Manager resource with the If-Match header will likely contain an old ETag if DateTime is not handled specifically to reduce frequent ETag updates, causing the service to respond with the HTTP 412 Precondition Failed status code.\n\n6.6 Protocol version\nThe protocol version is separate from the resources' version or the Redfish schema version that the resources support.\n\nEach Redfish protocol version is strongly typed by using the URI of the Redfish service in combination with the resource obtained at that URI, called the ServiceRoot resource.\n\nThe root URI for this version of the Redfish protocol shall be /redfish/v1/.\n\nThe URI defines the major version of the protocol.\n\nThe RedfishVersion property of the ServiceRoot resource defines the protocol version, which includes the major version, minor version, and errata version of the protocol, as defined in the Redfish schema for that resource.\n\nThe protocol version is a string in the format:\n\n<MajorVersion>.<MinorVersion>.<ErrataVersion>\n\nwhere\n\n<MajorVersion> is an integer that represents the major version. Indicates a backward-incompatible change.\n<MinorVersion> is an integer that represents the minor version. Indicates a minor update. Redfish introduces functionality but does not remove any functionality. The minor version preserves compatibility with earlier minor versions.\n<ErrataVersion>is an integer that represents the errata version. Indicates a fix to the earlier version.\nAny resource that a client discovers through hyperlinks that the service root or any service root-referenced service or resource returns shall conform to the same protocol version that the service root supports.\n\nA GET operation on the /redfish resource shall return this response body:\n\n{\n   \"v1\": \"/redfish/v1/\"\n}\n6.7 Redfish-defined URIs and relative reference rules\nTable 4 describes the Redfish-defined URIs that a Redfish service shall support:\n\nTable 4 \u2014 Redfish-defined URIs\nURI\tReturns\tNote\n/redfish\tVersion. A major update that does not preserve compatibility with earlier minor versions.\tServices shall support this URI.\n/redfish/v1/\tRedfish service root.\tServices shall support this URI.\n/redfish/v1/odata\tRedfish OData service document.\tServices shall support this URI.\n/redfish/v1/$metadata\tRedfish metadata document.\tServices shall support this", "doc_id": "9e76414a-8833-4cd1-979e-378efe19320c", "embedding": null, "doc_hash": "993c3de493743cd45fcb3949b4bdad5a8ac295b6e06e87804e729919a01ef25a", "extra_info": null, "node_info": {"start": 46295, "end": 50357, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "633ccc35-ddb6-4b88-ad0d-d9f74fd290b0", "3": "81197b5c-0389-4564-941f-75878a05318d"}}, "__type__": "1"}, "81197b5c-0389-4564-941f-75878a05318d": {"__data__": {"text": "metadata document.\tServices shall support this URI.\n/redfish/v1/openapi.yaml\tRedfish OpenAPI YAML document.\tServices should support this URI.\n/redfish/v1/Schemas/<SchemaFile>\tLocal copy of a Redfish schema file, where <SchemaFile> is the file name of the local schema file.\tServices should support this URI.\nIn addition, Table 5 describes the URIs that services shall process without a trailing slash in one of these ways:\n\nRedirect it to the associated Redfish-defined URI.\nTreat it as the equivalent URI to the associated Redfish-defined URI.\nTable 5 \u2014 Redfish-defined URIs without trailing slashes\nURI\tAssociated Redfish-defined URI\n/redfish/v1\t/redfish/v1/\n/redfish/\t/redfish\nAll other Redfish service-supported URIs shall match the resource URI patterns definitions, except the supplemental resources that the @Redfish.Settings, @Redfish.ActionInfo, and @Redfish.CollectionCapabilities payload annotations reference. The client shall treat the URIs for these supplemental resources as opaque.\n\nAll Redfish-defined URIs and URIs starting with /redfish are reserved for future standardization by DMTF and DMTF alliance partners, except OEM extension URIs, which shall conform to the requirements of the OEM URIs clause.\n\nAll relative references that the service uses shall start with either:\n\nA double forward slash (//) and include the authority (network-path), such as //mgmt.vendor.com/redfish/v1/Systems.\nA single forward slash (/) and include the absolute-path, such as /redfish/v1/Systems.\nFor details, see RFC3986.\n\n7 Service requests\nThis clause describes the requests that clients can send to Redfish services.\n\n7.1 Request headers\nTable 6 lists the HTTP-defined request headers and their requirements for Redfish services and clients.\n\nFor Redfish services:\n\nRedfish services shall process the HTTP-defined headers in Table 6 if the Service requirement column contains Yes or Conditional.\nRedfish services should process the HTTP-defined headers in Table 6 and Table 7 if the Service requirement column contains No.\nFor Redfish clients (sending the HTTP requests):\n\nRedfish clients shall include the HTTP-defined headers in Table 6 if the Client requirement column contains Yes or Conditional.\nRedfish clients should transmit the HTTP-defined headers in Table 6 and Table 7 if the Client requirement column contains No.\nTable 6 \u2014 Request headers\nHeader\tService requirement\tClient requirement\tSupported values\tDescription\nAccept\tYes\tNo\tRFC7231\tCommunicates to the server the media type or types that this client is prepared to accept.\n\nServices shall support resource requests with Accept header values of application/json or application/json;charset=utf-8.\n\nServices shall support XML metadata requests with Accept header values of application/xml or application/xml;charset=utf-8.\n\nServices shall support OpenAPI YAML schema requests with Accept header values of application/yaml or application/yaml;charset=utf-8 or application/vnd.oai.openapi or application/vnd.oai.openapi;charset=utf-8.\n\nServices shall support SSE requests with Accept header values of text/event-stream or text/event-stream;charset=utf-8.\n\nServices shall support any request with Accept header values of application/*, application/*;charset=utf-8, */*, or */*;charset=utf-8.\nAccept-Encoding\tNo\tNo\tRFC7231\tIndicates whether the client can handle gzip-encoded responses. If a service cannot return an acceptable response to a request with this header, it shall respond with the HTTP 406 Not Acceptable status code. If the request omits this header, the service should not return gzip-encoded responses.\nAccept-Language\tNo\tNo\tRFC7231\tThe languages that the client accepts in the response. If the request omits this header, uses the service's default language for the response.\nAuthorization\tConditional\tConditional\tRFC7617, RFC6749\tRequired for HTTP Basic authentication and OAuth 2.0.\n\nA client can access", "doc_id": "81197b5c-0389-4564-941f-75878a05318d", "embedding": null, "doc_hash": "ae03e4484485e7e83de1d47b8fd30ea81b253109c40091104f9f39cde4d7911b", "extra_info": null, "node_info": {"start": 50381, "end": 54270, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "9e76414a-8833-4cd1-979e-378efe19320c", "3": "08192867-2750-406d-bed6-d517519b4896"}}, "__type__": "1"}, "08192867-2750-406d-bed6-d517519b4896": {"__data__": {"text": "for HTTP Basic authentication and OAuth 2.0.\n\nA client can access unsecured resources without this header on systems that support Basic authentication.\nContent-Length\tNo\tNo\tRFC7231\tThe size of the message body.\n\nTo indicate the size of the body, a client can use the Transfer-Encoding: chunked header.\n\nIf a service needs to use Content-Length and does not support Transfer-Encoding, it responds with the HTTP 406 Not Acceptable status code.\nContent-Type\tConditional\tConditional\tRFC7231\tThe request format. Required for operations with a request body.\n\nServices shall accept the Content-Type header set to either application/json or application/json;charset=utf-8.\n\nIt is recommended that clients use these values in requests because other values can cause an error.\nHost\tYes\tNo\tRFC7230\tEnables support of multiple origin hosts at a single IP address.\nIf-Match\tConditional\tNo\tRFC7232\tTo ensure that clients update the resource from a known state, PUT and PATCH requests for resources for which a service returns ETags shall support If-Match.\n\nWhile not required for clients, it is highly recommended for PUT and PATCH operations.\nIf-None-Match\tNo\tNo\tRFC7232\tA service only returns the resource if the current ETag of that resource does not match the ETag sent in this header.\n\nIf the ETag in this header matches the resource's current ETag, the GET operation returns the HTTP 304 Not Modified status code.\nLast-Event-ID\tNo\tNo\tHTML5 SSE\tThe event source's last id field from the SSE stream. Requests history event data.\n\nSee Server-sent events.\nMax-Forwards\tNo\tNo\tRFC7231\tLimits gateway and proxy hops.\n\nPrevents messages from remaining in the network indefinitely.\nOData-MaxVersion\tNo\tNo\t4.0\tThe maximum OData version that an OData-aware client understands.\nOData-Version\tYes\tNo\t4.0\tThe OData version.\n\nServices shall reject requests that specify an unsupported OData version.\n\nIf a service encounters an unsupported OData version, it should reject the request with the HTTP 412 Precondition Failed status code.\nOrigin\tYes\tNo\tFetch Living Standard, 3.1. Origin header\tEnables web applications to consume a Redfish service while preventing CSRF attacks.\nUser-Agent\tYes\tNo\tRFC7231\tTraces product tokens and their versions.\n\nThe header can list multiple product tokens.\nVia\tNo\tNo\tRFC7230\tDefines the network hierarchy and recognizes message loops.\n\nEach pass inserts its own Via header.\nRedfish services shall understand and be able to process the headers in Table 7 as defined by this specification if the Service requirement column contains Yes.\n\nTable 7 \u2014 Request headers part 2\nHeader\tService requirement\tClient requirement\tSupported values\tDescription\nX-Auth-Token\tYes\tConditional\tOpaque encoded octet strings\tAuthenticates user sessions.\nThe token value shall be indistinguishable from random.\nWhile services shall support this header, a client can access unsecured resources without establishing a session.\n7.2 GET (read requests)\n7.2.1 GET (read requests) overview\nThe GET operation retrieves resources from a Redfish service. Clients make a GET request to the individual resource URI. Clients may obtain the resource URI from published sources, such as the OpenAPI document, or from a resource identifier property in a previously retrieved resource response, such as the links property.\n\nThe service shall return the resource representation using one of the media types listed in the Accept header, subject to the requirements of the media types. If the Accept header is absent, the service shall return the resource's representation as application/json. Services may but are not required to support the convention of retrieving individual properties within a resource by appending a segment containing the property name to the URI of the resource.\n\nThe HTTP GET operation shall retrieve a resource without causing any side effects.\nThe service shall ignore the content of the body on a GET.\nThe GET operation shall be idempotent in the absence of outside changes to the resource.\nIf supported by the service, clients can perform a conditional GET operation by", "doc_id": "08192867-2750-406d-bed6-d517519b4896", "embedding": null, "doc_hash": "ec918eb7799dcb8999cbed556ccd17ede0ffce6960688645daa7ffaf6ec5ffbe", "extra_info": null, "node_info": {"start": 54257, "end": 58323, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "81197b5c-0389-4564-941f-75878a05318d", "3": "a7344246-a3af-42ab-aaa9-44cacdcfdc39"}}, "__type__": "1"}, "a7344246-a3af-42ab-aaa9-44cacdcfdc39": {"__data__": {"text": "resource.\nIf supported by the service, clients can perform a conditional GET operation by specifying an If-None-Match request header that contains the ETag of the resource.\n\n7.2.2 Resource collection requests\nClients retrieve a resource collection by making a GET request to the resource collection URI. The response includes the resource collection's properties and an array of its members.\n\nNo requirements are placed on implementations to return a consistent set of members when a series of requests that use paging query parameters are made over time to obtain the entire set of members. These calls can result in missed or duplicate elements if multiple GET requests use paging to retrieve the Members array instances.\n\nClients shall not make assumptions about the URIs for the members of a resource collection.\nRetrieved resource collections shall always include the count (Members@odata.count) property to specify the total number of entries in its Members array.\nRegardless of the next link (Members@odata.nextLink) property or paging, the count (Members@odata.count) property shall return the total number of resources that the Members array references.\nA subset of the members can be retrieved using client paging query parameters.\n\nA service might not be able to return all of the contents of a resource collection request in a single response body. In this case, the response can be paged by the service. If a service pages a response to a resource collection request, the following rules shall apply:\n\nResponses can contain a subset of the full resource collection's members.\nIndividual members shall not be split across response bodies.\nA next link (Members@odata.nextLink) property annotation shall be supplied in the response body with the URI to the next set of members in the collection.\nThe next link (Members@odata.nextLink) property shall adhere to the rules in the Next link property clause.\nGET operations on the next link (Members@odata.nextLink) property shall return the subsequent section of the resource collection response.\n7.2.3 Service root request\nThe root URL for Redfish version 1.x services shall be /redfish/v1/.\n\nThe service returns the ServiceRoot resource, as defined by this specification, as a response for the root URL.\n\nServices shall not require authentication to retrieve the service root and /redfish resources.\n\n7.2.4 OData service and metadata document requests\nRedfish services expose two OData-defined documents at specific URIs to enable generic OData clients to navigate the Redfish service.\n\nService shall expose an OData metadata document at the /redfish/v1/$metadata URI.\nService shall expose an OData service document at the /redfish/v1/odata URI.\nService shall not require authentication to retrieve the OData metadata document or the OData service document.\n7.3 Query parameters\n7.3.1 Query parameter overview\nTo paginate, retrieve subsets of resources, or expand the results in a single response, clients can include the query parameters. Some query parameters apply only to resource collections.\n\nServices:\n\nShall only support query parameters on GET operations.\nShould support the $top, $skip, only, and excerpt query parameters.\nMay support the $expand, $filter, and $select query parameters.\nShall include the ProtocolFeaturesSupported object in the service root, if the service supports query parameters.\nThis object indicates which parameters and options have been implemented.\nShall ignore unknown or unsupported query parameters that do not begin with $.\nShall use the & operator to separate multiple query parameters in a single request.\nShould ignore the = character if provided as the last character for the only or excerpt query parameters.\nServices shall return:\n\nThe HTTP 501 Not Implemented status code for any unsupported query parameters that start with $.\nAn extended error that indicates the unsupported query parameters for this resource.\nThe HTTP 400 Bad Request status code for any query parameters that contain values that are invalid, or values applied to query parameters without defined values, such as excerpt or only.\nServices should return:\n\nThe HTTP 400 Bad Request status code with the QueryNotSupportedOnResource message from the Base Message Registry for any implemented query parameters that are not supported on a resource in the request.\nThe HTTP 400 Bad Request status code with the QueryNotSupportedOnResource message from the", "doc_id": "a7344246-a3af-42ab-aaa9-44cacdcfdc39", "embedding": null, "doc_hash": "e45b3e6f1ab47acb4b487689400ab63ed1c3a7401da4d13f2e93545a712920f9", "extra_info": null, "node_info": {"start": 58303, "end": 62726, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "08192867-2750-406d-bed6-d517519b4896", "3": "f1f00229-0c5f-4cd2-ac15-6796e7b2b029"}}, "__type__": "1"}, "f1f00229-0c5f-4cd2-ac15-6796e7b2b029": {"__data__": {"text": "request.\nThe HTTP 400 Bad Request status code with the QueryNotSupportedOnResource message from the Base Message Registry for any supported query parameters that apply only to resource collections but are used on singular resources. This includes query parameters such as $filter, $top, $skip, and only.\nThe HTTP 400 Bad Request status code with the QueryNotSupportedOnOperation message from the Base Message Registry for any supported query parameters on operations other than GET.\nServices shall process query parameters in this order:\n\n$filter\n$skip\n$top\nApply server-side pagination\n$expand\nexcerpt\n$select\nTable 8 describes the query parameters:\n\nTable 8 \u2014 Query parameters\nQuery parameter\tDescription and example\nexcerpt\tReturns a subset of the resource's properties that match the defined Excerpt schema annotation.\n\nIf no Excerpt schema annotation is defined for the resource, the entire resource is returned.\n\nExample:\n\nhttps://resource?excerpt\n$expand=<string>\tReturns a hyperlink and its contents in-line with retrieved resources, as if a GET call response was included in-line with that hyperlink.\n\nSee The $expand query parameter.\n\nExample:\n\nhttps://resource?$expand=*($levels=3)\n\nhttps://resourcecollection?$expand=.($levels=1)\n$filter=<string>\tApplies to resource collections. Returns a subset of collection members that match the $filter expression.\n\nSee The $filter query parameter.\n\nExample:\n\nhttps://resourcecollection?$filter=SystemType eq 'Physical'\nonly\tApplies to resource collections. If the target resource collection contains exactly one member, clients can use this query parameter to return that member's resource.\n\nIf the collection contains either zero members or more than one member, the response returns the resource collection, as expected.\n\nServices should return the HTTP 400 Bad Request with the QueryCombinationInvalid message from the Base Message Registry if only is being combined with other query parameters.\n\nExample:\n\nhttps://resourcecollection?only\n$select=<string>\tReturns a subset of the resource's properties that match the $select expression.\n\nSee The $select query parameter.\n\nExample:\n\nhttps://resource?$select=SystemType,Status\n$skip=<integer>\tApplies to resource collections. Returns a subset of the members in a resource collection, or an empty set of members if the $skip value is greater than or equal to the member count. This paging query parameter defines the number of members in the resource collection to skip.\n\nExample:\n\nhttps://resourcecollection?$skip=5\n$top=<integer>\tApplies to resource collections. Defines the number of members to show in the response.\n\nMinimum value is 0, though a value of 0 returns an empty set of members.\n\nExample:\n\nhttps://resourcecollection?$top=30\nServices may support OEM-defined query parameters. OEM-defined query parameter names shall not contain characters that conflict with syntax for query parameter parsing, such as &. OEM-defined query parameters shall be in the form:\n\nOEM-<OemIdentifier>-<ParameterName>\n\nwhere\n\n<OemIdentifier> is the unique identifier of the OEM, including possible subdivisioning, that follows the same naming as defined in the OEM-specified object naming clause. Separator underscores (_) may be excluded for improved readability.\n<ParameterName> is the parameter name.\nFor example, if Contoso defined a StatusOnly parameter, the query parameter would be OEM-Contoso-StatusOnly.\n\n7.3.2 The $expand query parameter\nThe $expand query parameter enables a client to request a response that includes not only the requested resource, but also includes the contents of the subordinate or hyperlinked resources. The definition of this query parameter follows the OData Protocol Specification.\n\nThe $expand query parameter has a set of possible options that determine which hyperlinks in a resource are included in the expanded response. Some resources may already be expanded due to the resource's schema annotation AutoExpand, such as the Temperature object in the Thermal resource.\n\nTable 9 describes the Redfish-supported options for the $expand query parameter. The service may implement", "doc_id": "f1f00229-0c5f-4cd2-ac15-6796e7b2b029", "embedding": null, "doc_hash": "6fe4f9719e54720d67b999ebcc4a60e58d68027c7719965737fc3cc238ec92c6", "extra_info": null, "node_info": {"start": 62717, "end": 66826, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "a7344246-a3af-42ab-aaa9-44cacdcfdc39", "3": "19d94f00-f0dc-42de-9c49-87f4eab344e4"}}, "__type__": "1"}, "19d94f00-f0dc-42de-9c49-87f4eab344e4": {"__data__": {"text": "the Redfish-supported options for the $expand query parameter. The service may implement some of these options but not others. Any other supported syntax for $expand is outside the scope of this specification.\n\nTable 9 \u2014 The $expand query parameter options\nOption\tDescription\tExample\nasterisk (*)\tShall expand all hyperlinks, including those in payload annotations, such as @Redfish.Settings, @Redfish.ActionInfo, and @Redfish.CollectionCapabilities.\thttps://resource?$expand=*\n$levels\tNumber of levels the service should cascade the $expand operation.\n\nThe default level shall be 1.\n\nFor example, $levels=2 expands both the hyperlinks in the current resource (level 1), and the hyperlinks in the resulting expanded resources (level 2).\thttps://resourcecollection?$expand=.($levels=2)\nperiod (.)\tShall expand all hyperlinks not in any links property instances of the resource, including those in payload annotations, such as @Redfish.Settings, @Redfish.ActionInfo, and @Redfish.CollectionCapabilities.\thttps://resourcecollection?$expand=.\ntilde (~)\tShall expand all hyperlinks found in all links property instances of the resource.\thttps://resourcecollection?$expand=~\nExamples of $expand usage include:\n\nGET of a SoftwareInventoryCollection.\n\nWith $expand, the client can request multiple SoftwareInventory collection member resources in one request rather than fetching them one at a time.\n\nGET of a ComputerSystem.\n\nWith $levels, a single GET request can include the subordinate resource collections, such as Processors and Memory.\n\nGET all UUIDs in members of the ComputerSystem collection.\n\nTo accomplish this result, include both $select and $expand on the URI.\n\nThe syntax is GET /redfish/v1/Systems?$select=UUID&$expand=.($levels=1)\n\nWhen services execute $expand, they may omit some of the referenced resource's properties.\n\nWhen clients use $expand, they should be aware that the payload may increase beyond what can be sent in a single response.\n\nIf a service cannot return the payload due to its size, it shall return the HTTP 507 Insufficient Storage status code.\n\nIf a service cannot return the payload corresponding to an individual member of a resource collection, it should return the @odata.id property for that member and should return extended information indicating the reason that member was not returned, such as when a provider internal to the service returns an error or times out.\n\nThe following example expands the RoleCollection resource with the level set to 1:\n\n{\n   \"@odata.id\": \"/redfish/v1/AccountService/Roles\",\n   \"@odata.type\": \"#RoleCollection.RoleCollection\",\n   \"Name\": \"Roles Collection\",\n   \"Members@odata.count\": 3,\n   \"Members\": [{\n      \"@odata.id\": \"/redfish/v1/AccountService/Roles/Administrator\",\n      \"@odata.type\": \"#Role.v1_1_0.Role\",\n      \"Id\": \"Administrator\",\n      \"Name\": \"User Role\",\n      \"Description\": \"Admin User Role\",\n      \"IsPredefined\": true,\n      \"AssignedPrivileges\": [\"Login\", \"ConfigureManager\",\n         \"ConfigureUsers\", \"ConfigureSelf\", \"ConfigureComponents\"]\n   }, {\n      \"@odata.id\": \"/redfish/v1/AccountService/Roles/Operator\",\n      \"@odata.type\": \"#Role.v1_1_0.Role\",\n      \"Id\": \"Operator\",\n      \"Name\": \"User Role\",\n      \"Description\": \"Operator User Role\",\n      \"IsPredefined\": true,\n      \"AssignedPrivileges\": [\"Login\", \"ConfigureSelf\",\n         \"ConfigureComponents\"]\n   }, {\n    ", "doc_id": "19d94f00-f0dc-42de-9c49-87f4eab344e4", "embedding": null, "doc_hash": "51c749d058bf94437e5f62318cc06d777bcf1a573a23acd113cf62389cf68e07", "extra_info": null, "node_info": {"start": 66837, "end": 70207, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "f1f00229-0c5f-4cd2-ac15-6796e7b2b029", "3": "cc1f20cc-aba2-4120-9ad8-1152139f0fff"}}, "__type__": "1"}, "cc1f20cc-aba2-4120-9ad8-1152139f0fff": {"__data__": {"text": "    \"ConfigureComponents\"]\n   }, {\n      \"@odata.id\": \"/redfish/v1/AccountService/Roles/ReadOnly\",\n      \"@odata.type\": \"#Role.v1_1_0.Role\",\n      \"Id\": \"ReadOnly\",\n      \"Name\": \"User Role\",\n      \"Description\": \"ReadOnly User Role\",\n      \"IsPredefined\": true,\n      \"AssignedPrivileges\": [\"Login\", \"ConfigureSelf\"]\n   }]\n}\n7.3.3 The $select query parameter\nThe $select query parameter indicates that the implementation should return a subset of the resource's properties that match the $select expression. If a request omits the $select query parameter, the response returns all properties by default. The definition of this query parameter follows the OData Protocol Specification.\n\nThe $select expression shall not affect the resource itself.\n\nThe $select expression defines a comma-separated list of properties to return in the response body.\n\nThe syntax for properties in objects or properties in arrays of objects shall be the object and property names concatenated with a slash (/). For arrays, the expression shall not contain the array index.\n\nAn example of $select usage is:\n\nGET /redfish/v1/Systems/1?$select=Name,SystemType,Status/State\nFor successful responses, when services execute $select, they shall return all requested properties of the referenced resource that are supported. Services shall omit unsupported properties requested in the $select query parameter from the response. If a requested property is an object, the service shall return the entire object. The @odata.id and @odata.type properties shall be in the response payload and contain the same values as if $select was omitted. If the @odata.context property is supported, it shall be in the response payload and should be in the context property recommended format. If the @odata.etag property is supported, it shall be in the response payload and contain the same values as if $select was omitted. Services may include object-level messages or messages for requested properties in the response payload.\n\nFor unsuccessful responses, the response body shall contain an error response regardless of the properties requested in the $select query parameter.\n\nAny other supported syntax for $select is outside the scope of this specification.\n\n7.3.4 The $filter query parameter\nThe $filter parameter enables a client to request a subset of the resource collection's members based on the $filter expression. The definition of this query parameter follows the OData Protocol Specification.\n\nThe $filter query parameter defines a set of properties and literals with an operator.\n\nA literal value can be:\n\nA string enclosed in single quotes.\nA number.\nA boolean value.\nIf the literal value does not match the data type for the specified property, the service should reject $filter requests with the HTTP 400 Bad Request status code.\n\nThe $filter section of the OData ABNF Components Specification contains the grammar for the allowable syntax of the $filter query parameter, with the additional restriction that only built-in filter operations are supported.\n\nTable 10 lists the Redfish-supported values for the $filter query parameter. Any other supported syntax for $filter is outside the scope of this specification.\n\nTable 10 \u2014 The $filter query parameter options\nValue\tDescription\tExample\n()\tPrecedence grouping operator.\t(Status/State eq 'Enabled' and Status/Health eq 'OK') or SystemType eq 'Physical'\nand\tLogical and operator.\tProcessorSummary/Count eq 2 and MemorySummary/TotalSystemMemoryGiB gt 64\neq\tEqual comparison operator.\tProcessorSummary/Count eq 2\nge\tGreater than or equal to comparison operator.\tProcessorSummary/Count ge 2\ngt\tGreat than comparison operator.\tProcessorSummary/Count gt 2\nle\tLess than or equal to comparison operator.\tMemorySummary/TotalSystemMemoryGiB le 64\nlt\tLess than comparison operator.\tMemorySummary/TotalSystemMemoryGiB lt 64\nne\tNot equal comparison operator.\tSystemType ne", "doc_id": "cc1f20cc-aba2-4120-9ad8-1152139f0fff", "embedding": null, "doc_hash": "e99f430c427373b6961f9b607752189b4bf876b14a220a56e466ccdee898438f", "extra_info": null, "node_info": {"start": 70258, "end": 74149, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "19d94f00-f0dc-42de-9c49-87f4eab344e4", "3": "4629f306-f3d7-4359-8edc-2ca3296c2b0a"}}, "__type__": "1"}, "4629f306-f3d7-4359-8edc-2ca3296c2b0a": {"__data__": {"text": "lt 64\nne\tNot equal comparison operator.\tSystemType ne 'Physical'\nnot\tLogical negation operator.\tnot (ProcessorSummary/Count eq 2)\nor\tLogical or operator.\tProcessorSummary/Count eq 2 or ProcessorSummary/Count eq 4\nWhen evaluating expressions, services shall use the following operator precedence:\n\nGrouping\nLogical negation\nRelational comparison. gt, ge, lt, and le all have equal precedence.\nEquality comparison. eq and ne both have equal precedence.\nLogical and\nLogical or\nIf the service receives an unsupported $filter query parameter, it shall reject the request and return the HTTP 501 Not Implemented status code.\n\n7.4 HEAD\nThe HEAD method differs from the GET method in that it shall not return message body information.\n\nHowever, the HEAD method completes the same authorization checks and returns all the same meta information and status codes in the HTTP headers as a GET method.\n\nServices may support the HEAD method to:\n\nReturn meta information in the form of HTTP response headers.\nVerify hyperlink validity.\nServices may support the HEAD method to verify resource accessibility.\n\nServices shall not support any other use of the HEAD method.\n\nThe HEAD method shall be idempotent in the absence of outside changes to the resource.\n\nServices shall reject HEAD requests that contain query parameters. Services should return the HTTP 400 Bad Request status code if provided with a query parameter in a HEAD request.\n\n7.5 Data modification requests\n7.5.1 Data modification requests overview\nTo create, modify, and delete resources, clients issue the following operations:\n\nPOST (create)\nPATCH (update)\nPUT (replace)\nDELETE (delete)\nPOST (action) on the resource\nThe following clauses describe the success and error response requirements common to all data modification requests.\n\n7.5.2 Modification success responses\nFor POST (create) operations, the response from the service, after the create request succeeds, should be one of these responses:\n\nThe HTTP 201 Created status code. If a response body is provided, it contains the JSON representation of the newly created resource after the request has been applied.\nThe HTTP 202 Accepted status code with a Location header set to the URI of a task monitor when the processing of the request requires additional time to be completed.\nAfter processing of the task is complete, the created resource may be returned in response to a request to the task monitor URI with the HTTP 201 Created status code.\nThe HTTP 204 No Content status code with no response body.\nFor PATCH (update), PUT (replace), and DELETE (delete) operations, the response from the service, after successful modification, should be one of the following responses:\n\nThe HTTP 200 OK status code with a body that contains the JSON representation of the targeted resource after the modification has been applied, or, for the delete operation, a representation of the deleted resource.\nThe HTTP 202 Accepted status code with a Location header set to the URI of a task monitor when the processing of the modification requires additional time.\nAfter processing of the task is complete, the modified resource may be returned in response to a request to the task monitor URI with the HTTP 200 OK status code.\nThe HTTP 204 No Content status code with no response body.\nFor details on successful responses to action requests, see POST (action).\n\n7.5.3 Modification error responses\nIf the resource exists but does not support the requested operation, services shall return the HTTP 405 Method Not Allowed status code.\n\nOtherwise, if the service returns a client 4XX or service 5XX status code, the service encountered an error and the resource shall not have been modified or created as a result of the operation.\n\n7.6 PATCH (update)\nTo update a resource's properties, the service shall support the PATCH method.\n\nThe request body defines the changes to make to one or more properties in the resource that the request URI references. The PATCH request does not change any properties that are not in the request body. Services may accept a PATCH method with an empty JSON object, which indicates that the service should make no changes to the resource.\n\nFor resources that allow for properties to not be updated immediately, clients can perform PATCH requests to a designated settings resource. For more information, see the Settings resource", "doc_id": "4629f306-f3d7-4359-8edc-2ca3296c2b0a", "embedding": null, "doc_hash": "88efab95f247c7212e57474b1c1f5a688aa22a00d0f449496d5d34baee8727ec", "extra_info": null, "node_info": {"start": 74129, "end": 78481, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "cc1f20cc-aba2-4120-9ad8-1152139f0fff", "3": "6704b004-142e-4d47-9e1e-8ebd457b46b7"}}, "__type__": "1"}, "6704b004-142e-4d47-9e1e-8ebd457b46b7": {"__data__": {"text": "PATCH requests to a designated settings resource. For more information, see the Settings resource clause.\n\nSee the Modification success responses clause for behavior when the PATCH operation is successful.\n\nIf supported by the service, clients can perform a conditional PATCH operation by specifying an If-Match or If-None-Match request header that contains the ETag of the resource.\n\nThe implementation may reject the update on certain properties based on its own policies and, in this case, not make the requested update.\n\nA partial success of a PATCH operation occurs when a modification request for multiple properties results in at least one property updated successfully, but one or more properties could not be updated. In these cases, the service shall return the HTTP 200 OK status code and a resource representation with extended information that lists the properties that could not be updated. Examples include:\n\nA property is read-only, unknown, or unsupported.\nA service-side error occurred, such as a write failure for an EEPROM.\nIf all properties in the update request are read-only, unknown, or unsupported, but the resource can be updated, the service shall return the HTTP 400 Bad Request status code and an error response with messages that show the non-updatable properties.\n\nThe service shall ignore OData annotations in the request body, such as the resource identifier, type, and ETag properties, except for the conditions listed below. If the update request only contains OData annotations, the service should return the HTTP 400 Bad Request status code with the NoOperation message from the Base Message Registry, except for the conditions listed below.\n\nWritable reference properties.\nIn deep operations when specifying subordinate resources.\nIn the absence of outside changes to the resource, the PATCH operation should be idempotent, although the original ETag value may no longer match.\n\n7.7 PATCH on array properties\nThe Array properties clause describes the three styles of array properties in a resource.\n\nWithin a PATCH request, the service shall accept null to remove an element, and accept an empty object {} to leave an element unchanged. Array properties that use the fixed or variable length style remove those elements, while array properties that use the rigid style replace removed elements with null elements. A service may indicate the maximum size of an array by padding null elements at the end of the array sequence.\n\nWhen processing a PATCH request, the order of operations shall be:\n\nModifications\nDeletions\nAdditions\nA PATCH request with fewer elements than in the current array shall remove the remaining elements of the array.\n\nFor example, a fixed length-style Flavors array indicates that the service supports a maximum of six elements, by padding the array with null elements, with four populated.\n\n{\n   \"Flavors\": [\"Chocolate\", \"Vanilla\", \"Mango\", \"Strawberry\", null, null]\n}\nA client could issue the following PATCH request to remove Vanilla, replace Strawberry with Cherry, and add Coffee and Banana to the array, while leaving the other elements unchanged.\n\n{\n   \"Flavors\": [{}, null, {}, \"Cherry\", \"Coffee\", \"Banana\"]\n}\nAfter the PATCH operation, the resulting array is:\n\n{\n   \"Flavors\": [\"Chocolate\", \"Mango\", \"Cherry\", \"Coffee\", \"Banana\", null]\n}\n7.8 PUT (replace)\nTo completely replace a resource, services may support the PUT method. The service may add properties to the response resource that the client omits from the request body, the resource definition requires, or the service normally supplies.\n\nThe PUT operation should be idempotent in the absence of outside changes to the resource, with the possible exception that the operation might change ETag values.\n\nSee the Modification success responses clause for behavior when the PUT operation is successful.\n\nIf supported by the service, clients can perform a conditional PUT operation by specifying an If-Match or If-None-Match request header that contains the ETag of the resource.\n\nServices may reject requests that do not include properties that the resource definition (schema) requires.\n\n7.9 POST (create)\nTo create a resource, services shall support the POST method on resource collections.\n\nThe POST request is submitted to the resource collection to which the new resource will belong. See the Modification success", "doc_id": "6704b004-142e-4d47-9e1e-8ebd457b46b7", "embedding": null, "doc_hash": "d733092417fa3eb4480120935dbf5a46113abcefbff177e7c3c78e878d6aecac", "extra_info": null, "node_info": {"start": 78446, "end": 82789, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "4629f306-f3d7-4359-8edc-2ca3296c2b0a", "3": "80272e76-de5c-4685-b057-0ae4f57ea92e"}}, "__type__": "1"}, "80272e76-de5c-4685-b057-0ae4f57ea92e": {"__data__": {"text": "submitted to the resource collection to which the new resource will belong. See the Modification success responses clause for behavior when the POST operation is successful.\n\nThe body of the create request contains a representation of the object to create. The service may ignore any service-controlled properties, such as Id, which would force the service to overwrite those properties. Additionally, the service shall set the Location header in the response to the URI of the new resource.\n\nSubmitting a POST request to a resource collection is equivalent to submitting the same request to the Members property of that resource collection. Services that support the addition of Members to a resource collection shall support both forms.\nFor example, if a client adds a member to the resource collection at /redfish/v1/EventService/Subscriptions, it can perform a POST request to either /redfish/v1/EventService/Subscriptions or /redfish/v1/EventService/Subscriptions/Members.\nThe POST operation shall not be idempotent.\nServices may allow the inclusion of the @Redfish.OperationApplyTime property in the request body. See Operation apply time.\nServices should return the HTTP 400 Bad Request status code for requests containing properties with the value null.\n7.10 DELETE (delete)\nTo remove a resource, the service shall support the DELETE method. Resources subordinate to the resource removed by a DELETE method are typically removed, as the contents of subordinate resources are dependent on the parent resource. In some cases, related resources may also be relocated in the resource tree based on their definition and usage. Other resources in the resource tree may also be removed or incur side effects of a resource removal.\n\nSee the Modification success responses clause for behavior when the DELETE operation is successful.\n\nIf the resource was already deleted, the service may return the HTTP 404 Not Found status code or a success code.\nThe service may allow the inclusion of the @Redfish.OperationApplyTime property in the request body. See Operation apply time.\n7.11 POST (action)\nServices shall support the POST method as a way for clients to send actions to resources.\n\nThe POST operation may not be idempotent.\nServices may allow the inclusion of the @Redfish.OperationApplyTime property in the request body. See Operation apply time.\nTo request actions on a resource, send the HTTP POST method to the URI of the action. The target property in the resource's Actions property shall contain the URI of the action. The URI of the action shall be in the format:\n\n<ResourceUri>/Actions/<QualifiedActionName>\n\nwhere\n\n<ResourceUri> is the URI of the resource that supports the action.\nActions is the name of the property that contains the actions for a resource, as defined by this specification.\n<QualifiedActionName> is the qualified name of the action. Includes the resource type.\nTo determine the available actions and the valid parameter values for those actions, clients can query a resource directly.\n\nClients provide parameters for the action as a JSON object within the request body of the POST operation. For information about the structure of the request and required parameters, see the Actions property clause. Some parameter information may require that the client examine the Redfish schema that corresponds to the resource.\n\nIf the action request does not contain all required parameters, the service shall return the HTTP 400 Bad Request status code. If the action request contains unsupported parameters, the service shall ignore the unsupported parameters or return the HTTP 400 Bad Request status code. If an action does not have any required parameters, the service should accept an empty JSON object in the HTTP body for the action request.\n\nTable 11 describes the HTTP status codes and additional information that the service shall return a response to a successful POST (action) request:\n\nTable 11 \u2014 POST (action) status codes\nTo indicate\tHTTP status code\tAdditional information\nSuccess, and the action's schema definition does not contain an action response.\t200 OK\tAn error response, with a message that indicates success or any additional relevant messages. If the action was successfully processed and completed without errors, warnings, or other notifications for the client, the service should return the Success message from the Base Message Registry in the code property in the response body.\nSuccess, and the action's schema definition contains an action response.\t200 OK\tThe response body conforms to the action response defined in the schema.\nA new resource was created, and the action's schema definition does not", "doc_id": "80272e76-de5c-4685-b057-0ae4f57ea92e", "embedding": null, "doc_hash": "d6ccccbcd99c848d9eb91c18bbe7e83bba422c5223e027732a2ca5c57d97e2b1", "extra_info": null, "node_info": {"start": 82785, "end": 87444, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "6704b004-142e-4d47-9e1e-8ebd457b46b7", "3": "5bcff6cd-681f-47ac-8b2b-e6cfbbbac474"}}, "__type__": "1"}, "5bcff6cd-681f-47ac-8b2b-e6cfbbbac474": {"__data__": {"text": "the schema.\nA new resource was created, and the action's schema definition does not contain an action response.\t201 Created\tA Location response header set to the URI of the created resource. An error response, with a message that indicates success or any additional relevant messages. If the action was successfully processed and completed without errors, warnings, or other notifications for the client, the service should return the Success message or Created message from the Base Message Registry in the code property in the response body.\nA new resource was created, and the action's schema definition contains an action response.\t201 Created\tA Location response header set to the URI of the created resource. The response body conforms to the action response defined in the schema.\nAdditional time is required to process.\t202 Accepted\tA Location response header set to the URI of a task monitor.\nSuccess, and the action's schema definition does not contain an action response.\t204 No Content\tNo response body.\nIf an action requested by the client has no effect, such as a reset of a ComputerSystem where the ResetType parameter is set to On and the ComputerSystem is already On, the service should respond with the HTTP 200 OK status code and return the NoOperation message from the Base Message Registry.\n\nIf an error was detected and the action request was not processed, the service shall return an HTTP 4XX or HTTP 5XX status code. The response body, if provided, shall contain an error response that describes the error or errors.\n\nExample successful action response:\n\n{\n   \"error\": {\n      \"code\": \"Base.1.8.Success\",\n      \"message\": \"Successfully Completed Request\",\n      \"@Message.ExtendedInfo\": [{\n         \"@odata.type\": \"#Message.v1_1_1.Message\",\n         \"MessageId\": \"Base.1.8.Success\",\n         \"Message\": \"Successfully Completed Request\",\n         \"Severity\": \"OK\",\n         \"MessageSeverity\": \"OK\",\n         \"Resolution\": \"None\"\n      }]\n   }\n}\n7.12 Operation apply time\nServices may accept the @Redfish.OperationApplyTime annotation in the following request bodies:\n\nPOST (create)\nDELETE (delete)\nPOST (action)\nThe JSON part for multipart HTTP POST operations, such as with the multipart HTTP push update in the update service.\nThis annotation enables the client to control when an operation is carried out.\n\nFor example, if the client wants to delete a particular Volume resource, but can only safely do so when a reset occurs, the client can use this annotation to instruct the service to delete the Volume on the next reset.\n\nIf multiple operations are pending, the service shall process them in the order in which the service receives them.\n\nServices that support the @Redfish.OperationApplyTime annotation for create operations on a resource collection and delete operations on members of a resource collection shall include the @Redfish.OperationApplyTimeSupport response annotation for the resource collection.\n\nThe following example is a response for a resource collection that supports the @Redfish.OperationApplyTime annotation in requests to create new members and delete existing members:\n\n{\n   \"@odata.id\": \"/redfish/v1/Systems/1/Storage/SATAEmbedded/Volumes\",\n   \"@odata.type\": \"#VolumeCollection.VolumeCollection\",\n   \"Name\": \"Storage Volume Collection\",\n   \"Description\": \"Storage Volume Collection\",\n   \"Members@odata.count\": 2,\n   \"Members\": [{\n      \"@odata.id\": \"/redfish/v1/Systems/1/Storage/SATAEmbedded/Volumes/1\"\n   }, {\n      \"@odata.id\": \"/redfish/v1/Systems/1/Storage/SATAEmbedded/Volumes/2\"\n   }],\n   \"@Redfish.OperationApplyTimeSupport\": {\n      \"@odata.type\": \"#Settings.v1_3_3.OperationApplyTimeSupport\",\n ", "doc_id": "5bcff6cd-681f-47ac-8b2b-e6cfbbbac474", "embedding": null, "doc_hash": "a772b0350b538e86ee5c952bb73d4757c78d193bb9021cd72eaed764a71fa65f", "extra_info": null, "node_info": {"start": 87463, "end": 91125, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "80272e76-de5c-4685-b057-0ae4f57ea92e", "3": "78f19769-ac28-41c3-be95-79af18d37a4c"}}, "__type__": "1"}, "78f19769-ac28-41c3-be95-79af18d37a4c": {"__data__": {"text": "\"#Settings.v1_3_3.OperationApplyTimeSupport\",\n      \"SupportedValues\": [\"Immediate\", \"OnReset\"]\n   }\n}\nIn the previous example, a client can annotate their create request body on the VolumeCollection itself, or a delete operation on the Volumes within the VolumeCollection.\n\nThe following sample request deletes a Volume on the next reset:\n\nDELETE /redfish/v1/Systems/1/Storage/SATAEmbedded/Volumes/2 HTTP/1.1\nContent-Type: application/json;charset=utf-8\nContent-Length: <computed length>\nOData-Version: 4.0\n\n{\n   \"@Redfish.OperationApplyTime\": \"OnReset\"\n}\nServices that support the @Redfish.OperationApplyTime annotation for an action shall include the @Redfish.OperationApplyTimeSupport response annotation for the action.\n\nThe following example is a response for a ComputerSystem resource that supports the @Redfish.OperationApplyTime annotation in the reset action request:\n\n{\n   \"@odata.id\": \"/redfish/v1/Systems/1\",\n   \"@odata.type\": \"#ComputerSystem.v1_5_0.ComputerSystem\",\n   \"Actions\": {\n      \"#ComputerSystem.Reset\": {\n         \"target\": \"/redfish/v1/Systems/1/Actions/ComputerSystem.Reset\",\n         \"ResetType@Redfish.AllowableValues\": [\"On\", \"ForceOff\", \"ForceRestart\",\n            \"Nmi\", \"ForceOn\", \"PushPowerButton\"],\n         \"@Redfish.OperationApplyTimeSupport\": {\n            \"@odata.type\": \"#Settings.v1_3_3.OperationApplyTimeSupport\",\n            \"SupportedValues\": [\"Immediate\", \"AtMaintenanceWindowStart\"],\n            \"MaintenanceWindowStartTime\": \"2017-05-03T23:12:37-05:00\",\n            \"MaintenanceWindowDurationInSeconds\": 600,\n            \"MaintenanceWindowResource\": {\n               \"@odata.id\": \"/redfish/v1/Systems/1\"\n            }\n         }\n      }\n   },\n   ...\n}\nIn the previous example, a client can annotate their reset action request body on the ComputerSystem in the payload.\n\nThe following sample request completes a reset at the start of the next maintenance window:\n\nPOST /redfish/v1/Systems/1/Actions/ComputerSystem.Reset HTTP/1.1\nContent-Type: application/json;charset=utf-8\nContent-Length: <computed length>\nOData-Version: 4.0\n\n{\n   \"ResetType\": \"ForceRestart\",\n   \"@Redfish.OperationApplyTime\": \"AtMaintenanceWindowStart\"\n}\nServices that support the @Redfish.OperationApplyTime annotation for the JSON part of a multipart HTTP POST operation shall include the @Redfish.OperationApplyTimeSupport response annotation for the property that specifies the URI of the multipart POST operation.\n\nThe following example is a response for an UpdateService resource that supports the @Redfish.OperationApplyTime annotation in the JSON part of a multipart request:\n\n{\n   \"@odata.id\": \"/redfish/v1/UpdateService\",\n   \"@odata.type\": \"#UpdateService.v1_8_0.UpdateService\",\n   \"MultipartHttpPushUri\": \"/redfish/v1/UpdateService/update-multipart\",\n   \"MultipartHttpPushUri@Redfish.OperationApplyTimeSupport\": {\n      \"@odata.type\": \"#Settings.v1_3_3.OperationApplyTimeSupport\",\n ", "doc_id": "78f19769-ac28-41c3-be95-79af18d37a4c", "embedding": null, "doc_hash": "a5adf9511c771244c835d7780b1bc654b64c7c5d300aeb2602ca9df0f93672ba", "extra_info": null, "node_info": {"start": 91151, "end": 94060, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "5bcff6cd-681f-47ac-8b2b-e6cfbbbac474", "3": "b32e99e3-afa0-4899-9f8b-5f9837db5acd"}}, "__type__": "1"}, "b32e99e3-afa0-4899-9f8b-5f9837db5acd": {"__data__": {"text": "\"#Settings.v1_3_3.OperationApplyTimeSupport\",\n      \"SupportedValues\": [\"Immediate\", \"AtMaintenanceWindowStart\"],\n      \"MaintenanceWindowStartTime\": \"2017-05-03T23:12:37-05:00\",\n      \"MaintenanceWindowDurationInSeconds\": 600,\n      \"MaintenanceWindowResource\": {\n         \"@odata.id\": \"/redfish/v1/UpdateService\"\n      }\n   },\n   ...\n}\nServices that support the @Redfish.OperationApplyTime annotation for a resource collection, action, or multipart HTTP POST operation shall create a task, and respond with the HTTP 202 Accepted status code with a Location header set to the URI of a task monitor, if the client's request body contains @Redfish.OperationApplyTime in the request.\n\nThe Settings Redfish schema defines the structure of the @Redfish.OperationApplyTimeSupport object and the @Redfish.OperationApplyTime annotation value.\n\n7.13 Deep operations\nImplementations may support operations that modify the current resource as well as subordinate resources. These operations are known as deep operations. They give the client the ability to modify more than one resource with a single operation.\n\nTable 12 describes the types of deep operations that this specification defines:\n\nTable 12 \u2014 Deep operations\nOperation\tDescription\tExample\nDeep PATCH (update)\tModify a resource and one or more subordinate resources.\tModify a ComputerSystem resource as well as subordinate Storage and NetworkInterface resources.\nDeep POST (create)\tCreate multiple resources in a resource collection.\tCreate ManagerAccount resources.\nServices that support deep PATCH for updating resources shall set the value of the DeepPATCH property in the DeepOperations property in the ProtocolFeaturesSupported property within the service root to true.\nServices that support deep POST for creating resources shall set the value of the DeepPOST property in the DeepOperations property in the ProtocolFeaturesSupported property within the service root to true.\nThe Members property in resource collections shall not be removed when using a deep PATCH.\nAction URIs shall not support deep POST operations.\nIf the service supports deep operations, the MaxLevels property in the DeepOperations property in the ProtocolFeaturesSupported property in the service root shall indicate the maximum number of levels that the service supports for deep operations.\nTo request deep operations on a resource, send the HTTP method to the deep operation URI of the resource. The URI for deep operations on any resource shall be in the format: <ResourceUri>.Deep.\nThe schema used for validating the root level of the request body shall be the schema of the resource in the resource URI.\nThe subordinate resources included in the request body shall be validated against their corresponding schema.\nThe body of deep operations contains the resource being modified as well as the subordinate resources being modified. This resource can be a collection or a single instance. These resources could be subordinate resources, subordinate resource collections, or subordinate members of resource collections. The client can omit properties from the request such as those it does not want to modify or that the service controls. Requests that include references to multiple instances, such as members of a collection, shall include the Members property as part of the request body.\n\nTo determine which members of subordinate resource collections are to be modified by a deep PATCH, services shall use the @odata.id property provided by the client to identify the member of the resource collection to be modified.\n\nClients may provide the @odata.etag property in subordinate resources being modified by a deep PATCH. If the request contains the If-Match or If-None-Match header, the service shall compare the ETag in the request header with the ETag of the resource specified by the URI. If this check passes, the operation can proceed using the @odata.etag values contained in the body of the subordinate resources. In this case, the operation on each subordinate resource shall be completed independently, where some subordinate values that pass the condition check proceed and the resources that fail do not proceed. In this case, annotated extended information shall be included in the subordinate resource representation of the response.\n\nFailure semantics for deep operations are similar to that of other operations of similar type. If any properties in a deep PATCH operation succeeded, the result", "doc_id": "b32e99e3-afa0-4899-9f8b-5f9837db5acd", "embedding": null, "doc_hash": "6d4cff3a847f639a7a96069965e4bff1cb026512e4c1256a469e4cd3da3dc74d", "extra_info": null, "node_info": {"start": 94061, "end": 98509, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "78f19769-ac28-41c3-be95-79af18d37a4c", "3": "4ce1e049-5e08-48ed-afc5-d27ce7d2cafa"}}, "__type__": "1"}, "4ce1e049-5e08-48ed-afc5-d27ce7d2cafa": {"__data__": {"text": "of similar type. If any properties in a deep PATCH operation succeeded, the result is a 200 OK with the results returned in the response, and the service should include extended information indicating warnings or errors. For a deep POST operation, if any member of the collection was created then a 201 Created shall be returned, and any members that were not created should have extended information in their place holders with sufficient identifying information, such as returning all of the properties provided in the POST request body for that member, as well as extended information indicating why the creation was not successful. When sending a deep POST request, the value of the Location header shall be that of one of the URIs created and should be that of one of the least subordinate URIs, such as that of a ComputerSystem resource and not one of the devices subordinate to the ComputerSystem resource.\n\nIf the request body for a deep operation contains resources that are not modifiable, but no modifications are requested for those resources, services shall not treat this as a modification request for those resources. For example, if the service root is not modifiable, meaning PATCH is not accepted on the resource, a client is allowed to provide the service root in the deep operation request body if there are no modifications to the service root.\n\nDeep POST shall not be allowed on the SessionCollection resource.\n\nThe following deep PATCH example modifies two members of the RoleCollection resource:\n\nPATCH /redfish/v1/AccountService/Roles.Deep HTTP/1.1\nContent-Type: application/json;charset=utf-8\nContent-Length: <computed length>\nOData-Version: 4.0\n\n{\n   \"Members\": [{\n      \"@odata.id\": \"/redfish/v1/AccountService/Roles/OperatorRestricted\",\n      \"AssignedPrivileges\": [\"Login\", \"ConfigureComponents\"]\n   }, {\n      \"@odata.id\": \"/redfish/v1/AccountService/Roles/ReadOnlyRestricted\",\n      \"AssignedPrivileges\": [\"Login\"]\n   }]\n}\nThe following deep POST example creates two members in the RoleCollection resource:\n\nPOST /redfish/v1/AccountService/Roles.Deep HTTP/1.1\nContent-Type: application/json;charset=utf-8\nContent-Length: <computed length>\nOData-Version: 4.0\n\n{\n   \"Members\": [{\n      \"RoleId\": \"OperatorRestricted\",\n      \"AssignedPrivileges\": [\"Login\", \"ConfigureComponents\"]\n   }, {\n      \"RoleId\": \"ReadOnlyRestricted\",\n      \"AssignedPrivileges\": [\"Login\"]\n   }]\n}\nThe following deep PATCH example modifies the asset tag and BIOS settings of a ComputerSystem resource:\n\nPATCH /redfish/v1/Systems/47832.Deep HTTP/1.1\nContent-Type: application/json;charset=utf-8\nContent-Length: <computed length>\nOData-Version: 4.0\n\n{\n   \"AssetTag\": \"Inventory Tag 12394783431\",\n   \"Bios\": {\n      \"@odata.id\": \"/redfish/v1/Systems/47832/Bios\",\n      \"@Redfish.Settings\": {\n         \"@odata.type\": \"#Settings.v1_3_3.Settings\",\n         \"SettingsObject\": {\n            \"@odata.id\": \"/redfish/v1/Systems/47832/Bios/SD\",\n            \"Attributes\": {\n               \"AdminPhone\": \"(123) 456-789\",\n               \"BootMode\": \"Uefi\"\n            }\n         }\n      }\n   }\n}\nThe following example shows a deep PATCH with ETags in the request:\n\nPATCH", "doc_id": "4ce1e049-5e08-48ed-afc5-d27ce7d2cafa", "embedding": null, "doc_hash": "15fd5d96a9fa3ef52fbe30c9c0162a70f77d64081c035173e1f3f42f86cacd90", "extra_info": null, "node_info": {"start": 98487, "end": 101645, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "b32e99e3-afa0-4899-9f8b-5f9837db5acd", "3": "45d9a296-ae06-4d0a-874a-59956d559999"}}, "__type__": "1"}, "45d9a296-ae06-4d0a-874a-59956d559999": {"__data__": {"text": "following example shows a deep PATCH with ETags in the request:\n\nPATCH /redfish/v1/AccountService/Roles.Deep HTTP/1.1\nContent-Type: application/json;charset=utf-8\nContent-Length: <computed length>\nIf-Match: <Collection ETag>\nOData-Version: 4.0\n\n{\n   \"Members\": [{\n      \"@odata.id\": \"/redfish/v1/AccountService/Roles/OperatorRestricted\",\n      \"@odata.etag\": \"W/\\\"ABCDEFG\\\"\",\n      \"AssignedPrivileges\": [\"Login\", \"ConfigureComponents\"]\n   }, {\n      \"@odata.id\": \"/redfish/v1/AccountService/Roles/ReadOnlyRestricted\",\n      \"@odata.etag\": \"W/\\\"ABCDEFG\\\"\",\n      \"AssignedPrivileges\": [\"Login\"]\n   }]\n}\nThe following example response shows a partial failure of a deep PATCH where the ETag provided in the request for the Role resource named ReadOnlyRestricted was incorrect:\n\nHTTP/1.1 200 OK\nContent-Type: application/json;charset=utf-8\nContent-Length: <computed length>\nETag: <Resource collection ETag>\nOData-Version: 4.0\n\n{\n   \"Members\": [{\n      \"@odata.id\": \"/redfish/v1/AccountService/Roles/OperatorRestricted\",\n      \"@odata.etag\": \"W/\\\"ABCDEFG\\\"\",\n      \"AssignedPrivileges\": [\"Login\", \"ConfigureComponents\"]\n   }, {\n      \"@odata.id\": \"/redfish/v1/AccountService/Roles/ReadOnlyRestricted\",\n      \"@Message.ExtendedInfo\": [{\n         \"@odata.type\": \"#Message.v1_1_1.Message\",\n         \"MessageId\": \"Base.1.8.PreconditionFailed\",\n         \"RelatedProperties\": [\"/AssignedPrivileges\"]\n      }]\n   }]\n}\n8 Service responses\nThis clause describes the responses that Redfish services can return to clients.\n\n8.1 Response headers\nHTTP defines headers for use in response messages. Table 13 defines those headers and their requirements for Redfish services:\n\nRedfish services shall return the HTTP-defined headers if the Required column contains Yes.\nRedfish services should return the HTTP-defined headers if the Required column contains No.\nRedfish clients shall be able to both understand and process all the HTTP-defined headers.\nTable 13 \u2014 Response headers\nHeader\tRequired\tSupported values\tDescription\nAccess-Control-Allow-Origin\tNo\tFetch Living Standard, 3.2.3. HTTP responses\tPrevents or allows requests based on originating domain. Prevents CSRF attacks.\nAllow\tYes\tPOST, PUT, PATCH, DELETE, GET, HEAD\tShall be returned with the HTTP 405 (Method Not Allowed) status code to indicate the valid methods for the request URI. Shall be returned with any GET or HEAD operation to indicate the other allowable operations for this resource.\nCache-Control\tYes\tRFC7234\tShall be supported and indicates whether a response can or cannot be cached.\nContent-Encoding\tNo\tRFC7231\tEncoding used to compress the message body.\nContent-Length\tNo\tRFC7231\tSize of the message body. An optional means of indicating size of the body uses Transfer-Encoding: chunked, that does not use the Content-Length header. If a service does not support Transfer-Encoding and needs Content-Length instead, the service shall respond with the HTTP 411 Length Required status code.\nContent-Type\tYes\tRFC7231\tThe message body's representation type.\n\nServices shall specify a Content-Type of application/json when returning resources as JSON.\n\nServices shall specify a Content-Type of application/xml when returning metadata as XML.\n\nServices shall specify", "doc_id": "45d9a296-ae06-4d0a-874a-59956d559999", "embedding": null, "doc_hash": "e044d32a3aec3a739772dee169e4b239502f57625c329fc7696f093fdf62172c", "extra_info": null, "node_info": {"start": 101655, "end": 104874, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "4ce1e049-5e08-48ed-afc5-d27ce7d2cafa", "3": "497e6b35-70ef-4352-a6c3-68bc4dce0a95"}}, "__type__": "1"}, "497e6b35-70ef-4352-a6c3-68bc4dce0a95": {"__data__": {"text": "of application/xml when returning metadata as XML.\n\nServices shall specify a Content-Type of application/yaml or application/vnd.oai.openapi when returning OpenAPI schema as YAML.\n\nServices shall specify a Content-Type of text/event-stream when returning an SSE stream.\n\n;charset=utf-8 shall be appended to the Content-Type if specified in the chosen media-type in the Accept header for the request.\nETag\tConditional\tRFC7232\tAn identifier for a specific version of a resource, often a message digest. The ETag header shall be included on responses to GETs of ManagerAccount resources.\nLink\tYes\tRFC8288\tLink headers shall be returned, as described in the Link headers clause.\nLocation\tConditional\tRFC7231\tURI of a newly created resource. Shall be returned upon creation of a resource. Location and X-Auth-Token shall be included on responses that create user sessions.\nMax-Forwards\tNo\tRFC7231\tLimits gateway and proxy hops. Prevents messages from remaining in the network indefinitely.\nOData-Version\tYes\t4.0\tOData version of the payload to which the response conforms.\nRetry-After\tNo\tRFC7231, Section 7.1.3\tInforms a client how long to wait before requesting the task information again.\nServer\tNo\tRFC7231\tA product token and its version. Multiple product tokens may be listed.\n\nNote: Previous versions of the Specification marked this header as required. This has been changed because no use cases for requiring it have been identified.\nVia\tNo\tRFC7230\tDefines the network hierarchy and recognizes message loops. Each pass inserts its own Via header.\nWWW-Authenticate\tYes\tRFC7617\tProvides a challenge to clients, such as directing a client to perform HTTP Basic authentication, when authentication headers in the request are missing or invalid.\nX-Auth-Token\tYes\tOpaque encoded octet strings\tContains the authentication token for user sessions. The token value shall be indistinguishable from random.\n8.2 Link header\nThe Link header provides metadata information on the accessed resource in response to a HEAD or GET request. The metadata information can include hyperlinks from the resource and JSON Schemas that describe the resource.\n\nThe following example shows the Link headers for a ManagerAccount with an Administrator role, in addition to a Settings annotation:\n\nLink: </redfish/v1/AccountService/Roles/Administrator>; path=/Links/Role\nLink: <http://redfish.dmtf.org/schemas/Settings.json>\nLink: </redfish/v1/JsonSchemas/ManagerAccount.v1_0_2.json>; rel=describedby\nThe first Link header is an example of a hyperlink that comes from the resource. It describes hyperlinks within the resource. This type of header is outside the scope of this specification.\nThe second Link header is an example of an annotation Link header as it references the JSON Schema that describes the annotation and does not have rel=describedby. This example references the public copy of the annotation on DMTF's Redfish schema repository.\nThe third Link header is an example for the JSON Schema that describes the actual resource.\nNote that the URL can reference an unversioned JSON Schema because the @odata.type in the resource indicates the appropriate version, or reference the versioned JSON Schema, which according to previous normative statements need to match the version in the @odata.type property of the resource.\nA Link header containing rel=describedby shall be returned on GET and HEAD requests for Redfish resources. If the referenced JSON Schema is a versioned schema, it shall match the version contained in the value of the @odata.type property returned in this resource.\n\nA Link header satisfying annotations should be returned on GET and HEAD requests for Redfish resources.\n\n8.3 Status codes\nHTTP defines status codes that appear in responses. The status codes themselves provide general information about how the request was processed, such as whether the request was successful, if the client provided bad information, or the service encountered an error when processing the request.\n\nWhen the service returns a status code in the 4XX or 5XX range, services should return an extended", "doc_id": "497e6b35-70ef-4352-a6c3-68bc4dce0a95", "embedding": null, "doc_hash": "785418c9442b1b90fd49446d97f50489bcac2462fcd90d15ade3432f094e92d3", "extra_info": null, "node_info": {"start": 104869, "end": 108956, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "45d9a296-ae06-4d0a-874a-59956d559999", "3": "05230e54-9208-495e-a1a1-acf17c128856"}}, "__type__": "1"}, "05230e54-9208-495e-a1a1-acf17c128856": {"__data__": {"text": "returns a status code in the 4XX or 5XX range, services should return an extended error response in the response body to provide the client more meaningful and deterministic error semantics.\nWhen the service returns a status code in the 2XX range and the response contains a representation of a resource, services may use extended information to convey additional information about the resource.\nExtended error messages shall not provide privileged information when authentication failures occur.\nNote: For security implications of extended errors, See Security details.\n\nTable 14 lists HTTP status codes that have meaning or usage defined for a Redfish service, or are otherwise referenced by this specification. Other codes may be returned by the service as appropriate, and their usage is implementation-specific. For usage and additional requirements imposed by this specification, see the Description column.\n\nClients shall understand and be able to process the HTTP-defined status codes in Table 14 and constrained by additional requirements defined by this specification.\nServices shall respond with the HTTP-defined status codes in Table 14 and constrained by additional requirements in the Description column.\nRedfish services should not return the HTTP 100 status code. Using the HTTP protocol for a multipass data transfer should be avoided, except for the upload of extremely large data.\nIf no other status code in the 4XX range is appropriate for client-side errors, the default status code should be the HTTP 400 Bad Request status code.\nIf no other status code in the 5XX range is appropriate for service-side errors, the default status code should be the HTTP 500 Internal Server Error status code.\nTable 14 \u2014 HTTP status codes\nHTTP status code\tDescription\n200 OK\tRequest completed successfully and includes a representation in its body.\n201 Created\tRequest to create a resource completed successfully. The Location header shall be set to the canonical URI for the newly created resource. For POST (create) requests, the response body may include a representation of the newly created resource. For POST (action) requests, the response body shall include the action response.\n202 Accepted\tRequest has been accepted for processing but the processing has not been completed. The Location header shall be set to the URI of a task monitor that can later be queried to determine the status of the operation. The response body may include a representation of the Task resource.\n204 No Content\tRequest succeeded, but no response body is provided.\n301 Moved Permanently\tRequested resource resides under a different URI.\n302 Found\tRequested resource resides temporarily under a different URI.\n304 Not Modified\tService has made a conditional GET request where access is allowed but the resource content has not changed. Certain request headers, such as If-None-Match, initiate conditional requests to save network bandwidth if no change has occurred. See HTTP 1.1, sections 14.25 and 14.26.\n400 Bad Request\tRequest could not be processed because it contains invalid information, such as an invalid input field, or is missing a required value. The response body shall return an extended error as defined in the Error responses clause.\n401 Unauthorized\tAuthentication credentials included with this request are missing or invalid. Additional details are described in the Sensitive data clause.\n403 Forbidden\tService recognized the credentials in the request but those credentials do not possess authorization to complete this request. This code is also returned when the user credentials provided need to be changed before access to the service can be granted. For details, see the Security details clause.\n404 Not Found\tRequest specified a URI of a resource that does not exist. Additional details are described in the Sensitive data clause.\n405 Method Not Allowed\tHTTP verb in the request, such as DELETE, GET, HEAD, POST, PUT, or PATCH, is not supported for this request URI. The response shall include an Allow header that provides a list of methods that the resource identified by the URI in the client request supports. Additional details are described in the Sensitive data clause.\n406 Not Acceptable\tAccept header was specified in the request and the resource identified by this request cannot generate a representation that corresponds to one of the media types in the Accept header.\n409 Conflict\tCreation or update request could not be completed because it would cause a conflict in the current state of the resources that the platform supports. For example, a conflict occurred due to an attempt to set multiple properties that work in a linked manner by using incompatible", "doc_id": "05230e54-9208-495e-a1a1-acf17c128856", "embedding": null, "doc_hash": "29f96222a41b52a64acd8917472717b3d6237dd7adfd2de5acc8515a77fef5a2", "extra_info": null, "node_info": {"start": 108956, "end": 113644, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "497e6b35-70ef-4352-a6c3-68bc4dce0a95", "3": "33fd56ed-ac26-4ac7-bee1-42a061cc54c0"}}, "__type__": "1"}, "33fd56ed-ac26-4ac7-bee1-42a061cc54c0": {"__data__": {"text": "due to an attempt to set multiple properties that work in a linked manner by using incompatible values.\n410 Gone\tRequested resource is no longer available at the service and no forwarding address is known. This condition is expected to be considered permanent. Clients with hyperlink editing capabilities should delete references to the URI in the client request after user approval. If the service does not know or cannot determine whether the condition is permanent, client should use the HTTP 404 Not Found status code. This response is cacheable unless otherwise indicated.\n411 Length Required\tRequest did not use the Content-Length header to specify the length of its content but perhaps used the Transfer-Encoding: chunked header instead. The addressed resource requires the Content-Length header.\n412 Precondition Failed\tPrecondition check, such as check of the OData-Version, If-Match, or If-None-Match header, failed.\n413 Payload Too Large\tRequest payload, or a part in a multipart request, is larger than the maximum size the service supports.\n415 Unsupported Media Type\tRequest specifies a Content-Type for the body that is not supported.\n428 Precondition Required\tRequest did not provide the required precondition, such as an If-Match or If-None-Match header.\n431 Request Header Field Too Large\tService is unwilling to process the request because either an individual header field or the collection of all header fields are too large.\n500 Internal Server Error\tService encountered an unexpected condition that prevented it from fulfilling the request. The response body shall return an extended error as defined in the Error responses clause.\n501 Not Implemented\tService does not currently support the functionality required to fulfill the request. This response is appropriate when the service does not recognize the request method and cannot support the method for any resource.\n503 Service Unavailable\tService currently cannot handle the request due to temporary overloading or maintenance of the service. A service may use this response to indicate that the request URI is valid but the service is performing initialization or other maintenance on the resource. A service may also use this response to indicate that the service itself is undergoing maintenance, such as finishing initialization steps after reboot of the service.\n507 Insufficient Storage\tService cannot build the response for the client due to the size of the response.\n8.4 OData metadata responses\n8.4.1 OData metadata responses overview\nOData metadata describes resources, resource collections, capabilities, and service-dependent behavior to generic OData consumers with no specific understanding of this specification. Clients are not required to request metadata if they already have sufficient understanding of the target service. For example, clients are not required to request metadata to request and interpret a JSON representation of a resource that this specification defines.\n\nA client can access the OData metadata at the /redfish/v1/$metadata URI.\n\nA client can access the OData service document at the /redfish/v1/odata URI.\n\n8.4.2 OData $metadata\nThe OData metadata describes top-level service resources and resource types according to OData Common Schema Definition Language. The OData metadata is represented as an XML document with an Edmx root element in the http://docs.oasis-open.org/odata/ns/edmx namespace with an OData version attribute set to 4.0.\n\nThe service shall use the application/xml or application/xml;charset=utf-8 MIME types to return the OData metadata document as an XML document.\n\n<edmx:Edmx xmlns:edmx=\"http://docs.oasis-open.org/odata/ns/edmx\" Version=\"4.0\">\n  <!-- edmx:Reference and edmx:Schema elements go here -->\n</edmx:Edmx>\n8.4.2.1 Referencing other schemas\nThe OData metadata should include the namespaces for each of the Redfish resource types, along with the RedfishExtensions.v1_0_0 namespace. Dynamic clients that reference the OData metadata document leverage schema definitions that are referenced to understand the definitions of the resources in the service. However, there are cases where it might not be practical to maintain an accurate document, such as when resources are dynamically discovered by the service through devices that support Redfish Device Enablement.\n\nThese references shall use either:\n\nAn absolute URI for the Redfish schema", "doc_id": "33fd56ed-ac26-4ac7-bee1-42a061cc54c0", "embedding": null, "doc_hash": "01de6298b6bb353a005f0511e106d8c4f179693bf792578d6256841d6aa60b27", "extra_info": null, "node_info": {"start": 113633, "end": 118020, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "05230e54-9208-495e-a1a1-acf17c128856", "3": "af3b2431-b344-462a-a1e2-cfc1b3be5357"}}, "__type__": "1"}, "af3b2431-b344-462a-a1e2-cfc1b3be5357": {"__data__": {"text": "references shall use either:\n\nAn absolute URI for the Redfish schema definitions, such as on http://redfish.dmtf.org/schemas or http://developers.contoso.org/schemas.\nA relative URI to a local copy of the Redfish schema. See the Redfish-defined URIs and relative reference rules clause for recommended URI patterns.\n<edmx:Reference Uri=\"http://redfish.dmtf.org/schemas/v1/ServiceRoot_v1.xml\">\n  <edmx:Include Namespace=\"ServiceRoot\"/>\n  <edmx:Include Namespace=\"ServiceRoot.v1_0_0\"/>\n</edmx:Reference>\n\n...\n\n<edmx:Reference Uri=\"http://redfish.dmtf.org/schemas/v1/VirtualMedia_v1.xml\">\n  <edmx:Include Namespace=\"VirtualMedia\"/>\n  <edmx:Include Namespace=\"VirtualMedia.v1_0_0\"/>\n</edmx:Reference>\n<edmx:Reference Uri=\"http://redfish.dmtf.org/schemas/v1/RedfishExtensions_v1.xml\">\n  <edmx:Include Namespace=\"RedfishExtensions.v1_0_0\" Alias=\"Redfish\"/>\n</edmx:Reference>\nThe service's OData metadata document shall include an EntityContainer that defines the top-level resources and resource collections.\n\n8.4.2.2 Referencing OEM extensions\nThe OData metadata document may reference additional schema documents that describe OEM-specific extensions that the service uses.\n\nFor example, the OData metadata document may reference custom types for additional resource collections.\n\n<edmx:Reference Uri=\"http://contoso.org/Schema/CustomTypes\">\n  <edmx:Include Namespace=\"CustomTypes\"/>\n</edmx:Reference>\n8.4.3 OData service document\nThe OData service document serves as a top-level entry point for generic OData clients. More information about the OData service document can be found in the OData JSON Format Specification.\n\n{\n   \"@odata.context\": \"/redfish/v1/$metadata\",\n   \"value\": [{\n      \"name\": \"Service\",\n      \"kind\": \"Singleton\",\n      \"url\": \"/redfish/v1/\"\n   }, {\n      \"name\": \"Systems\",\n      \"kind\": \"Singleton\",\n      \"url\": \"/redfish/v1/Systems\"\n   }, ...]\n}\nThe service shall use the application/json MIME type to return the OData service document as a JSON object.\n\nThe JSON object shall contain the @odata.context context property set to /redfish/v1/$metadata.\n\nThe JSON object shall include a value property set to a JSON array that contains an entry for the service root and each resource that is a direct child of the service root.\n\nTable 15 describes the properties that each JSON object entry includes:\n\nTable 15 \u2014 JSON object properties\nProperty\tDescription\nname\tUser-friendly resource name of the resource.\nkind\tType of resource. Value is Singleton for all cases defined by Redfish.\nurl\tRelative URL for the top-level resource.\n8.5 Resource responses\nServices use the application/json MIME type to return resources and resource collections as JSON payloads. A service shall not break responses for a single resource into multiple results.\n\nThe format of these payloads is defined by the Redfish schema. For rules about the Redfish schema and how it maps to JSON payloads, see the Data model and Schema definition languages clauses.\n\n8.6 Error responses\nHTTP status codes often do not provide enough information to enable deterministic error semantics. For example, if a client makes a PATCH call and some properties do not match while others are not supported, the HTTP 400 Bad Request status code does not tell the client which values are in error. Error responses provide the client more meaningful and deterministic error semantics.\n\nTo provide the client with as much information about the error as possible, a Redfish service may provide multiple error responses in the HTTP response. Additionally, the service may provide Redfish standardized errors,", "doc_id": "af3b2431-b344-462a-a1e2-cfc1b3be5357", "embedding": null, "doc_hash": "b66ca9068187eb64c156a3dae676dee71094fe34517102918557ce7c19e04596", "extra_info": null, "node_info": {"start": 118041, "end": 121618, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "33fd56ed-ac26-4ac7-bee1-42a061cc54c0", "3": "135fee3f-6ccd-409b-bd7f-981a73ca1376"}}, "__type__": "1"}, "135fee3f-6ccd-409b-bd7f-981a73ca1376": {"__data__": {"text": "responses in the HTTP response. Additionally, the service may provide Redfish standardized errors, OEM-defined errors, or both, depending on the implementation's ability to convey the most useful information about the underlying error.\n\nTable 16 describes the properties in the extended error response, which is a single JSON object:\n\nTable 16 \u2014 Error properties\nProperty\tDescription\ncode\tString. Defines a MessageId from the message registry. See the MessageId format clause for the format of MessageId.\nmessage\tDisplays a human-readable error message that corresponds to the message in the message registry.\n@Message.ExtendedInfo\tDisplays an array of message objects. Describes one or more error messages.\nSee the Schema definition languages clause for references to the schema definitions of the error response payload.\n\nThe @Message.ExtendedInfo property should be present in all error responses. If the @Message.ExtendedInfo property is present, all information necessary to process the error should be provided in the @Message.ExtendedInfo property. Clients should look for the @Message.ExtendedInfo property for error processing first, and fallback on the code and message properties if @Message.ExtendedInfo is not present.\n\nThe following sample error response contains two messages in the @Message.ExtendedInfo property that describe two different errors. The message described by the code and message properties do not provide actionable information for the client.\n\n{\n  \"error\": {\n    \"code\": \"Base.1.8.GeneralError\",\n    \"message\": \"A general error has occurred. See Resolution for information on how to resolve the error.\",\n    \"@Message.ExtendedInfo\": [{\n      \"@odata.type\": \"#Message.v1_1_1.Message\",\n      \"MessageId\": \"Base.1.8.PropertyValueNotInList\",\n      \"RelatedProperties\": [\n        \"/IndicatorLED\"\n      ],\n      \"Message\": \"The value Red for the property IndicatorLED is not in the list of acceptable values.\",\n      \"MessageArgs\": [\"Red\",\n        \"IndicatorLED\"\n      ],\n      \"Severity\": \"Warning\",\n      \"MessageSeverity\": \"Warning\",\n      \"Resolution\": \"Choose a value from the enumeration list that the implementation can support and resubmit the request if the operation failed.\"\n    }, {\n      \"@odata.type\": \"#Message.v1_1_1.Message\",\n      \"MessageId\": \"Base.1.8.PropertyNotWritable\",\n      \"RelatedProperties\": [\n        \"/SKU\"],\n      \"Message\": \"The property SKU is a read only property and cannot be assigned a value.\",\n      \"MessageArgs\": [\"SKU\"],\n      \"Severity\": \"Warning\",\n      \"MessageSeverity\": \"Warning\",\n      \"Resolution\": \"Remove the property from the request body and resubmit the request if the operation failed.\"\n    }]\n  }\n}\n9 Data model\nOne of the key tenets of Redfish is the separation of protocol from the data model. This separation makes the data both transport and protocol agnostic. By concentrating on the data transported in the payload of the protocol (in HTTP, it is the HTTP body), Redfish can also define the payload in any encoding and the data model is intended to be schema-language agnostic. While Redfish uses the JSON data-interchange format, Redfish provides a common encoding type that ensures property naming conventions that make development easier in JavaScript, Python, and other languages. This encoding type helps the Redfish data model be more easily accessible in modern tools and programming environments.\n\nThe data model allows an OEM to extend the model by adding an OEM resource or extending a resource.\n\nThis clause describes common data model, resource, and Redfish schema requirements.\n\n9.1 Resources\nA resource is a single entity accessed at a specific", "doc_id": "135fee3f-6ccd-409b-bd7f-981a73ca1376", "embedding": null, "doc_hash": "ad52210d2a546ea6da9d6df75e04541f83e8a26a5866e931e2c504d5ac30941a", "extra_info": null, "node_info": {"start": 121592, "end": 125239, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "af3b2431-b344-462a-a1e2-cfc1b3be5357", "3": "af5f5680-cf8d-4fad-a608-22827dcc3d68"}}, "__type__": "1"}, "af5f5680-cf8d-4fad-a608-22827dcc3d68": {"__data__": {"text": "Resources\nA resource is a single entity accessed at a specific URI. Services use the application/json MIME type to return resources as JSON payloads.\n\nEach resource shall be strongly typed, defined by a resource type in a Redfish schema document, and identified in the response payload by the value of the type identifier property.\n\nResponses for a single resource shall contain the following properties:\n\n@odata.id\nRegistry resources are not required to provide @odata.id\n@odata.type\nId\nName\nResponses may also contain other properties defined within that resource type. Responses shall not include any properties not defined by that resource type.\n\n9.2 Resource types\nA resource type defines the set of properties that may be returned in the response payload of a Redfish resource request. Each resource type is documented in a Redfish schema document, and those documents are known collectively as the Redfish schema. The resource type may also include definitions for actions available for that resource.\n\nResource types are named to match the contents and purpose of the resource that they define. For example the Circuit resource type defines the properties and actions related to a single electrical circuit. Resource types provide global uniqueness for definitions across multiple schema files and allow for schema files to reference each other. Resource types may be defined by OEMs to extend the Redfish schema, and should follow the naming rules specified by the OEM resource types clause.\n\n9.3 Resource collections\nA resource collection is a set of resources that share the same schema definition. Services use the application/json MIME type to return resource collections as JSON payloads.\n\nResource collection responses shall contain the following properties:\n\n@odata.id\n@odata.type\nName\nMembers\nMembers@odata.count\nResponses for resource collections may contain the following properties:\n\n@odata.context\n@odata.etag\nDescription\nMembers@odata.nextLink\nOem\nResponses for resource collections shall not contain any other properties with the exception of payload annotations.\n\n9.4 OEM resources\nOEMs and other third parties can extend the Redfish data model by creating additional resource types. Extending the data model is accomplished by defining an OEM resource type, and schema file, for each resource type, and creating hyperlinks to connect instances of new resources to the resource tree.\n\nCompanies, OEMs, and other organizations may also use the Oem property in resources, the links property, and the actions property to define additional properties, hyperlinks, and actions for standard Redfish resource types.\n\nWhile the information and semantics of these extensions are outside of the standard, the schema representing the data, the resource itself, and the semantics around the protocol shall conform to the requirements in this specification. OEMs are encouraged to follow the design tenets and naming conventions in this specification when defining OEM resources or properties.\n\n9.5 Common data types\n9.5.1 Primitive types\nTable 17 describes the primitive data types for properties and action parameters in the data model:\n\nTable 17 \u2014 Primitive data types\nType\tDescription\nBoolean\tA variable with a value of true or false.\nNumber\tA number with optional decimal point or exponent. Number properties may restrict the representation to an integer or a number with decimal point.\nString\tA sequence of characters enclosed with double quotes (\").\nArray\tA comma-separated set of the previous types enclosed with square braces ([ and ]). See the Array properties clause.\nObject\tA set of properties enclosed with curly braces ({ and }). See the Structured properties clause.\nNull\tnull value, which the service uses when it is unable to determine the property's value due to an error or other temporary condition, or if the schema has requirements for using null for other special conditions.\nWhen receiving values from the client, services should support other valid representations of the data in the specified JSON type. In particular, services should support valid integer and decimal values in exponential notation and integer values that contain a decimal point with no non-zero trailing digits.\n\n9.5.2 Enumerations\nEnumerations are frequently used in Redfish to promote readability and interoperability, especially compared to the use of string values when used for similar purposes.", "doc_id": "af5f5680-cf8d-4fad-a608-22827dcc3d68", "embedding": null, "doc_hash": "14518296a3a6cd60e7c53e143a2cc4565924cef8000ffa58d975e8a537b57515", "extra_info": null, "node_info": {"start": 125273, "end": 129680, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "135fee3f-6ccd-409b-bd7f-981a73ca1376", "3": "531f4505-76be-49f5-ac98-b990198c0ac2"}}, "__type__": "1"}, "531f4505-76be-49f5-ac98-b990198c0ac2": {"__data__": {"text": "interoperability, especially compared to the use of string values when used for similar purposes. Enumerations aren't optimal in all cases. Properties with two values that are likely to not have additional values should consider the boolean type if the true and false values can be described by the property name. The following design tenets apply to enumerations:\n\nEnumeration values can be added to existing properties. Client software should be prepared to receive enumeration values that are not known if the resource schema version is higher than the client's supported version.\nEnumeration properties should avoid definition of \"unknown\", \"other\", or similar generic or placeholder values as these reduce interoperability.\nFeedback is encouraged for adding enumeration values to existing properties to cover new technologies or use cases.\nEnumeration values are generally defined to support existing or newly developed products.\nEnumeration values that are obsolete or highly unlikely to appear in implementations are not included, but they can be added.\nEnumerations may include vendor-specific values when they apply to multiple products or implementations.\nSometimes the value OEM is included as an enumeration value. When this is in the enumeration, client software should be aware that there is likely an Oem property with additional information. In some cases, standard schema contains a standard value to further describe this enumeration value when additional OEM data is unlikely.\n9.5.3 Empty string values\nString properties should return an empty string (\"\") for properties configured by a user or external service that have not been set to an initial value. This allows client software to identify the property as supported by the service, and avoids the use of null, which indicates an error condition. For example, the AssetTag property must be set by the end user, and therefore would return an empty string (\"\") until assigned a value by the user, while a failure to read the stored AssetTag value due to a non-volatile memory error would return null. To improve interoperability, implementations should avoid the use of filler strings, such as N/A or <Empty>, to represent a value not set by a user.\n\n9.5.4 GUID and UUID values\nGlobally Unique Identifier (GUID) and Universally Unique Identifier (UUID) values are unique identifier strings and shall use the RFC4122-defined format:\n\n([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\n\n9.5.5 Date-Time values\nDate-Time values are strings according to the ISO 8601 extended format, including the time offset or UTC suffix.\n\nDate-Time values shall use the format:\n\n<YYYY>-<MM>-<DD>T<hh>:<mm>:<ss>[.<SSS>](Z|((+|-)<HH>:<MM>))\n\nwhere\n\n<YYYY> is the four-digit year.\n<MM> is the two-digit month (1 to 12).\n<DD> is the two-digit day (1 to 31).\nT is the time separator. Shall be a capital T.\n<hh> is the two-digit hour (0 to 23).\n<mm> is the two-digit minute (0 to 59).\n<ss> is the two-digit second (0 to 59).\n<SSS> is optional and is the decimal fraction of a second. Shall be one or more digits where the number of digits implies the precision.\nZ is the zero offset indicator. Shall be a capital Z.\n<HH> is the two-digit hour offset (0 to 23).\n<MM> is the two-digit minute offset (0 to 59).\nFor example, 2015-03-13T04:14:33+06:00 represents March 13, 2015 at 4:14:33 with a +06:00 time offset.\n\nWhen the time of day is unknown or serves no purpose, the service shall report 00:00:00Z for the time of day value.\n\n9.5.6 Duration values\nDuration values are strings according to the ISO 8601 duration format, with the exception of not expressing a representation for years, months, weeks, or negative values. Duration values shall use the", "doc_id": "531f4505-76be-49f5-ac98-b990198c0ac2", "embedding": null, "doc_hash": "4a2764fe281dbdf11a05472eafd9d541b78be19a4e3700b8afe6c34aeabcf644", "extra_info": null, "node_info": {"start": 129650, "end": 133377, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "af5f5680-cf8d-4fad-a608-22827dcc3d68", "3": "bb1f5cfe-6784-489f-8a47-67b25e8c89a9"}}, "__type__": "1"}, "bb1f5cfe-6784-489f-8a47-67b25e8c89a9": {"__data__": {"text": "a representation for years, months, weeks, or negative values. Duration values shall use the format:\n\nP[<d>D][T[<h>H][<m>M][<s>[.<f>]S]]\n\nwhere\n\n<d> is the number of days.\n<h> is the number of hours.\n<m> is the number of minutes.\n<s> is the number of seconds.\n<f> is the fractional seconds.\nEach field is optional and can contain more than one digit.\n\nFor example, Table 18 describes the following durations:\n\nTable 18 \u2014 Durations\nValue\tDuration\nP90D\tNinety days.\nP3D\tThree days.\nPT6H\tSix hours.\nPT10S\tTen seconds.\nPT0.001S\t0.001 seconds.\nPT1H30M\tOne hour and 30 minutes.\nDEPRECATED: Duration values shall use the format: P[<y>Y][<m>M][<w>W][<d>D][T[<h>H][<m>M][<s>[.<f>]S]]. This definition allows for specifying years, months, and weeks. ISO 8601 does not specify an exact value for the duration of a year or of a month, which introduces interoperability challenges.\n\n9.5.7 Reference properties\nReference properties provide a reference to another resource in the data model. Reference properties are JSON objects that contain an @odata.id property. The @odata.id property value is the URI of the referenced resource.\n\n9.5.8 Non-resource reference properties\nNon-resource reference properties provide a URI to services or documents that are not Redfish-defined resources. These properties shall include the Uri or URI term in their property name and shall be of type string. For example, AssemblyBinaryDataUri in the Assembly schema. The access protocol, request headers, response headers, and data format of the referenced URI may be defined in schema for that property. Non-resource reference properties that refer to local HTTP/S targets shall follow the Redfish protocol, including use of Redfish sessions and access control, unless otherwise specified by the property definition in schema.\n\n9.5.9 Array properties\nArray properties contain a set of values or objects, and appear as JSON arrays within a response body. Array elements shall all contain values of the same data type.\n\nTable 19 describes the array types, regardless of the data type of the elements:\n\nTable 19 \u2014 Array types\nArray type\tDescription\nFixed length\tContains a static number of elements. The property definition sets or the implementation chooses the size of the array.\nVariable length\tContains a variable number of elements. The array size is not specified and the size varies among instances. The array size may change. This array style is the most common style.\nRigid\tThe array index is meaningful. When elements are added to or removed from the array, the elements do not change their position, or index, in the array. An element that is removed from a rigid array shall be replaced by a null element and all other elements shall remain at their current index.\n\nEmpty elements in a rigid array property shall be represented by null elements. Any array property that uses this style shall indicate the rigid style in the long description of its schema definition.\nServices may pad an array property with null elements at the end of the sequence to indicate the array size to clients. This practice is useful for small fixed length arrays, and for variable or rigid arrays with a restrictive maximum size. Services should not pad array properties if the maximum array size is not restrictive. For example, an array property typically populated with two elements, that a service limits to a maximum of 16 elements, should not pad the array with 14 null elements.\n\n9.5.10 Structured properties\nStructured properties are JSON objects within a response body.\n\nSome structured properties inherit from the Resource.v1_0_0.ReferenceableMember definition. Structured properties that follow this definition shall contain the MemberId and resource identifier properties.\n\nBecause the definition of structured properties can evolve over time, clients need to be aware of the inheritance model that the different structured property definitions use.\n\nFor example, the Location property definition in the Resource schema has gone through several iterations since the Resource.v1_1_0", "doc_id": "bb1f5cfe-6784-489f-8a47-67b25e8c89a9", "embedding": null, "doc_hash": "05d32e1d6cd9546a297bf2017dd872c7e0f3614ee9eff17c2b7fbcbc8efd540d", "extra_info": null, "node_info": {"start": 133383, "end": 137432, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "531f4505-76be-49f5-ac98-b990198c0ac2", "3": "4065dd88-695b-4ae1-8cc7-5d4242a683a1"}}, "__type__": "1"}, "4065dd88-695b-4ae1-8cc7-5d4242a683a1": {"__data__": {"text": "Resource schema has gone through several iterations since the Resource.v1_1_0 type was introduced, and each iteration inherits from the earlier version so that existing references in other schemas can leverage the additions.\n\nStructured property references need to be resolved for both local and external references.\n\nA local reference is a resource that has a structured property in its own schema, such as ProcessorSummary in the ComputerSystem resource. In these cases, the type property for the resource is the starting point for resolving the structured property definition.\n\nTo find the latest applicable version, clients can step the version of the resource backwards.\n\nFor example, if a service returns #ComputerSystem.v1_4_0.ComputerSystem as the resource type, a client can step backwards from ComputerSystem.v1_4_0, to ComputerSystem.v1_3_0, to ComputerSystem.v1_2_0, and so on, until it finds the ProcessorSummary structured property definition.\n\nAn external reference is a resource that has a property that references a definition found in a different schema, such as the Location property in the Chassis resource.\n\nIn these cases, clients can use the latest version of the external schema file as a starting point to resolve the structured property definition.\n\nFor example, if the latest version of the Resource schema is 1.6.0, a client can go backward from Resource.v1_6_0, to Resource.v1_5_0, to Resource.v1_4_0, and so on, until it finds the Location structured property definition.\n\n9.5.11 Message object\n9.5.11.1 Overview\nA message object provides additional information about an object, property, or error response.\n\nTable 20 describes the properties of the message object, which is a JSON object:\n\nTable 20 \u2014 Message object properties\nProperty\tType\tRequired\tDefines\nMessageId\tString\tYes\tError or message. Do not confuse this value with the HTTP status code. Clients can use this code to access a detailed message from a message registry.\nMessage\tString\tNo\tHuman-readable error message that indicates the semantics associated with the error. This shall be the complete message, and not rely on substitution variables.\nRelatedProperties\tAn array of JSON pointers\tNo\tProperties in a JSON payload that the message describes.\nMessageArgs\tAn array of strings\tNo\tSubstitution parameter values for the message. If the parameterized message defines a MessageId, the service shall include the MessageArgs in the response.\nMessageSeverity\tString (enumeration)\tNo\tSeverity of the error. Services can replace the value of the MessageSeverity property defined in the message registry with a value more applicable to the implementation.\nSeverity\tString\tNo\tSeverity of the error. Services can replace the value of the Severity property defined in the message registry with a value more applicable to the implementation.\n\nDEPRECATED: This property has been deprecated in favor of MessageSeverity.\nResolution\tString\tNo\tRecommended actions to take to resolve the error. Services can replace the value of the Resolution property defined in the message registry with a service-defined resolution.\nEach instance of a message object shall contain at least a MessageId, together with any applicable MessageArgs, or a Message property that defines the complete human-readable error message.\n\nA MessageId identifies a specific message that a message registry defines.\n\n9.5.11.2 MessageId format\nThe MessageId property value shall be in the format:\n\n<MessageRegistryPrefix>.<MajorVersion>.<MinorVersion>.<MessageKey>\n\nwhere\n\n<MessageRegistryPrefix> is the name of the message registry. The message registry name shall be Pascal-cased, except for any prepended unique OEM identifier which may include underscore (_) characters. The message registry name shall be exposed in the RegistryPrefix property in the message registry.\n<MajorVersion> is a non-negative integer that represents the major version of the message registry.\n<MinorVersion> is a non-negative integer that represents the minor version of the message registry.\n<MessageKey> is a human-readable key into the message registry. The message key shall be Pascal-cased and shall not include spaces, periods, or special", "doc_id": "4065dd88-695b-4ae1-8cc7-5d4242a683a1", "embedding": null, "doc_hash": "760a57df6e37e0dad004e4f4ad59ce4a05a866ba89d821117836e64172659e98", "extra_info": null, "node_info": {"start": 137444, "end": 141617, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "bb1f5cfe-6784-489f-8a47-67b25e8c89a9", "3": "d596ba80-e9c9-49ca-86ef-1ec02710b1ed"}}, "__type__": "1"}, "d596ba80-e9c9-49ca-86ef-1ec02710b1ed": {"__data__": {"text": "key shall be Pascal-cased and shall not include spaces, periods, or special characters.\nTo search the message registry for a message, the client can use the MessageId.\n\nThe message registry approach has advantages for internationalization because the message registry can be translated easily, and is lightweight for implementations because large strings need not be included with the implementation.\n\nThe use of GeneralError from the Base Message Registry as a MessageId in ExtendedInfo is discouraged. If no better message exists or the ExtendedInfo array contains multiple messages, use GeneralError from the Base Message Registry only in the code property of the error object.\n\nWhen an implementation uses GeneralError from the Base Message Registry in ExtendedInfo, the implementation should include a service-defined value for the Resolution property with this error to indicate how to resolve the problem.\n\n9.6 Properties\n9.6.1 Properties overview\nEvery property included in a Redfish response payload shall be defined in the schema for that resource. The following attributes apply to all property definitions:\n\nProperty names in the request and response payload shall match the casing of the Name attribute value in the defining schema.\nRequired properties shall always be returned in a response.\nProperties not returned from a GET operation indicate that the property is not supported by the implementation, or by that particular resource instance. Differences in underlying product support or configuration varies among resource instances, and therefore the properties returned by each instance vary accordingly.\nIf an implementation supports a property, it shall always provide a value for that property. If a value is unknown at the time of the operation due to an internal error, or inaccessibility of the data, the value of null is an acceptable value if supported by the schema definition.\nResource instances should omit properties if the underlying product, service, or current configuration does not provide the function described by the property. For example, a chassis resource instance might not provide a serial number, and therefore should omit the SerialNumber property, while other chassis resource instances that have a serial number provide this property. See the Special resource situations clause for handling special resource situations.\nA service may implement a writable property as read-only.\nAll property definitions in schema shall specify a well-known data type, with exceptions in the following standard schemas:\nAttributeRegistry and Bios: To support arbitrary BIOS settings of different data types.\nThis clause also contains a set of common properties across all Redfish resources. The property names in this clause shall not be used for any other purpose.\n\n9.6.2 Resource identifier (@odata.id) property\nRegistry resources in a response may include an @odata.id property. All other resources and resource collections in a response shall include an @odata.id property. The value of the identifier property shall be the resource URI.\n\n9.6.3 Resource type (@odata.type) property\nAll resources and resource collections in a response shall include an @odata.type type property. To support generic OData clients, all structured properties in a response should include an @odata.type type property.\n\nThe value of the type property for resources and structured properties shall be in the format:\n\n#<ResourceType>.<Version>.<TermName>\n\nwhere\n\n<ResourceType> is the resource type in the Redfish schema that defines the resource.\n<Version> is the resource type version, in the format: v<MajorVersion>_<MinorVersion>_<ErrataVersion>.\n<TermName> is the specific type defined within the resource type definition. For most Redfish resources, the specific type name is the same as the resource type name.\nAn example of a resource type value is #ComputerSystem.v1_0_0.ComputerSystem, where ComputerSystem.v1_0_0 denotes the version 1.0.0 of the ComputerSystem resource type, and the specific type is ComputerSystem.\n\nThe value of the type property for resource collections shall be in the format:\n\n#<ResourceType>.<ResourceType>\n\nwhere\n\n<ResourceType> is the resource type in the Redfish schema that defines the resource collection.\nAn example of a resource collection type value is #ComputerSystemCollection.ComputerSystemCollection for the ComputerSystemCollection resource collection.\n\n9.6.4 Resource ETag (@odata.etag)", "doc_id": "d596ba80-e9c9-49ca-86ef-1ec02710b1ed", "embedding": null, "doc_hash": "27a8b3a16a2312c972b5712ff841fba31c2f96e7381fc75d1b2661011024f412", "extra_info": null, "node_info": {"start": 141622, "end": 146067, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "4065dd88-695b-4ae1-8cc7-5d4242a683a1", "3": "68693dc3-779f-46fc-b7ec-ecf0c33be39c"}}, "__type__": "1"}, "68693dc3-779f-46fc-b7ec-ecf0c33be39c": {"__data__": {"text": "collection.\n\n9.6.4 Resource ETag (@odata.etag) property\nETags enable clients to conditionally retrieve or update a resource. Resources should include an @odata.etag property. For a resource, the value shall be the ETag.\n\n9.6.5 Resource context (@odata.context) property\nResponses for resources and resource collections may contain an @odata.context property that describes the source of the payload.\n\nIf the @odata.context property is present, it shall be the context URL that describes the resource, according to OData Protocol.\n\nThe context URL for a resource should be in the format:\n\n/redfish/v1/$metadata#<ResourceType>.<ResourceType>\n\nwhere\n\n<ResourceType> is the resource type of the resource or resource collection.\nFor example, the following context URL specifies that the results show a single ComputerSystem resource:\n\n{\n   \"@odata.context\": \"/redfish/v1/$metadata#ComputerSystem.ComputerSystem\",\n   ...\n}\nThe context URL for a resource may be in one of the other formats that OData Protocol specifies.\n\n9.6.6 Id\nThe Id property of a resource uniquely identifies the resource within the resource collection that contains it. The value of Id shall be a string that is unique across a resource collection. Since URIs are constructed from the value of the Id property, the value shall not contain any RFC1738-defined unsafe characters.\n\n9.6.7 Name\nThe Name property conveys a human-readable moniker for a resource. The data type of the Name property shall be string. The value of Name is NOT required to be unique across resource instances within a resource collection.\n\n9.6.8 Description\nThe Description property conveys a human-readable description of the resource. The data type of the Description property shall be string.\n\n9.6.9 MemberId\nThe MemberId property uniquely identifies an element within an array, where a reference property can reference the element. The value of MemberId shall be a string that is unique across the array.\n\n9.6.10 Count (Members@odata.count) property\nThe count property defines the total number of resource, or members, that are available in a resource collection. The count property shall be named Members@odata.count and its value shall be the total number of members available in the resource collection. The $top or $skip query parameters shall not affect this count. If the number of members available in the resource collection is reduced due to filtering, such as in response to the $filter query parameter, the count should be the total number of members available in the resource collection after the filter is applied.\n\n9.6.11 Members\nThe Members property of a resource collection identifies the members of the collection. The Members property is required and shall be returned in the response for any resource collection. The Members property shall be an array of JSON objects named Members. The Members property shall not be null. Empty collections shall be an empty JSON array.\n\n9.6.12 Next link (Members@odata.nextLink) property\nThe next link (Members@odata.nextLink) property value shall be an opaque URL to a resource, with the same @odata.type, which contains the next set of partial members from the original operation. The next link property shall only be present if the number of members in the resource collection is greater than the number of members returned, and if the payload does not represent the end of the requested resource collection.\n\nThe Members@odata.count property value is the total number of resources available if the client enumerates all pages of the resource collection.\n\n9.6.13 Links\nThe Links property represents the hyperlinks associated with the resource, as defined by that resource's schema definition. All associated reference properties defined for a resource shall be nested under the links property. All directly (subordinate) referenced properties defined for a resource shall be in the root of the resource. There are some exceptions to these rules, such as where ease of expansion or deep operations is beneficial to the user.\n\nThe links property shall be named Links and contain a property for each related resource.\n\nTo navigate vendor-specific hyperlinks, the Links property shall also include an Oem property.\n\n9.6.13.1 Reference to a related resource\nA reference to a single resource is a JSON object that contains a single resource identifier property. The name of", "doc_id": "68693dc3-779f-46fc-b7ec-ecf0c33be39c", "embedding": null, "doc_hash": "a1d69dd8ba6d5771adb08cc8a71d52e650f851bed2d87cddd6bd4511cf9f3cd1", "extra_info": null, "node_info": {"start": 146089, "end": 150456, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "d596ba80-e9c9-49ca-86ef-1ec02710b1ed", "3": "c00660ed-9580-4301-8cc8-c7ba364bd7cc"}}, "__type__": "1"}, "c00660ed-9580-4301-8cc8-c7ba364bd7cc": {"__data__": {"text": "a single resource is a JSON object that contains a single resource identifier property. The name of this reference is the name of the relationship. The value of this reference is the URI of the referenced resource.\n\n{\n   \"Links\": {\n      \"ManagedBy\": {\n         \"@odata.id\": \"/redfish/v1/Chassis/Encl1\"\n      }\n   }\n}\n9.6.13.2 References to multiple related resources\nA reference to a set of zero or more related resources is an array of JSON objects. The name of this reference is the name of the relationship. Each element of the array is a JSON object that contains a resource identifier property with the value of the URI of the referenced resource.\n\n{\n   \"Links\": {\n      \"Contains\": [{\n         \"@odata.id\": \"/redfish/v1/Chassis/1\"\n      }, {\n         \"@odata.id\": \"/redfish/v1/Chassis/Encl1\"\n      }]\n   }\n}\n9.6.14 Actions property\nThe Actions property contains the actions supported by a resource.\n\n9.6.14.1 Action representation\nEach supported action is represented as a property nested under Actions. The unique name that identifies the action is used to construct the property name.\n\nThis property name shall be in the format:\n\n#<ResourceType>.<ActionName>\n\nwhere\n\n<ResourceType> is the resource where the action is defined.\n<ActionName> is the name of the action.\nThe client may use this fragment to identify the action definition in the referenced Redfish schema document.\n\nThe property for the action is a JSON object and contains the following properties:\n\nThe target property shall be present, and defines the relative or absolute URL to invoke the action.\nThe title property may be present,and defines the action's name.\nThe OData JSON Format Specification defines the target and title properties.\n\nTo specify the list of supported values for a parameter, the service may include the @Redfish.AllowableValues annotation.\n\nFor example, the following property defines the Reset action for a ComputerSystem:\n\n{\n   \"#ComputerSystem.Reset\": {\n      \"target\": \"/redfish/v1/Systems/1/Actions/ComputerSystem.Reset\",\n      \"title\": \"Computer System Reset\",\n      \"ResetType@Redfish.AllowableValues\": [\"On\", \"ForceOff\", \"GracefulRestart\",\n         \"GracefulShutdown\", \"ForceRestart\", \"Nmi\", \"ForceOn\",\n         \"PushPowerButton\"]\n   },\n   ...\n}\nGiven this, the client could invoke a POST request to /redfish/v1/Systems/1/Actions/ComputerSystem.Reset with the following body:\n\nPOST /redfish/v1/Systems/1/Actions/ComputerSystem.Reset HTTP/1.1\nContent-Type: application/json;charset=utf-8\nContent-Length: <computed length>\nOData-Version: 4.0\n\n{\n   \"ResetType\": \"On\"\n}\nThe resource may provide a separate @Redfish.ActionInfo resource to describe the parameters and values that a particular instance or implementation supports. Use the @Redfish.ActionInfo annotation to specify the ActionInfo resource, which contains a URI to the @Redfish.ActionInfo resource for the action. For details, see the Action info annotation clause.\n\n9.6.14.2 Action responses\nResponse payloads for actions may contain a JSON body that is described by the schema definition for the action. See the Schema definition languages clause for the representation of these definitions. Actions that do not define a response body may provide an error response in the response payload.\n\nClients can discover the schema definition of the action response based on the property name of the action found in GET responses for resources containing the action. For example, if an action is named", "doc_id": "c00660ed-9580-4301-8cc8-c7ba364bd7cc", "embedding": null, "doc_hash": "a9ce6d3a25eb0fb958571b6b48ffbef0dd442b68c1f85ed240beb2d2606cca20", "extra_info": null, "node_info": {"start": 150417, "end": 153875, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "68693dc3-779f-46fc-b7ec-ecf0c33be39c", "3": "628228df-00b6-4c1e-af44-452800b36f8a"}}, "__type__": "1"}, "628228df-00b6-4c1e-af44-452800b36f8a": {"__data__": {"text": "action found in GET responses for resources containing the action. For example, if an action is named #ContosoComputerSystem.Reset, a client can find the action response definition, if there is one available, by locating the Reset action definition found in the ContosoComputerSystem schema.\n\n9.6.15 Oem\nThe Oem property is used for extending standard resources with OEM extensions.\n\n9.6.16 Status\nThe Status property represents the status of a resource. The Status property shall follow the definition for Status in the Resource schema.\n\nBy having a common representation of status, clients can depend on consistent semantics. The Status property is capable of indicating the current state, health of the resource, and the health of subordinate resources.\n\n9.7 Naming conventions\nThe Redfish interface is intended to be easily readable and intuitive. Thus, consistency helps the consumer understand the use of a newly discovered property. While consistency is no substitute for the normative information in the Redfish Specification and Redfish schema, the following naming rules help with readability and client usage. In general, names in Redfish are designed and intended to be human-readable and convey the meaning of the name, in context, without the need to consult schema definitions or other documentation.\n\n9.7.1 Naming rules\nStandard Redfish schema and registries defined and published by DMTF, and those created by others and republished by DMTF, shall follow a set of naming conventions. These conventions are intended to ensure consistent naming and eliminate naming collisions. For schema files, the resource type is used to construct the type property and the schema file name.\n\nStandard Redfish properties follow similar naming conventions, and should use a common definition when defined in multiple schemas across the Redfish data model. This consistency enables code re-use across resources and increases interoperability. New resource definitions should leverage existing property definitions whenever possible.\n\nThe general Redfish naming rules for resource types, registries, properties, action parameters, and enumerations are as follows:\n\nNames shall be Pascal-cased. The first letter of each word in a name shall be uppercase and spaces between words shall be removed. For example, ComputerSystem, PowerState, and SerialNumber.\nNames of array properties or reference properties for resource collections should use a plural form of the name. All other names should use the singular form of the name.\nReference properties for resource collections should omit the term \"collection\" in the name.\nNames shall not contain spaces or underscore characters. Names should not contain any special characters that violate naming rules for supported schema description languages or programming languages.\nBoth characters should be capitalized for two-character acronyms. For example, IPAddress or RemoteIP.\nNames constructed from a single acronym or mixed-case name, such as LDAP, PCIe, or SNMP, should use the typical capitalization for that name.\nNames incorporating acronyms with three or more characters should follow the capitalization used in related names for consistency. For example, EnableSNMPv1 and EnableSNMPv2 follow the pattern used for SNMP.\nPascal-casing may be used for acronyms longer than two characters to improve readability, especially when two or more acronyms appear together in a name, which should be avoided.\nEnumeration names should start with a letter and be followed by letters or numbers to conform to schema description language requirements. Underscore characters may be used to replace other special characters, or to significantly improve readability, but this usage is discouraged.\nEnumeration names should prioritize readability as they may appear unmodified on user interfaces, whereas property or schema names should follow conventions and strive for consistency.\nThe names Settings and SD are reserved for use for settings resources and shall not be used for schema names.\nExceptions are allowed for the following cases:\n\nWell-known technology abbreviations, acronyms, or product names should follow their defined capitalization. Examples include iSCSI, iSCSITarget, and iLO.\nOEM appears as Oem in schema and property names either alone or as a portion of a name, but should be OEM when used alone as an enumeration", "doc_id": "628228df-00b6-4c1e-af44-452800b36f8a", "embedding": null, "doc_hash": "34259f0605f4d16f1082feb8ad1ea275ad6a10152ce3f4b3d1200ec88a14007b", "extra_info": null, "node_info": {"start": 153874, "end": 158242, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "c00660ed-9580-4301-8cc8-c7ba364bd7cc", "3": "b2b0a16d-f014-4c40-91fe-2706a1f122e5"}}, "__type__": "1"}, "b2b0a16d-f014-4c40-91fe-2706a1f122e5": {"__data__": {"text": "as a portion of a name, but should be OEM when used alone as an enumeration value.\nUnderscore characters are allowed in the construction of OEM-specified object property names when required, and in OEM-defined resource types or OEM-defined registry names.\nFor properties that have units or other special meaning, append a unit identifier to the name. Examples include:\n\nBandwidth (Mbps). For example, PortSpeedMbps.\nCPU speed (Mhz). For example, ProcessorSpeedMhz.\nMemory size (MB). For example, MemoryMB.\nCounts of items (Count). For example, ProcessorCount or FanCount.\nThe state of a resource (State). For example, PowerState.\nState values where work is in process. For example, Applying or ClearingLogic.\n9.7.2 URI naming rules\nThe following rules apply to Redfish schema-defined URIs:\n\nURI segments should generally follow the naming rules, and for each segment, follow the name of the property that provides the hyperlink.\nURI segments for resource collections should use the plural form of the resource collection schema name, with the Collection term omitted. For example, Processors for a ProcessorCollection.\nURI segments for resource collections shall not be named Members, as this value will conflict with POST operations on the required Members property. See the POST (create) clause for more information.\nIf a hyperlink to a subordinate resource is not found at the root of the resource, the URI segments should contain the property path. For example, for the Certificates hyperlink found in ManagerNetworkProtocol within the HTTPS object, HTTPS should be one of the URI segments resulting in the URI pattern /redfish/v1/Managers/{ManagerId}/NetworkProtocol/HTTPS/Certificates.\nStarting with Redfish Specification v1.18.0, in cases where the URI segment does not follow one or more of the previous rules, the schema definition for the reference property for the URI shall specify the URI segment annotation to define the URI segment to append.\n\n9.8 Extending standard resources\n9.8.1 Extending standard resources overview\nIn the context of this clause, the OEM term refers to any company, manufacturer, or organization that provides or defines an extension to DMTF-published schema and functionality for Redfish. All Redfish-specified resources include an empty structured Oem property. The value of this predefined placeholder can encapsulate one or more OEM-specified object properties, which can contain OEM-specific property definitions.\n\n9.8.2 OEM property format and content\nEach property contained within the Oem property shall be an OEM-specified JSON object. The name of each object property shall uniquely identify the OEM or organization that defines the properties contained by that object. The OEM-specified object naming clause describes this naming convention.\n\nThe OEM-specified object shall include a type property if the object:\n\nIs not contained in an array of objects.\nIs contained in the first object within an array of objects.\nIn subsequent array members containing an OEM-specified object, whose type is different than the first array member.\nThe Oem property can simultaneously hold multiple OEM-specified objects, including objects for more than one company or organization.\n\nThe definition of any other properties that are contained within the OEM-specified object, along with the functional specifications, validation, or other requirements for that content is OEM-specific and outside the scope of this specification. While there are no Redfish-specified limits on the size or complexity of the elements within an OEM-specified object, it is intended it is typically used for only a small number of simple properties that augment the Redfish resource. If a large number of objects or a large quantity of data compared to the size of the Redfish resource is to be supported, the OEM should consider creating a subordinate resource for their extensions.\n\n9.8.3 OEM-specified object naming\nThe OEM-specified object properties within the Oem property are named by using a unique OEM identifier. There are two specified forms for the identifier. The identifier shall be either an ICANN-recognized domain name (including the top-level domain suffix), with all dot (.) separators replaced with underscores (_), or an IANA-assigned Enterprise Number prefixed with \"EID_.\"\n\nDEPRECATED: The", "doc_id": "b2b0a16d-f014-4c40-91fe-2706a1f122e5", "embedding": null, "doc_hash": "839542ec74f2e492d67e81f7f63b61f1f354e1b1c7cc916a9c8ecaa5934134f6", "extra_info": null, "node_info": {"start": 158268, "end": 162591, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "628228df-00b6-4c1e-af44-452800b36f8a", "3": "358a3e20-66b6-46b3-8fb3-31f8083b2716"}}, "__type__": "1"}, "358a3e20-66b6-46b3-8fb3-31f8083b2716": {"__data__": {"text": "Enterprise Number prefixed with \"EID_.\"\n\nDEPRECATED: The identifier shall be either an ICANN-recognized domain name including the top-level domain suffix, or an IANA-assigned Enterprise Number prefixed with EID:.\n\nOrganizations that use .com domain names may omit the .com suffix. For example, Contoso.com would use Contoso instead of Contoso_com, but Contoso.org would use Contoso_org. The domain name portion of an OEM identifier shall be considered to be case independent. That is, the text Contoso_biz, contoso_BIZ, conTOso_biZ, and so on all identify the same OEM.\n\nThe OEM identifier portion of the object name may be followed by an underscore (_) and any additional string to enable further subdivisions of OEM-specified objects as desired. For example, Contoso_xxxx or EID_412_xxxx. The form and meaning of any text that follows the trailing underscore is completely OEM-specific. OEM-specified extension suffixes may be case sensitive, depending on the OEM. Generic client software should treat such extensions, if present, as opaque and not try to parse nor interpret the content.\n\nThere are organizations for which DMTF has a working relationship, and have registered their OEM namespace directly in the specification to allow extensions of the ICANN domain name requirements above. The following organization OEM namespaces shall be considered reserved:\n\nOpenBMC\nThis suffix could be used in many ways, depending on OEM need. For example, the Contoso company may have a Research sub-organization, in which case the OEM-specified property name might be extended to Contoso_Research. Alternatively, it can identify a unique resource type for a functional area, geography, subsidiary, and so on.\n\nThe OEM identifier portion of the name typically identifies the company or organization that created and maintains the schema for the property. However, this practice is not a requirement. The identifier is only required to uniquely identify the party that is the top-level manager of a resource type to prevent collisions between OEM property definitions from different vendors or organizations. Consequently, the organization for the top of the resource type may be different than the organization that provides the definition of the OEM-specified property. For example, Contoso may allow one of their customers, such as CustomerA, to extend a Contoso product with certain CustomerA proprietary properties. In this case, although Contoso allocated the name Contoso_CustomerA, it could be CustomerA that defines the content and functionality within that resource type. In all cases, OEM identifiers should not be used except with permission or as specified by the identified company or organization.\n\n9.8.4 OEM resource types\nCompanies, OEMs, and other organizations can define additional resources and link to them from an Oem property in a standard Redfish resource, preferably from the Oem property within the Links property. To avoid naming collisions with current or future standard Redfish resource types or schema files, the defining organization's unique OEM identifier, including possible subdivisioning, should be prepended to the OEM resource type name with an optional underscore (_) as separator. This unique OEM identifier should follow the same naming as defined in the OEM-specified object naming clause. The name of the OEM resource type, including the unique OEM identifier, should also be prepended to the file name of OEM schema file that specify the OEM resource type. Separator underscores (_) may be excluded from the OEM resource type name or schema file name for improved readability.\n\nFor example, OEM resource type ContosoDrive or Contoso_CustomerA_Drive would not conflict with the standard Redfish Drive resource type, or conflict with another OEM's drive-related definition.\n\n9.8.5 OEM registries\nCompanies, OEMs, and other organizations can define additional registries and utilize them in message objects, privileges or for BIOS attributes. To avoid naming collisions with current or future standard Redfish message registries, the defining organization's unique OEM identifier, including possible subdivisioning, should be prepended to the registry name with an optional underscore (_) as separator. This unique OEM identifier should follow the same naming as defined in the", "doc_id": "358a3e20-66b6-46b3-8fb3-31f8083b2716", "embedding": null, "doc_hash": "bbafeb8889e28fd43c49899d38402fe73c0f6fe8feb02bf130eb72ecd6ec28cf", "extra_info": null, "node_info": {"start": 162601, "end": 166915, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "b2b0a16d-f014-4c40-91fe-2706a1f122e5", "3": "ec393b6f-e846-4d4e-ab78-8459444bd0d3"}}, "__type__": "1"}, "ec393b6f-e846-4d4e-ab78-8459444bd0d3": {"__data__": {"text": "as separator. This unique OEM identifier should follow the same naming as defined in the OEM-specified object naming clause. Separator underscores (_) may be excluded from the OEM registry name for improved readability. The OEM registry name, including the unique OEM identifier, should also be used to construct the registry file name as defined in the Registry file naming clause.\n\nFor example, OEM registry name ContosoDriveEvent or Contoso_CustomerB_DriveEvent would not conflict with a possible future standard Redfish DriveEvent message registry name, or conflict with another OEM's drive-related registry name.\n\n9.8.6 OEM URIs\nTo avoid URI collisions with other OEM resources and future Redfish standard resources, the URIs for OEM resources within the Redfish resource tree shall be in the form:\n\n<BaseUri>/Oem/<OemIdentifier>/<ResourcePath>\n\nwhere\n\n<BaseUri>is the URI segment of the standard Redfish resource starting with /redfish/ where the Oem property is used. For example, /redfish/v1/Systems/3AZ38944T523.\n<OemIdentifier> is the unique identifier of the OEM, including possible subdivisioning, that follows the same naming as defined in the OEM-specified object naming clause. Separator underscores (_) may be excluded for improved readability.\n<ResourcePath> is the path to the OEM-defined resource. This path might contain multiple segments for cases where OEM-defined resources are subordinate to an OEM-defined resource. Each segment in the path contains the name of an OEM-defined resource.\nFor example, if Contoso defined a new ContosoAccountServiceMetrics OEM resource type to be linked through the Oem property at the /redfish/v1/AccountService URI, the OEM resource has the /redfish/v1/AccountService/Oem/Contoso/AccountServiceMetrics URI. If Contoso uses a subdivision of their OEM identifier such as Contoso_CustomerA the OEM resource has the URI /redfish/v1/AccountService/Oem/Contoso_CustomerA/AccountServiceMetrics or /redfish/v1/AccountService/Oem/ContosoCustomerA/AccountServiceMetrics.\n\n9.8.7 OEM property examples\nThe following fragment shows examples of naming and the Oem property as it might appear when accessing a resource. The example shows that the OEM identifiers can be of different forms, that OEM-specified content can be simple or complex, and that the format and usage of extensions of the OEM identifier is OEM-specific.\n\n{\n   \"Oem\": {\n      \"Contoso\": {\n         \"@odata.type\": \"#ContosoAnvil.v1_2_1.AnvilTypes1\",\n         \"Slogan\": \"Contoso anvils never fail\",\n         \"Disclaimer\": \"* Most of the time\"\n      },\n      \"Contoso_biz\": {\n         \"@odata.type\": \"#ContosoBizEngine.v1_1_0.RelatedSpeed\",\n         \"Speed\": \"Ludicrous\"\n      },\n      \"EID_412\": {\n         \"@odata.type\": \"#AdatumPowerExtensions.v1_0_1.PowerInfoExt\",\n         \"ReadingInfo\": {\n            \"Accuracy\": \"5\",\n            \"IntervalSeconds\": \"20\"\n         }\n      },\n      \"Contoso_CustomerA\": {\n         \"@odata.type\": \"#ContosoCustomerASling.v1_0_0.SlingPower\",\n         \"AvailableTargets\": [\"Rabbit\", \"Duck\", \"Runner\"],\n         \"LaunchPowerOptions\": [\"Low\", \"Medium\",", "doc_id": "ec393b6f-e846-4d4e-ab78-8459444bd0d3", "embedding": null, "doc_hash": "52cdd3a785c26731bbef7422ced5adb82bf663b1682ea625d9264de70763ad04", "extra_info": null, "node_info": {"start": 166893, "end": 169988, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "358a3e20-66b6-46b3-8fb3-31f8083b2716", "3": "20e6e519-1841-4541-912d-e2a07b05d349"}}, "__type__": "1"}, "20e6e519-1841-4541-912d-e2a07b05d349": {"__data__": {"text": "        \"LaunchPowerOptions\": [\"Low\", \"Medium\", \"Eliminate\"],\n         \"LaunchPower\": \"Eliminate\",\n         \"Target\": \"Rabbit\"\n      }\n   },\n   ...\n}\n9.8.8 OEM actions\nOEM-specific actions appear in the JSON payload as properties of the Oem object, nested under an Actions property.\n\nThe name of the property that represents the action, which shall follow the form:\n\n#<ResourceType>.<Action>\n\nwhere\n\n<ResourceType> is the OEM resource type.\n<Action> is the action name.\n{\n   \"Actions\": {\n      \"Oem\": {\n         \"#Contoso_ABC_ComputerSystem.Ping\": {\n            \"target\": \"/redfish/v1/Systems/1/Actions/Oem/Contoso_ABC_ComputerSystem.Ping\"\n         },\n         \"#ContosoCustomerAComputerSystem.CustomPing\": {\n            \"target\": \"/redfish/v1/Systems/1/Actions/Oem/ContosoCustomerAComputerSystem.CustomPing\"\n         }\n      }\n   },\n   ...\n}\nThe URI of the OEM action in the target property shall be in the form:\n\n<ResourceUri>/Actions/Oem/<ResourceType>.<Action>\n\nwhere\n\n<ResourceUri> is the URI of the resource that supports invoking the action. For example, /redfish/v1/Systems/1/.\nActions is the name of the property containing the actions for a resource.\nOem is the name of the OEM property within the Actions property.\n<ResourceType>.<Action> is the OEM resource type followed by the action name. For example, Contoso_ABC_ComputerSystem.Ping.\n9.9 Payload annotations\n9.9.1 Payload annotations overview\nResources, objects within a resource, and properties may include additional annotations as properties with the name, in the format:\n\n[<PropertyName>]@<Namespace>.<TermName>\n\nwhere\n\n<PropertyName> is the name of the property to annotate. If absent, the annotation applies to the entire JSON object, which may be an entire resource.\n<Namespace> is the namespace that defines the annotation term.\n<TermName> is the annotation term to apply to the resource or property of the resource.\nServices shall limit the annotation usage to the odata, Redfish, and Message namespaces. The OData JSON Format Specification defines the odata namespace. The Redfish namespace is an alias for the RedfishExtensions.v1_0_0 namespace.\n\nThe client can get the definition of the annotation from the OData metadata document, the HTTP Link header, or may ignore the annotation entirely, but should not fail reading the resource due to unrecognized annotations, including new annotations that the Redfish namespace defines.\n\n9.9.2 Allowable values for strings\nServices may use the @Redfish.AllowableValues annotation to specify the list of allowable values for a string property or action parameter. The values of the annotation should only include those values that are both supported by the service and currently available as valid values for the particular instance of the property or action parameter. The annotation shall contain a JSON array of strings that define the allowable values for the property or action parameter.\n\nThe following example shows the FavoriteFruit property supports four values.\n\n{\n    \"FavoriteFruit\": \"Kiwi\",\n    \"FavoriteFruit@Redfish.AllowableValues\": [ \"Orange\", \"Pineapple\", \"Kiwi\", \"Starfruit\" ]\n}\n9.9.3 Allowable patterns for string values\nServices may use the @Redfish.AllowablePattern annotation to specify a pattern that describes the valid values for a string property or action parameter. The annotation shall contain a regular expression that describes the supported pattern for the property or action parameter. If a pattern is specified in the", "doc_id": "20e6e519-1841-4541-912d-e2a07b05d349", "embedding": null, "doc_hash": "3e78f098178655c7cd88bcfe01fc5580442274f26afb1af75adf38c45b46742d", "extra_info": null, "node_info": {"start": 170026, "end": 173497, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "ec393b6f-e846-4d4e-ab78-8459444bd0d3", "3": "a08be7dc-c197-4a16-bd59-9f8b6760ea7b"}}, "__type__": "1"}, "a08be7dc-c197-4a16-bd59-9f8b6760ea7b": {"__data__": {"text": "describes the supported pattern for the property or action parameter. If a pattern is specified in the schema definition for this property, this annotation may further restrict the allowable values, but shall not allow values which would violate the schema-defined pattern. Services shall not use the @Redfish.AllowablePattern for enumerations.\n\nThe following example shows the AssetTag property allows alphanumeric characters, colons, and dashes, and allows a string length up to 31 characters.\n\n{\n    \"AssetTag\": \"22HOU-34566\",\n    \"AssetTag@Redfish.AllowablePattern\": \"^[\\\\w:-]{0,31}$\"\n}\n9.9.4 Allowable values for numbers and durations\nServices may use the @Redfish.AllowableNumbers annotation to specify one or more ranges of allowable values and an optional incremental step value between valid values for a numeric property or action parameter or duration property or action parameter. The annotation shall contain an array of strings, each specifying a range of values and an optional step value. Each element in the array shall contain a number or a duration in the format:\n\n<min>:<max>:<step>\n\nwhere\n\n<min> is the supported value or the lowest value in an inclusive range.\n<max> is the highest value in an inclusive range.\n<step> is the incremental step value added to the <min> value in series within the inclusive range.\nIf the value does not contain : characters, the value specifies a single supported value.\n\nIf the value specifies a range and <min> is omitted, the minimum supported value shall be assumed to be a value of zero.\n\nIf the value specifies a range and :<step> is omitted, no step is defined for the supported range.\n\nThe following example shows the usage of the @Redfish.AllowableNumbers annotation for different properties. PacketSizeBytes supports a range of 1024 to 65536 in increments of 256. TemperatureThresholdCelsius supports a range of 0 to 50 with no step restrictions. ClockSpeedMHz supports 800, 1150, or 1600 to 5000 in increments of 100. TimeoutDuration supports a duration between 5 minutes and 24 hours, in 5 minute increments.\n\n{\n    \"PacketSizeBytes\": 2048,\n    \"PacketSizeBytes@Redfish.AllowableNumbers\": [ \"1024:65536:256\" ],\n    \"TemperatureThresholdCelsius\": 37,\n    \"TemperatureThresholdCelsius@Redfish.AllowableNumbers\": [ \":50\" ],\n    \"ClockSpeedMHz\": 2200,\n    \"ClockSpeedMHz@Redfish.AllowableNumbers\": [ \"800\", \"1150\", \"1600:5000:100\" ],\n    \"TimeoutDuration\": \"PT2H\",\n    \"TimeoutDuration@Redfish.AllowableNumbers\": [ \"PT5M:PT24H:PT5M\" ]\n}\n9.9.5 Extended information\nThe following clauses describe the methods of providing extended information:\n\nExtended object information\nExtended property information\n9.9.5.1 Extended object information\nTo specify object-level status information, services may annotate a JSON object with the @Message.ExtendedInfo annotation.\n\n{\n  \"@odata.id\": \"/redfish/v1/Managers/1/SerialInterfaces/1\",\n  \"@odata.type\": \"#SerialInterface.v1_0_0.SerialInterface\",\n  \"Name\": \"Managed Serial Interface 1\",\n  \"Description\": \"Management for Serial Interface\",\n  \"Status\": {\n    \"State\": \"Enabled\",\n    \"Health\": \"OK\"\n  },\n  \"InterfaceEnabled\": true,\n  \"SignalType\": \"Rs232\",\n  \"BitRate\": \"115200\",\n  \"Parity\": \"None\",\n  \"DataBits\": \"8\",\n  \"StopBits\": \"1\",\n  \"FlowControl\": \"None\",\n  \"ConnectorType\": \"RJ45\",\n  \"PinOut\": \"Cyclades\",\n  \"@Message.ExtendedInfo\": [{\n    \"MessageId\": \"Base.1.8.PropertyDuplicate\",\n    \"Message\": \"Indicates that a duplicate property was included in the request body.\",\n  ", "doc_id": "a08be7dc-c197-4a16-bd59-9f8b6760ea7b", "embedding": null, "doc_hash": "bfe68bc1ea3bca0cf820096ff54948aa51f0248bf716c2df033b997d53527bbd", "extra_info": null, "node_info": {"start": 173449, "end": 176923, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "20e6e519-1841-4541-912d-e2a07b05d349", "3": "b0e48c2f-e795-40c6-9312-26b9f21760d4"}}, "__type__": "1"}, "b0e48c2f-e795-40c6-9312-26b9f21760d4": {"__data__": {"text": "\"Indicates that a duplicate property was included in the request body.\",\n    \"RelatedProperties\": [\n      \"/InterfaceEnabled\"\n    ],\n    \"Severity\": \"Warning\",\n    \"MessageSeverity\": \"Warning\",\n    \"Resolution\": \"Remove the duplicate property from the request body and resubmit the request if the operation failed.\"\n  }]\n}\nThe property contains an array of message objects.\n\n9.9.5.2 Extended property information\nServices may use @Message.ExtendedInfo, prepended with the name of the property to annotate an individual property in a JSON object with extended information:\n\n{\n   \"@odata.id\": \"/redfish/v1/Managers/1/SerialInterfaces/1\",\n   \"@odata.type\": \"#SerialInterface.v1_0_0.SerialInterface\",\n   \"Name\": \"Managed Serial Interface 1\",\n   \"Description\": \"Management for Serial Interface\",\n   \"Status\": {\n      \"State\": \"Enabled\",\n      \"Health\": \"OK\"\n   },\n   \"InterfaceEnabled\": true,\n   \"SignalType\": \"Rs232\",\n   \"BitRate\": 115200,\n   \"Parity\": \"None\",\n   \"DataBits\": 8,\n   \"StopBits\": 1,\n   \"FlowControl\": \"None\",\n   \"ConnectorType\": \"RJ45\",\n   \"PinOut\": \"Cyclades\",\n   \"PinOut@Message.ExtendedInfo\": [{\n      \"MessageId\": \"Base.1.8.PropertyValueNotInList\",\n      \"Message\": \"The value Contoso for the property PinOut is not in the list of acceptable values.\",\n      \"Severity\": \"Warning\",\n      \"MessageSeverity\": \"Warning\",\n      \"Resolution\": \"Choose an enumeration list value that the implementation supports. Resubmit the request if the operation failed.\"\n   }]\n}\n9.9.6 Action info annotation\nThe @Redfish.ActionInfo term within the action representation conveys the parameter requirements and allowable values on parameters for actions. This term contains a URI to the ActionInfo resource.\n\nExample #ComputerSystem.Reset action with the @Redfish.ActionInfo annotation and resource:\n\n{\n   \"Actions\": {\n      \"#ComputerSystem.Reset\": {\n         \"target\": \"/redfish/v1/Systems/1/Actions/ComputerSystem.Reset\",\n         \"@Redfish.ActionInfo\": \"/redfish/v1/Systems/1/ResetActionInfo\"\n      }\n   },\n   ...\n}\nThe ResetActionInfo resource contains a more detailed description of the parameters and the supported values. This resource follows the ActionInfo schema definition.\n\n{\n   \"@odata.id\": \"/redfish/v1/Systems/1/ResetActionInfo\",\n   \"@odata.type\": \"#ActionInfo.v1_0_0.ActionInfo\",\n   \"Id\": \"ResetActionInfo\",\n   \"Name\": \"Reset Action Info\",\n   \"Parameters\": [{\n      \"Name\": \"ResetType\",\n      \"Required\": true,\n      \"DataType\": \"String\",\n      \"AllowableValues\": [\"On\", \"ForceOff\", \"ForceRestart\", \"Nmi\",\n         \"ForceOn\", \"PushPowerButton\"]\n   }]\n}\n9.9.7 Settings and settings apply time annotations\nSee the Settings resource clause.\n\n9.9.8 Operation apply time and operation apply time support annotations\nSee the Operation apply time clause.\n\n9.9.9 Maintenance window annotation\nThe settings apply time and operation apply time annotations enable an operation to be performed during a maintenance window. The @Redfish.MaintenanceWindow term at the root of a resource configures the start time and duration of a maintenance window for a", "doc_id": "b0e48c2f-e795-40c6-9312-26b9f21760d4", "embedding": null, "doc_hash": "be596c1067928d15e91f8398eb50843699180aab821df0ab9fc6b3a0060f55c8", "extra_info": null, "node_info": {"start": 176947, "end": 179998, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "a08be7dc-c197-4a16-bd59-9f8b6760ea7b", "3": "8709c34c-e7b0-432b-9cbf-523fbcfcdbc0"}}, "__type__": "1"}, "8709c34c-e7b0-432b-9cbf-523fbcfcdbc0": {"__data__": {"text": "at the root of a resource configures the start time and duration of a maintenance window for a resource.\n\nThe following example body for the /redfish/v1/Systems/1 resource configures the maintenance window to start at 2017-05-03T23:12:37-05:00 and last for 600 seconds.\n\n{\n   \"@odata.id\": \"/redfish/v1/Systems/1\",\n   \"@odata.type\": \"#ComputerSystem.v1_5_0.ComputerSystem\",\n   \"@Redfish.MaintenanceWindow\": {\n      \"@odata.type\": \"#Settings.v1_3_3.MaintenanceWindow\",\n      \"MaintenanceWindowStartTime\": \"2017-05-03T23:12:37-05:00\",\n      \"MaintenanceWindowDurationInSeconds\": 600\n   },\n   ...\n}\n9.9.10 Collection capabilities annotation\nResource collections may contain a collection capabilities annotation. The @Redfish.CollectionCapabilities term at the root of a resource collection shows what properties a client is allowed to use in a POST request for creating a resource.\n\nThe following ComputerSystemCollection example body contains the collection capabilities annotation. The UseCase property contains the ComputerSystemComposition value, and the CapabilitiesObject property contains the /redfish/v1/Systems/Capabilities value. The resource at /redfish/v1/Systems/Capabilities describes the POST request format for creating a ComputerSystem resource for compositions.\n\n{\n   \"@odata.id\": \"/redfish/v1/Systems\",\n   \"@odata.type\": \"#ComputerSystemCollection.ComputerSystemCollection\",\n   \"Name\": \"Computer System Collection\",\n   \"Members@odata.count\": 0,\n   \"Members\": [],\n   \"@Redfish.CollectionCapabilities\": {\n      \"@odata.type\": \"#CollectionCapabilities.v1_1_0.CollectionCapabilities\",\n      \"Capabilities\": [{\n         \"CapabilitiesObject\": {\n            \"@odata.id\": \"/redfish/v1/Systems/Capabilities\"\n         },\n         \"UseCase\": \"ComputerSystemComposition\",\n         \"Links\": {\n            \"TargetCollection\": {\n               \"@odata.id\": \"/redfish/v1/Systems\"\n            }\n         }\n      }]\n   }\n}\nThe CapabilitiesObject resource follows the same schema for the resource that the resource collection contains. It contains annotations to show which properties the client can use in the POST request body. Services may omit properties marked as required for the resource referenced by the CapabilitiesObject property, but may provide annotations for the property to express POST request body requirements. Table 21 describes the CapabilitiesObject resource annotations. These annotations describe which properties are required, optional, or if other rules are associated with the properties.\n\nTable 21 \u2014 CapabilitiesObject resource annotations\nAnnotation\tDescription\n<PropertyName>@Redfish.RequiredOnCreate\tRequired in the POST request body.\n<PropertyName>@Redfish.OptionalOnCreate\tNot required in the POST request body.\n<PropertyName>@Redfish.SetOnlyOnCreate\tCannot be modified after the resource is created.\n<PropertyName>@Redfish.UpdatableAfterCreate\tCan be modified after the resource is created.\n<PropertyName>@Redfish.AllowableValues\tCan be set to any of the listed values.\n@Redfish.RequestedCountRequired\tRequired in the POST request body for the corresponding object to indicate the number of requested object instances.\n\nUsed for composition requests.\n@Redfish.ResourceBlockLimits\tIndicates restrictions regarding quantities of ResourceBlock resources of a given type in the POST request body.\n\nUsed for composition requests.\nExample CapabilitiesObject resource:\n\n{\n   \"@odata.id\":", "doc_id": "8709c34c-e7b0-432b-9cbf-523fbcfcdbc0", "embedding": null, "doc_hash": "5a350c8f228de1298595260d8a12c89c6f13241c720da8db3013ebb4be49ff8c", "extra_info": null, "node_info": {"start": 179985, "end": 183395, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "b0e48c2f-e795-40c6-9312-26b9f21760d4", "3": "c5233735-ec9e-4079-b1fb-ed756eece8d2"}}, "__type__": "1"}, "c5233735-ec9e-4079-b1fb-ed756eece8d2": {"__data__": {"text": "CapabilitiesObject resource:\n\n{\n   \"@odata.id\": \"/redfish/v1/Systems/Capabilities\",\n   \"@odata.type\": \"#ComputerSystem.v1_8_0.ComputerSystem\",\n   \"Id\": \"Capabilities\",\n   \"Name\": \"Capabilities for the system collection\",\n   \"Name@Redfish.RequiredOnCreate\": true,\n   \"Name@Redfish.SetOnlyOnCreate\": true,\n   \"Description@Redfish.OptionalOnCreate\": true,\n   \"Description@Redfish.SetOnlyOnCreate\": true,\n   \"HostName@Redfish.OptionalOnCreate\": true,\n   \"HostName@Redfish.UpdatableAfterCreate\": true,\n   \"Links@Redfish.RequiredOnCreate\": true,\n   \"Links\": {\n      \"ResourceBlocks@Redfish.RequiredOnCreate\": true,\n      \"ResourceBlocks@Redfish.UpdatableAfterCreate\": true\n   },\n   \"@Redfish.ResourceBlockLimits\": {\n      \"MinCompute\": 1,\n      \"MaxCompute\": 1,\n      \"MaxStorage\": 8\n   }\n}\n9.9.11 Requested count and allow over-provisioning annotations\nTable 22 describes the @Redfish.RequestedCount and @Redfish.AllowOverprovisioning annotations.\n\nClients use these annotations in composition requests to define the number of resource to allocate and to indicate whether the Redfish service can provision more resources than the client requests:\n\nTable 22 \u2014 RequestCount and AllowOverprovisioning annotations\nAnnotation\tDescription\n@Redfish.RequestedCount\tNumber of requested resources.\n@Redfish.AllowOverprovisioning\tBoolean. If true, the service may provision more resources than the @Redfish.RequestedCount annotation requests. Default is false.\nExample client request for at least four and possibly more Processor resources:\n\n{\n   \"Processors\": {\n      \"Members\": [{\n         \"@Redfish.RequestedCount\": 4,\n         \"@Redfish.AllowOverprovisioning\": true\n      }]\n   },\n   ...\n}\n9.9.12 Zone affinity annotation\nThe zone affinity annotation is used by clients in composition requests to indicate the components for the composition come from the specified resource zone. The @Redfish.ZoneAffinity term in the request body contains the value of the Id property of the requested resource zone.\n\nExample client request for components to be allocated from the resource zone with the Id property containing 1:\n\n{\n   \"@Redfish.ZoneAffinity\": \"1\",\n   ...\n}\n9.9.13 Supported certificates annotation\nResource collections of type CertificateCollection should contain a supported certificates annotation. The @Redfish.SupportedCertificates term at the root of a resource collection shows the different certificate formats allowed in the resource collection.\n\nExample CertificateCollection that only supports PEM style certificates:\n\n{\n   \"@odata.id\": \"/redfish/v1/Managers/BMC/NetworkProtocol/HTTPS/Certificates\",\n   \"@odata.type\": \"#CertificateCollection.CertificateCollection\",\n   \"Name\": \"Certificate collection\",\n   \"Members@odata.count\": 1,\n   \"Members\": [{\n      \"@odata.id\": \"/redfish/v1/Managers/BMC/NetworkProtocol/HTTPS/Certificates/1\"\n   }],\n   \"@Redfish.SupportedCertificates\": [\"PEM\"]\n}\n9.9.14 Deprecated annotation\nServices may annotate properties with @Redfish.Deprecated if the schema definition has the property marked as deprecated.\n\nExample deprecated property:\n\n{\n   \"VendorID\": \"0xABCD\",\n   \"VendorID@Redfish.Deprecated\": \"This property has been deprecated in favor of ModuleManufacturerID.\",\n   ...\n}\n9.9.15 Writable properties annotation\nServices may annotate", "doc_id": "c5233735-ec9e-4079-b1fb-ed756eece8d2", "embedding": null, "doc_hash": "d70ff9464da7c27539d76a82f81fe0f06359bac5e60dbe2e65b328c096ec4c1c", "extra_info": null, "node_info": {"start": 183430, "end": 186698, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "8709c34c-e7b0-432b-9cbf-523fbcfcdbc0", "3": "93ca8501-a8c1-4241-b9b3-aeee3cd42029"}}, "__type__": "1"}, "93ca8501-a8c1-4241-b9b3-aeee3cd42029": {"__data__": {"text": " ...\n}\n9.9.15 Writable properties annotation\nServices may annotate resources or objects with @Redfish.WriteableProperties to list the properties in the resource or object whose value may be changed by a modification request. This annotation shall only list those properties that are defined as read-write in schema, are implemented as read-write by the service, and can be modified given the current configuration of the resource. When present at the root of a resource, the properties listed shall include only writable properties at the root level. Writable properties within objects shall be shown in additional annotation instances within the object. For arrays of objects, if the annotation appears in only the first element of the array, the values shall apply to all elements of the array.\n\nNote: While \"writable\" is the preferred spelling of the word, the name of the annotation in payloads contains \"writeable\".\n\nExample writable properties annotations that shows writable properties at the root level, and within each element of an array of objects:\n\n{\n    \"UserName\": \"John Smith\",\n    \"Alias\": \"Major Goofball\",\n    \"FavoriteFruit\": \"Pineapple\",\n    \"@Redfish.WriteableProperties\": [ \"Alias\", \"FavoriteFruit\" ],\n    \"Pets\": [\n        {\n            \"PetName\": \"Waffles\",\n            \"PetType\": \"Donkey\",\n            \"Friendly\": true,\n            \"@Redfish.WriteableProperties\": [ \"Friendly\" ]\n        },\n        {\n            \"PetName\": \"Fluffy\",\n            \"PetType\": \"Snake\",\n            \"Friendly\": false\n        }\n    ]\n}\n9.10 Settings resource\nA settings resource represents the future intended state of a resource. Some resources have properties that can be updated and the updates take place immediately. However, some properties need to be updated at a future point in time, such as after a system reset. While the active resource represents the current state, the settings resource represents the future intended state.\n\nFor resources that support a future intended state, the response shall contain a property with the @Redfish.Settings payload annotation. When a settings annotation is used, the following conditions shall apply:\n\nThe settings resource shall be of the same schema definition as the active resource.\nThe settings resource should contain a subset of updatable properties from the active resource. Additionally, it shall contain required properties, which are always mandatory.\nThe settings resource shall not contain the @Redfish.Settings annotation.\nThe settings resource may contain the @Redfish.SettingsApplyTime annotation.\nThe URI for the settings resource shall reflect that it is subordinate to the active resource. The URI should be in the form <BaseUri>/Settings or <BaseUri>/SD where <BaseUri> is the URI of the active resource.\nThe settings resource shall contain the properties that are updated at a future point in time. For resources that support a future intended state, Table 23 describes the behavior of supported properties in the resource and settings resource that a service should support.\n\nTable 23 \u2014 Active resource and settings resource property behavior\nProperty\tActive resource behavior\tSettings resource behavior\nRead-only, required.\tReturned in the resource response to a GET request.\tReturned in the settings resource response to a GET request.\nRead-only, not required.\tReturned in the resource response to a GET request.\tNot returned in the settings resource response to a GET request.\nWritable, updates immediately, but not at a future point in time.\tActive value returned in the resource response to a GET request.\nModification requests change the active value immediately.\tNot returned in the settings resource response to a GET request.\nModification requests are rejected.\nWritable, updates immediately or at a future point in time.\tActive value returned in the resource response to a GET request.\nModification requests change the active value immediately.\tFuture value returned in the settings resource response to a GET", "doc_id": "93ca8501-a8c1-4241-b9b3-aeee3cd42029", "embedding": null, "doc_hash": "078223b81402bddcfddaf01af42308d96a86ed0506f4a3a256b1cd485bf46c31", "extra_info": null, "node_info": {"start": 186682, "end": 190675, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "c5233735-ec9e-4079-b1fb-ed756eece8d2", "3": "19e15187-1eab-44da-8d42-c3b8e16dc0ef"}}, "__type__": "1"}, "19e15187-1eab-44da-8d42-c3b8e16dc0ef": {"__data__": {"text": "change the active value immediately.\tFuture value returned in the settings resource response to a GET request if a future value is pending, otherwise not returned.\nModification requests change the future value.\nWritable, updates at a future point in time, but not immediately.\tActive value returned in the resource response to a GET request.\nModification requests are rejected.\tFuture value returned in the settings resource response to a GET request.\nModification requests change the future value.\nThe @Redfish.Settings annotation includes several properties that help clients monitor when the service has consumed the active resource and determine the success or failure of applying the values.\n\nThe Messages property is a collection of messages that represent the results of the last time the values of the settings resource were applied.\nThe ETag property contains the ETag of the settings resource that was last applied. Immediate updates made directly to the active resource are not reflected in it.\nThe Time property indicates the time when the settings resource was last applied. Immediate updates made directly to the active resource are not reflected in it.\nThe following active resource example body supports a settings resource. A client can use the SettingsObject property to locate the URI of the settings resource.\n\n{\n   \"@Redfish.Settings\": {\n      \"@odata.type\": \"#Settings.v1_3_3.Settings\",\n      \"SettingsObject\": {\n         \"@odata.id\": \"/redfish/v1/Systems/1/Bios/SD\"\n      },\n      \"Time\": \"2017-05-03T23:12:37-05:00\",\n      \"ETag\": \"\\\"A89B031B62\\\"\",\n      \"Messages\": [{\n         \"MessageId\": \"Base.1.8.PropertyNotWritable\",\n         \"RelatedProperties\": [\"/Attributes/ProcTurboMode\"]\n      }]\n   },\n   ...\n}\nIf a service enables a client to indicate when to apply settings:\n\nThe settings resource shall contain a property with the @Redfish.SettingsApplyTime annotation.\nOnly settings resources shall contain the @Redfish.SettingsApplyTime annotation.\nThe @Redfish.Settings annotation in the active resource shall contain the SupportedApplyTimes property for showing the allowable values for ApplyTime within @Redfish.SettingsApplyTime.\nClients can modify the @Redfish.SettingsApplyTime annotation to indicate when to apply the settings.\nIn the following example request, the client indicates that the settings resource values are applied on reset during the specified maintenance window:\n\n{\n   \"@Redfish.SettingsApplyTime\": {\n      \"@odata.type\": \"#Settings.v1_3_3.PreferredApplyTime\",\n      \"ApplyTime\": \"InMaintenanceWindowOnReset\",\n      \"MaintenanceWindowStartTime\": \"2017-05-03T23:12:37-05:00\",\n      \"MaintenanceWindowDurationInSeconds\": 600\n   },\n   ...\n}\n9.11 Special resource situations\n9.11.1 Overview\nResources need to exhibit common semantic behavior whenever possible. This can be difficult in some situations discussed in this clause.\n\n9.11.2 Absent resources\nResources may be absent or their state unknown at the time a client requests information about that resource. For resources that represent removable or optional components, absence provides useful information to clients because it indicates a capability, such as an empty PCIe slot, DIMM socket, or drive bay, that would not be apparent if the resource simply did not exist.\n\nThis also applies to resources that represent a limited number of items or unconfigured capabilities within an implementation, but this usage should be applied sparingly and should not apply to resources limited in quantity due to arbitrary limits. For example, an implementation that limits SoftwareInventory to a maximum of 20 items should not populate 18 absent resources when only two items are present.\n\nFor resources that provide useful data in an absent state and where the URI is expected to remain", "doc_id": "19e15187-1eab-44da-8d42-c3b8e16dc0ef", "embedding": null, "doc_hash": "d1a7c9ef36b902073e049a448559296d22e9f96283ad5831b38b00bf92d80bb9", "extra_info": null, "node_info": {"start": 190649, "end": 194429, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "93ca8501-a8c1-4241-b9b3-aeee3cd42029", "3": "0aea4aee-6978-4d4b-8f83-1d952c6a7577"}}, "__type__": "1"}, "0aea4aee-6978-4d4b-8f83-1d952c6a7577": {"__data__": {"text": "that provide useful data in an absent state and where the URI is expected to remain constant, such as when a DIMM is removed from a memory socket, the resource should exist and should return the Absent value for the State property in the Status object.\n\nIn this circumstance, any required properties that have no known value shall be represented as null. Properties whose support is based on the configuration choice or the type of component installed, and therefore unknown while in the absent state, should not be returned. Likewise, subordinate resources for an absent resource should not be populated until their support can be determined. For example, the Power and Thermal resources under a Chassis resource should not exist for an absent Chassis.\n\nClient software should be aware that when absent resources are later populated, the updated resource may represent a different configuration or physical item, and previous data, including read-only properties, obtained from that resource may be invalid. For example, the Memory resource shows details about an single DIMM socket and the installed DIMM. When that DIMM is removed, the Memory resource remains as an absent resource to indicate the empty DIMM socket. Later, a new DIMM is installed in that socket, and the Memory resource represents data about this new DIMM, which could have completely different characteristics.\n\n9.12 Registries\nRegistry resources assist the client in interpreting Redfish resources beyond the Redfish schema definitions. To get more information about a resource, event, message, or other item, use an identifier to search registries. This information can include other properties, property restrictions, and the like. Registries are themselves resources.\n\nTable 24 describes the types of registries that Redfish supports:\n\nTable 24 \u2014 Registries\nRegistry\tDescription\tSee\nBIOS\tDetermines the semantics of each property in a BIOS or BIOS settings resource. Because BIOS information can vary from platform to platform, Redfish cannot define a fixed schema for these values. BIOS registries should be assigned unique identifiers to allow users to match a given registry with compatible products.\n\nThis registry contains both property descriptions and other information, such as data type, allowable values, and user menu information.\t\nMessage\tConstructs a message from a MessageId and other message information to present to an end user. The messages in these registries appear in both eventing and error responses to operations.\n\nThis registry is the most common type of registry.\t\nError responses\nEventing\nPrivilege\tMaps the resources in a Redfish service to the privileges that can complete specified operations against those resources.\n\nA client can use this information to:\nDetermine which roles should have specific privileges.\nMap accounts to those roles so that the accounts can complete operations on Redfish resources.\nPrivilege model\n9.13 Schema annotations\n9.13.1 Schema annotations overview\nThe schema definitions of the data model use schema annotations to provide additional documentation for developers. This clause describes the different types of schema annotations that the Redfish data model uses. For information about how each of the annotations are implemented in their respective schema languages, see the Schema definition languages clause.\n\n9.13.2 Description annotation\nThe description annotation can be applied to any type, property, action, or parameter to provide a description of Redfish schema elements suitable for end users or user interface help text.\n\nAll schemas that are published or republished by DMTF's Redfish Forum shall include a description annotation on the following schema definitions:\n\nRedfish types\nProperties\nReference properties\nEnumeration values\nResources and resource collections\nStructured types\n9.13.3 Long description annotation\nThe long description annotation can be applied to any type, property, action, or parameter to provide a formal, normative specification of the schema element.\n\nWhen the long descriptions in the Redfish schema contain normative language, the service shall be required to conform with the statement.\n\nAll schemas that are published or republished by DMTF's Redfish Forum shall include a long description annotation on the following schema definitions:\n\nRedfish types\nProperties\nReference properties\nResources and resource collections\nStructured types\n9.13.4 Resource capabilities annotation\nThe resource capabilities annotation can", "doc_id": "0aea4aee-6978-4d4b-8f83-1d952c6a7577", "embedding": null, "doc_hash": "0f0156ff731d4ff164da62475b7101f4c7746473574d8faefe79419c30cc3800", "extra_info": null, "node_info": {"start": 194449, "end": 198949, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "19e15187-1eab-44da-8d42-c3b8e16dc0ef", "3": "345a7f0b-3f6d-40d8-8c95-f996b7ef7035"}}, "__type__": "1"}, "345a7f0b-3f6d-40d8-8c95-f996b7ef7035": {"__data__": {"text": "types\n9.13.4 Resource capabilities annotation\nThe resource capabilities annotation can be applied to resources and resource collections to express the different type of HTTP operations a client can invoke on the given resource or resource collection.\n\nInsert capabilities indicate whether a client can perform a POST request on the resource to create a resource.\nUpdate capabilities indicate whether a client can perform a PATCH or PUT request on the resource.\nDelete capabilities indicate whether a client can perform a DELETE request on the resource.\nA service may implement a subset of the capabilities that are allowed on the resource or resource collection.\nAll schemas that are published or republished by DMTF's Redfish Forum for resources and resource collections shall include resource capabilities annotations.\n\n9.13.5 Resource URI patterns annotation\nThe resource URI patterns annotation expresses the valid URI patterns for a resource or resource collection.\n\nThe strings for the URI patterns may use { and } characters to express parameters within a given URI pattern. Items between the { and } characters are treated as identifiers within the URI for given instances of a Redfish resource. Clients interpret this as a string to be replaced to access a given resource. A URI pattern may contain multiple identifier terms to support multiple levels of nested resource collections. The identifier term in the URI pattern shall match the Id string property for the corresponding resource, or the MemberId string property for the corresponding object within a resource. The process for forming the strings that are concatenated to form the URI pattern are in the URI naming rules clause.\n\nThe following string is an example URI pattern that describes a ManagerAccount resource: /redfish/v1/AccountService/Accounts/{ManagerAccountId}\n\nUsing the previous example, {ManagerAccountId} is replaced by the Id property of the corresponding ManagerAccount resource. If the Id property for a ManagerAccount resource is John, the full URI for that resource is /redfish/v1/AccountService/Accounts/John.\n\nThe URI patterns are constructed based on the formation of the resource tree. When constructing the URI pattern for a subordinate resource, the URI pattern for the current resource is used and appended. For example, the RoleCollection resource is subordinate to AccountService. Because the URI pattern for AccountService is /redfish/v1/AccountService, the URI pattern for the RoleCollection resource is /redfish/v1/AccountService/Roles.\n\nIn some cases, the subordinate resource is found inside of a structured property of a resource. In these cases, the name of the structured property appears in the URI pattern for the subordinate resource. For example, the CertificateCollection resource is subordinate to the ManagerNetworkProtocol resource from the HTTPS property. Because the URI pattern for ManagerNetworkProtocol is /redfish/v1/Managers/{ManagerId}/NetworkProtocol, the URI pattern for the CertificateCollection resource is /redfish/v1/Managers/{ManagerId}/NetworkProtocol/HTTPS/Certificates.\n\nAll schemas that are published or republished by DMTF's Redfish Forum for resources and resource collections shall be annotated with the resource URI patterns annotation.\n\nAll Redfish resources and Redfish resource collections implemented by a service shall match the URI pattern described by the resource URI patterns annotation for their given definition.\n\n9.13.6 Additional properties annotation\nThe additional properties annotation specifies whether a type can contain additional properties outside of those defined in the schema. Types that do not support additional properties shall not contain properties beyond those described in the schema.\n\n9.13.7 Permissions annotation\nThe permissions annotation specifies whether a client can modify the value of a property, or if the property is read-only.\n\nA service can implement a modifiable property as read-only.\n\nThe value of a write-only property, such as Password, cannot be read, and shall be null in responses.\n\nAll schemas that are published or republished by DMTF's Redfish Forum shall include a permissions annotation for all properties that are not structured properties.\n\n9.13.8 Required annotation\nThe required annotation specifies whether a service needs to support a property. Required properties shall be annotated with the required annotation. All other properties are optional.\n\n9.13.9 Required on create annotation\nThe required on create annotation specifies that a property is required to be provided by", "doc_id": "345a7f0b-3f6d-40d8-8c95-f996b7ef7035", "embedding": null, "doc_hash": "645e58f4290b66b7862982d76b138eeadb614d06e1932b2a8a0cba04f334a0c3", "extra_info": null, "node_info": {"start": 198939, "end": 203516, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "0aea4aee-6978-4d4b-8f83-1d952c6a7577", "3": "80a40057-da97-40d7-9284-10e5852de8b4"}}, "__type__": "1"}, "80a40057-da97-40d7-9284-10e5852de8b4": {"__data__": {"text": "annotation\nThe required on create annotation specifies that a property is required to be provided by the client on creation of the resource. Properties not annotated with the required on create annotation are not required to be provided by the client on a create operation.\n\n9.13.10 Units of measure annotation\nIn addition to following the naming rules, properties representing units of measure shall be annotated with the units of measure annotation to specify the units of measurement for the property.\n\nThe value of the annotation shall be a string that contains the case-sensitive \"(c/s)\" symbol of the unit of measure as listed in the Unified Code for Units of Measure (UCUM), unless the symbolic representation does not reflect common usage. If the unit in common usage is not available in UCUM, curly braces should wrap the value, such as {value}, to follow UCUM parsing rules. For example, RPM is commonly used to report fan speeds in revolutions-per-minute, and the preferred representation in UCUM is {rev}/min, but the value {RPM} is acceptable. For units with prefixes, the case-sensitive (c/s) symbol for the prefix as listed in UCUM should be prepended to the unit symbol. For example, Mebibyte (1024^2 bytes), which has the UCUM Mi prefix and By symbol, would use MiBy as the value for the annotation. For values that also include rate information, such as megabits per second, the rate unit's symbol should be appended and use a slash (/) character as a separator. For example, Mbit/s.\n\nDEPRECATED: Previous versions of this specification recommended RPM as a commonly used unit of measure for certain properties. New recommendations are provided that follow UCUM parsing rules.\n\n9.13.11 Expanded resource annotation\nThe expanded resource annotation can be applied to a reference property to specify that the default behavior for the service is to include the contents of the related resource or resource collection in responses. This behavior follows the same semantics of the expand query parameter with a level of 1.\n\nReference properties annotated with this term shall be expanded by the service, even if not requested by the client. A service may page resource collections.\n\n9.13.12 Owning entity annotation\nThe owning entity annotation can be applied to a schema to specify the name of the entity responsible for development, publication, and maintenance of a given schema.\n\n9.13.13 Deprecated annotation\nThe deprecated annotation specifies if a property, enumeration, or other schema element has been deprecated. Schema elements marked as deprecated contain a schema version that shows when the element was deprecated, as well as text that specifies the favored approach.\n\nThe deprecated annotation also specifies if resource URI patterns have been deprecated. Deprecated resource URI patterns shall also be included in the resource URI patterns annotation.\n\nExisting and new implementations may use deprecated schema elements or URIs, but they should move to the favored approach. Deprecated schema elements may be implemented to achieve backwards compatibility. Deprecated schema elements may be removed from the next major version of the schema.\n\n9.13.14 URI segment annotation\nThe URI segment annotation can be applied to a reference property to specify the segment appended to the URI of the resource when constructing the URI of a subordinate resource if the segment differs from the property name. For more information, see the URI naming rules clause.\n\n9.14 Versioning\nAs stated previously, a resource can be an individual entity or a resource collection, which acts as a container for a set of resources.\n\nA resource collection does not contain any version information because it defines a single Members property, and the overall collection definition never grows over time.\n\nA resource has both unversioned and versioned definitions.\n\nReferences from other resources use the unversioned definition of a resource to ensure no version dependencies exist between the definitions. The unversioned definition of a resource contains no property information about the resource.\n\nThe versioned definition of a resource contains a set of properties, actions, and other definitions associated with the resource. The version of a resource follows the", "doc_id": "80a40057-da97-40d7-9284-10e5852de8b4", "embedding": null, "doc_hash": "882e03235c7d8745af732da307b57739154b249f2db9d216ed67d07f04c981fe", "extra_info": null, "node_info": {"start": 203510, "end": 207783, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "345a7f0b-3f6d-40d8-8c95-f996b7ef7035", "3": "4119fa5b-f399-4c71-a8ac-f2b4c4ad2798"}}, "__type__": "1"}, "4119fa5b-f399-4c71-a8ac-f2b4c4ad2798": {"__data__": {"text": "actions, and other definitions associated with the resource. The version of a resource follows the format:\n\nv<X>.<Y>.<Z>\n\nwhere\n\n<X> is an integer that represents the major version. Indicates a backward-incompatible change.\n<Y> is an integer that represents the minor version. Indicates a minor update. Redfish introduces new functionality but does not remove any functionality. The minor version preserves compatibility with earlier minor versions. For example, a new property introduces a new minor version of the resource.\n<Z> is an integer that represents the errata version. Indicates a fix in an earlier version. For example, a fix to a schema annotation on a property introduces an errata version of the resource.\n9.15 Localization\nThe creation of separate localized copies of Redfish schemas and registries is allowed and encouraged. Localized schema and registry files may be submitted to DMTF for republication in the Redfish schema repository.\n\nProperty names, parameter names, and enumeration values in the JSON response payload are never localized but translated copies of those names may be provided as additional annotations in the localized schema for use by client applications. A separate file for each localized schema or registry shall be provided for each supported language. The English-language versions of Redfish schemas and registries shall be the normative versions, and alterations of meaning due to translation in localized versions of schemas and registries shall be forbidden.\n\nSchemas and registries in non-English languages shall use the appropriate schema annotations to identify their language. Descriptive property, parameter, and enumeration text not translated into the specified language shall be removed from localized versions. This removal enables software and tools to combine normative and localized copies, especially for minor schema version differences.\n\n10 File naming and publication\nFor consistency in publication and to enable programmatic access, all Redfish-related files shall follow a set of rules to construct the name of each file. The Schema definition languages clause describes the file name construction rules, while the following clauses describe the construction rules for other file types.\n\n10.1 Registry file naming\nRedfish message registry files, privilege registry files, and BIOS attribute registry files shall use the registry name to construct the file name, in this format:\n\n<RegistryName>.<MajorVersion>.<MinorVersion>.<Errata>.json\n\nFor example, the file name of the Base Message Registry v1.0.2 is Base.1.0.2.json.\n\nThe registry name should be unique to avoid conflict with other registry files. The clause OEM registries describes registry name to use for OEM registry files.\n\n10.2 Profile file naming\nThe document that describes a profile follows the Redfish schema file naming conventions. The file name format for profiles shall be:\n\n<ProfileName>.v<MajorVersion>_<MinorVersion>_<Errata>.json\n\nFor example, the file name of the BasicServer profile v1.2.0 is BasicServer.v1_2_0.json. The file name shall include the profile name and version, which matches those property values within the document.\n\n10.3 Dictionary file naming\nThe binary file describing a Redfish Device Enablement dictionary follows the Redfish schema file naming conventions for the schema definition language that the dictionary is converted from. Because a single dictionary file contains all minor revisions of the schema, only the major version appears in the file name. The file names for Dictionaries shall be formatted as:\n\n<DictionaryName>_v<MajorVersion>.dict\n\nFor example, the file name of the Chassis dictionary v1.2.0 is Chassis_v1.dict.\n\n10.4 Localized file naming\nLocalized schemas and registries shall follow the same file naming conventions as the English language versions. When multiple localized copies are present in a repository and which have the same file name, files in languages other than English shall be organized into sub-folders named to match the ISO 639-1 language code for those files. English language files may be duplicated in an en sub-folder for consistency.\n\n10.5", "doc_id": "4119fa5b-f399-4c71-a8ac-f2b4c4ad2798", "embedding": null, "doc_hash": "948935e32d278f9529caa22f4095b476fa584cbb9e601127453be7dcbf9f640b", "extra_info": null, "node_info": {"start": 207786, "end": 211935, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "80a40057-da97-40d7-9284-10e5852de8b4", "3": "b2b1f2f7-7b51-4eef-97c5-77529de5668c"}}, "__type__": "1"}, "b2b1f2f7-7b51-4eef-97c5-77529de5668c": {"__data__": {"text": "be duplicated in an en sub-folder for consistency.\n\n10.5 DMTF Redfish file repository\nAll Redfish schemas, registries, dictionaries, and profiles published or republished by DMTF's Redfish Forum are available from the DMTF website for download. Programs may use the following durable URLs to access the repository. Programs incorporating remote repository access should implement a local cache to reduce latency, program requirements for Internet access and undue traffic burden on DMTF's website.\n\nOrganizations creating Redfish-related files such as OEM schemas, Redfish interoperability profiles, or message registries are encouraged to use the form at https://redfish.dmtf.org/redfish/portal to submit those files to DMTF for republication in DMTF's Redfish file repository.\n\nTable 25 describes how files are organized on the site:\n\nTable 25 \u2014 Redfish file repository\nURL\tFolder contents\nredfish.dmtf.org/schemas\tCurrent (most recent minor or errata) release of each schema file in CSDL, JSON Schema, and/or OpenAPI formats.\nredfish.dmtf.org/schemas/v1\tDurable URL for programmatic access to all v1.xx schema files. Every v1.xx minor or errata release of each schema file in CSDL, JSON Schema, OpenAPI formats.\nredfish.dmtf.org/schemas/v1/{code}\tDurable URL for programmatic access to localized v1.xx schema files. Localized schemas are organized in sub-folders using the two-character ISO 639-1 language code as the {code} segment.\nredfish.dmtf.org/schemas/archive\tSub-folders contain schema files specific to a particular version release.\nredfish.dmtf.org/registries\tCurrent (most recent minor or errata) release of each registry file.\nredfish.dmtf.org/registries/v1\tDurable URL for programmatic access to all v1.xx registry files. Every v1.xx minor or errata release of each registry file.\nredfish.dmtf.org/registries/v1/{code}\tDurable URL for programmatic access to localized v1.xx registry files. Localized schemas are organized in sub-folders using the two-character ISO 639-1 language code as the {code} segment.\nredfish.dmtf.org/registries/archive\tSub-folders contain registry files specific to a particular version release.\nredfish.dmtf.org/profiles\tCurrent release of each Redfish interoperability profile (.json) file and associated documentation.\nredfish.dmtf.org/profiles/v1\tDurable URL for programmatic access to all v1.xx Redfish interoperability profile (.json) files.\nredfish.dmtf.org/profiles/archive\tSub-folders contain profile files specific to a particular profile version or release.\nredfish.dmtf.org/dictionaries\tDurable URL for programmatic access to all v1.xx Redfish Device Enablement dictionary files.\nredfish.dmtf.org/dictionaries/v1\tDurable URL for programmatic access to all v1.xx Redfish Device Enablement dictionary files.\nredfish.dmtf.org/dictionaries/archive\tSub-folders contain dictionary files specific to a particular version release.\n11 Schema definition languages\nIndividual resources and their dependent types and actions are defined within a Redfish schema document. This clause describes how these documents are constructed in the following formats:\n\nOData Common Schema Definition Language\nJSON Schema\nOpenAPI\n11.1 OData Common Schema Definition Language\n11.1.1 OData Common Schema Definition Language overview\nOData Common Schema Definition Language (CSDL) is an XML schema format defined by the OData CSDL Specification. The following clause describes how Redfish uses CSDL to describe resources and resource collections.\n\n11.1.2 File naming conventions for CSDL\nRedfish CSDL schema files shall be named using the resource type name for the schema, followed", "doc_id": "b2b1f2f7-7b51-4eef-97c5-77529de5668c", "embedding": null, "doc_hash": "a0deb293de78c2840bd4c4350c8bcb1c4555113ee7e4d47a52dcceb9ab5739c2", "extra_info": null, "node_info": {"start": 211971, "end": 215577, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "4119fa5b-f399-4c71-a8ac-f2b4c4ad2798", "3": "bd0fefb4-9eaa-4174-8337-bd1aa613f38d"}}, "__type__": "1"}, "bd0fefb4-9eaa-4174-8337-bd1aa613f38d": {"__data__": {"text": "CSDL schema files shall be named using the resource type name for the schema, followed by _v and the major version of the schema. Because a single CSDL schema file contains all minor revisions of the schema, only the major version appears in the file name. The file name shall be formatted as:\n\n<ResourceType>_v<MajorVersion>.xml\n\nFor example, version 1.3.0 of the Chassis schema is Chassis_v1.xml.\n\n11.1.3 Core CSDL files\nTable 26 describes the core CSDL files:\n\nTable 26 \u2014 Core CSDL files\nFile\tDescription\nRedfishError_v1.xml\tPayload definition of the Redfish error response.\nRedfishExtensions_v1.xml\tAll definitions for Redfish types and annotations.\nResource_v1.xml\tAll base definitions for resources, resource collections, and common properties, such as Status.\n11.1.4 CSDL format\nThe outer element of the OData schema representation document shall be the Edmx element, and shall have a Version attribute with a value of 4.0.\n\n<edmx:Edmx xmlns:edmx=\"http://docs.oasis-open.org/odata/ns/edmx\" Version=\"4.0\">\n  <!-- edmx:Reference and edmx:DataService elements go here -->\n</edmx:Edmx>\nThe Referencing other CSDL files and CSDL data services clauses describe the items that are found within the Edmx element.\n\n11.1.4.1 Referencing other CSDL files\nCSDL files may use Reference tags to reference types defined in other CSDL documents.\n\nThe Reference element uses the Uri attribute to specify a CSDL file. The Reference element also contains one or more Include tags that specify the Namespace attribute containing the types to be referenced, along with an optional Alias attribute for that namespace.\n\nType definitions generally reference the OData and Redfish namespaces for common type annotation terms. Redfish CSDL files shall contain the Alias attribute on the following namespaces:\n\nOrg.OData.Core.V1 is aliased as OData.\nOrg.OData.Measures.V1 is aliased as Measures.\nRedfishExtensions.v1_0_0 is aliased as Redfish.\nValidation.v1_0_0 is aliased as Validation.\n<edmx:Reference\n  Uri=\"http://docs.oasis-open.org/odata/odata/v4.0/cs01/vocabularies/Org.OData.Core.V1.xml\">\n  <edmx:Include Namespace=\"Org.OData.Core.V1\" Alias=\"OData\"/>\n</edmx:Reference>\n<edmx:Reference\n  Uri=\"http://docs.oasis-open.org/odata/odata/v4.0/os/vocabularies/Org.OData.Measures.V1.xml\">\n <edmx:Include Namespace=\"Org.OData.Measures.V1\" Alias=\"Measures\"/>\n</edmx:Reference>\n<edmx:Reference Uri=\"http://redfish.dmtf.org/schemas/v1/RedfishExtensions_v1.xml\">\n  <edmx:Include Namespace=\"RedfishExtensions.v1_0_0\" Alias=\"Redfish\"/>\n  <edmx:Include Namespace=\"Validation.v1_0_0\" Alias=\"Validation\"/>\n</edmx:Reference>\n<edmx:Reference Uri=\"http://redfish.dmtf.org/schemas/v1/Resource_v1.xml\">\n  <edmx:Include Namespace=\"Resource\"/>\n  <edmx:Include Namespace=\"Resource.v1_0_0\"/>\n</edmx:Reference>\n11.1.4.2 CSDL data services\nDefine structures, enumerations, and other definitions in CSDL within a namespace. Use a Schema tag to define the schema and use the Namespace attribute to declare the name of the namespace.\n\nRedfish uses namespaces to differentiate different versions of the schema. CSDL enables structures to inherit from other structures, which enables newer namespaces to define only the changes. The Elements of CSDL namespaces clause describes this", "doc_id": "bd0fefb4-9eaa-4174-8337-bd1aa613f38d", "embedding": null, "doc_hash": "7b4c2741720d56137bb07b98f0ce937a92d2b0a5cd6ca5a47fd5104780aea303", "extra_info": null, "node_info": {"start": 215555, "end": 218790, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "b2b1f2f7-7b51-4eef-97c5-77529de5668c", "3": "19752d92-fb6f-4105-9725-6850307ae3e3"}}, "__type__": "1"}, "19752d92-fb6f-4105-9725-6850307ae3e3": {"__data__": {"text": "to define only the changes. The Elements of CSDL namespaces clause describes this behavior.\n\nNamespaces containing unversioned resource and resource collection definitions shall use the resource type to name the namespace, in this format:\n\n<ResourceType>\n\nFor example, the unversioned namespace of the Chassis resource is Chassis.\n\nNamespaces containing versioned resource definitions shall use the resource type to name the namespace, in this format:\n\n<ResourceType>.v<MajorVersion>_<MinorVersion>_<Errata>\n\nFor example, the version 1.3.0 namespace of the Chassis resource is Chassis.v1_3_0.\n\nThe Schema element is a child of the DataServices element, which is a child of the Edmx element:\n\n<edmx:DataServices>\n  <Schema xmlns=\"http://docs.oasis-open.org/odata/ns/edm\" Namespace=\"MyTypes.v1_0_0\">\n    <!-- Type definitions for version 1.0.0 of MyTypes go here -->\n  </Schema>\n  <Schema xmlns=\"http://docs.oasis-open.org/odata/ns/edm\" Namespace=\"MyTypes.v1_1_0\">\n    <!-- Type definitions for version 1.1.0 of MyTypes go here -->\n  </Schema>\n</edmx:DataServices>\n11.1.5 Elements of CSDL namespaces\nThe following clauses describe the definitions within each namespace:\n\nQualified names\nEntity type and complex type elements\n11.1.5.1 Qualified names\nMany definitions in CSDL use references to qualified names. CSDL defines this as a string in the form:\n\n<Namespace>.<TypeName>\n\nwhere\n\n<Namespace> is the namespace name.\n<TypeName> is the name of the element in the namespace.\nFor example, if a reference is made to MyType.v1_0_0.MyDefinition, the definition can be found in the MyType.v1_0_0 namespace with an element named MyDefinition.\n\n11.1.5.2 Entity type and complex type elements\nUse the EntityType and ComplexType tags to define the entity type and complex type elements, respectively. These elements define a JSON structure and their set of properties by defining property elements and navigation property elements within the EntityType or ComplexType tags.\n\nAll entity types and complex types shall contain a Name attribute, which specifies the name of the definition.\n\nEntity types and complex types may contain a BaseType attribute, which specifies a qualified name. When the BaseType attribute is present, all definitions of the referenced BaseType are available to the entity type or complex type being defined.\n\nAll resources and resource collections shall be defined with the entity type element. Resources inherit from Resource.v1_0_0.Resource, and resource collections inherit from Resource.v1_0_0.ResourceCollection.\n\nAll structured properties shall be defined with the complex type element or entity type element. Most structured properties are defined with the complex type element. Some use the entity type element that inherits from Resource.v1_0_0.ReferenceableMember. The entity type element enables references to be made by using the Navigation Property element, whereas the complex type element does not allow for this usage.\n\nExample entity type and complex type element:\n\n<EntityType Name=\"TypeA\" BaseType=\"Resource.v1_0_0.Resource\">\n  <Annotation Term=\"OData.Description\" String=\"Entity description.\"/>\n  <Annotation Term=\"OData.LongDescription\" String=\"Entity normative description.\"/>\n  <!-- Property and navigation property definitions go here -->\n</EntityType>\n\n<ComplexType Name=\"PropertyTypeA\">\n  <Annotation Term=\"OData.Description\" String=\"Structured property description.\"/>\n  <Annotation Term=\"OData.LongDescription\" String=Structured property normative description.\"/>\n  <!-- Property and navigation property definitions go here -->\n</ComplexType>\n11.1.5.3 Action element\nUse the Action tag to define the action element. This element defines an action that can be performed on a resource.\n\nAll Redfish actions shall be defined with the action element. All action elements shall contain a Name attribute, which specifies the name", "doc_id": "19752d92-fb6f-4105-9725-6850307ae3e3", "embedding": null, "doc_hash": "d7f7404098cee7804ea35b3641b8c492590725eb880d71f5bc7632547d585229", "extra_info": null, "node_info": {"start": 218794, "end": 222660, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "bd0fefb4-9eaa-4174-8337-bd1aa613f38d", "3": "b96445a9-2d64-495e-b22c-17712f9a3ff7"}}, "__type__": "1"}, "b96445a9-2d64-495e-b22c-17712f9a3ff7": {"__data__": {"text": "the action element. All action elements shall contain a Name attribute, which specifies the name of the action. The action shall be represented in payloads as the qualified name of the action, preceded by #.\n\nIn Redfish, all action elements shall contain the IsBound attribute that is always set to true, which indicates that the action appears as a member of a structured type.\n\nThe action element shall contain one or more Parameter tags that specify the Name and Type of each parameter.\n\nBecause all action elements in Redfish use the IsBound=\"true\" term, the first parameter is called the binding parameter and specifies the structured type to which the action belongs. All Redfish actions shall contain a binding parameter. The binding parameter shall be one of the following complex type elements:\n\nFor standard actions, the Actions complex type for the resource.\nFor OEM actions, the OemActions complex type for the resource.\nThe remaining Parameter elements shall describe additional parameters to be passed to the action. The term Nullable=\"false\" in a parameter shall indicate the parameter is required in the action request body.\n\n<Schema xmlns=\"http://docs.oasis-open.org/odata/ns/edm\" Namespace=\"MyType\">\n  <Action Name=\"MyAction\" IsBound=\"true\">\n    <Parameter Name=\"Thing\" Type=\"MyType.Actions\"/>\n    <Parameter Name=\"Parameter1\" Type=\"Edm.Boolean\"/>\n    <Parameter Name=\"Parameter2\" Type=\"Edm.String\" Nullable=\"false\"/>\n  </Action>\n\n  <ComplexType Name=\"Actions\">\n    ...\n  </ComplexType>\n\n  ...\n\n</Schema>\nSome action parameters may specify a type that is defined by an entity type element. In these cases, the parameter in the request is a reference object to a resource within the service.\n\n11.1.5.4 Action element for OEM actions\nOEM-specific actions shall be defined by using the action element with the binding parameter set to the OemActions complex type for the resource. For example, the following definition defines the OEM #Contoso.Ping action for a ComputerSystem.\n\n<Schema xmlns=\"http://docs.oasis-open.org/odata/ns/edm\" Namespace=\"Contoso\">\n  <Action Name=\"Ping\" IsBound=\"true\">\n    <Parameter Name=\"ComputerSystem\" Type=\"ComputerSystem.v1_0_0.OemActions\"/>\n  </Action>\n</Schema>\n11.1.5.5 Action with a response body\nA response body for an action shall be defined using the ReturnType tag within an action element. For example, the following definition defines the GenerateTicket action with a response that contains the definition specified by GenerateTicketResponse.\n\n<Action Name=\"GenerateTicket\" IsBound=\"true\">\n  <Parameter Name=\"ExampleResource\" Type=\"ExampleResource.v1_0_0.Actions\"/>\n    ...\n  <ReturnType Type=\"ExampleResource.v1_0_0.GenerateTicketResponse\" Nullable=\"false\"/>\n</Action>\n\n<ComplexType Name=\"GenerateTicketResponse\">\n  <Annotation Term=\"OData.AdditionalProperties\" Bool=\"false\"/>\n  <Annotation Term=\"OData.Description\" String=\"The response body for GenerateTicket.\"/>\n  <Property Name=\"TicketId\" Type=\"Edm.String\" Nullable=\"false\">\n    <Annotation Term=\"OData.Permissions\" EnumMember=\"OData.Permission/Read\"/>\n    <Annotation Term=\"OData.Description\" String=\"The ticket identifier.\"/>\n    <Annotation Term=\"Redfish.Required\"/>\n  </Property>\n</ComplexType>\nUsing the above example, the following payload is an example response for the GenerateTicket action.\n\n{\n   \"TicketId\": \"40478281bd0f6b9e7131db6c4f673438\"\n}\n11.1.5.6 Property element\nProperties of resources, resource collections, and structured properties are defined using the property element. The Property tag defines a property element inside entity type and complex type elements.\n\nAll property elements shall contain a Name attribute, which specifies the name of the", "doc_id": "b96445a9-2d64-495e-b22c-17712f9a3ff7", "embedding": null, "doc_hash": "1840deae1155cf0d5d31d40a1bad18dc95867065207f0606224394e3e3bc25c8", "extra_info": null, "node_info": {"start": 222648, "end": 226329, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "19752d92-fb6f-4105-9725-6850307ae3e3", "3": "1e112192-ce57-4364-8fc7-71531b26fe5f"}}, "__type__": "1"}, "1e112192-ce57-4364-8fc7-71531b26fe5f": {"__data__": {"text": "property elements shall contain a Name attribute, which specifies the name of the property.\n\nAll property elements shall contain a Type attribute specifies the data type. The Type attribute shall be one of the following names or types:\n\nA qualified name that references an enum type element.\nA qualified name that references a complex type element.\nA primitive data type.\nAn array of the previous names or types by using the Collection term.\nTable 27 describes the primitive data types:\n\nTable 27 \u2014 Primitive data types\nType\tMeaning\nEdm.Boolean\tTrue or False.\nEdm.DateTimeOffset\tDate-time string.\nEdm.Decimal\tNumeric values with fixed precision and scale.\nEdm.Double\tIEEE 754 binary64 floating-point number (15-17 decimal digits).\nEdm.Duration\tDuration string.\nEdm.Guid\tGUID/UUID string.\nEdm.Int64\tSigned 64-bit integer.\nEdm.String\tUTF-8 string.\nProperty elements may specify a Nullable attribute. If the attribute is false, the property shall not contain null. If the attribute is true or absent, the property may contain null.\n\nExample property element:\n\n<Property Name=\"Property1\" Type=\"Edm.String\" Nullable=\"false\">\n  <Annotation Term=\"OData.Description\" String=\"Property1 description.\"/>\n  <Annotation Term=\"OData.LongDescription\" String=\"Property1 normative description.\"/>\n  <Annotation Term=\"OData.Permissions\" EnumMember=\"OData.Permission/Read\"/>\n  <Annotation Term=\"Redfish.Required\"/>\n  <Annotation Term=\"Measures.Unit\" String=\"Watts\"/>\n</Property>\n11.1.5.7 Navigation property element\nReference properties of resources, resource collections, and structured properties are defined using the navigation property element. The NavigationProperty tag defines a navigation property element inside entity type and complex type elements.\n\nAll navigation property elements shall contain a Name attribute, which specifies the name of the property.\n\nAll navigation property elements shall contain a Type attribute specifies the data type. The Type attribute shall be a qualified name that references an entity type element. The Collection term with the qualified name shall indicate the property is an array..\n\nNavigation property elements may specify a Nullable attribute. If the attribute is false, the property shall not contain null. If the attribute is true or absent, the property may contain null.\n\nUnless the reference property is to be expanded, all navigation properties in Redfish shall contain the OData.AutoExpandReferences annotation element to show that the reference is always available.\n\nExample navigation property element:\n\n<NavigationProperty Name=\"RelatedType\" Type=\"MyTypes.TypeB\">\n  <Annotation Term=\"OData.Description\" String=\"RelatedType description.\"/>\n  <Annotation Term=\"OData.LongDescription\" String=\"RelatedType normative description.\"/>\n  <Annotation Term=\"OData.AutoExpandReferences\"/>\n</NavigationProperty>\n11.1.5.8 Enum type element\nUse the EnumType tag to define the enum type element. This element defines a set of enumeration values, which may be applied to one or more properties.\n\nAll enum type elements shall contain a Name attribute, which specifies the name of the set of enumeration values.\n\nEnum type elements shall contain Member tags that define the members of the enumeration. The Member tags shall contain a Name attribute that specifies the string value of the member name.\n\n<EnumType Name=\"EnumTypeA\">\n  <Annotation Term=\"OData.Description\" String=\"EnumTypeA type description.\"/>\n  <Annotation Term=\"OData.LongDescription\" String=\"EnumTypeA type normative description.\"/>\n  <Member Name=\"MemberA\">\n    <Annotation Term=\"OData.Description\" String=\"The description of MemberA\"/>\n  </Member>\n  <Member Name=\"MemberB\">\n    <Annotation Term=\"OData.Description\" String=\"The description of MemberB\"/>\n  </Member>\n</EnumType>\n11.1.5.9 Annotation element\nAnnotations in CSDL are expressed using the Annotation tag. Any schema element in CSDL may contain annotations.\n\nThe following examples show how each Redfish schema", "doc_id": "1e112192-ce57-4364-8fc7-71531b26fe5f", "embedding": null, "doc_hash": "646e4b06dafabf5903ea4bdfc94887a5e59c2e893a3737a0913a9499ad2eb12b", "extra_info": null, "node_info": {"start": 226343, "end": 230304, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "b96445a9-2d64-495e-b22c-17712f9a3ff7", "3": "75829444-bccd-40e0-b04d-a28a7b84dd33"}}, "__type__": "1"}, "75829444-bccd-40e0-b04d-a28a7b84dd33": {"__data__": {"text": "may contain annotations.\n\nThe following examples show how each Redfish schema annotation is expressed in CSDL.\n\nThe OData Core Schema defines terms with the OData prefix.\nThe OData Measures Schema defines terms with the Measures prefix.\nThe RedfishExtensions Schema defines terms with the Redfish prefix.\nExample description annotation:\n\n<Annotation Term=\"OData.Description\" String=\"The console color.\"/>\nExample long description annotation:\n\n<Annotation Term=\"OData.LongDescription\"\n  String=\"This property shall contain the console color.\"/>\nExample additional properties annotation:\n\n<Annotation Term=\"OData.AdditionalProperties\"/>\nExample permissions annotation (read-only):\n\n<Annotation Term=\"OData.Permissions\" EnumMember=\"OData.Permission/Read\"/>\nExample permissions annotation (read/write):\n\n<Annotation Term=\"OData.Permissions\" EnumMember=\"OData.Permission/ReadWrite\"/>\nExample permissions annotation (write-only, null in responses):\n\n<Annotation Term=\"OData.Permissions\" EnumMember=\"OData.Permission/Write\"/>\nExample required annotation:\n\n<Annotation Term=\"Redfish.Required\"/>\nExample required on create annotation:\n\n<Annotation Term=\"Redfish.RequiredOnCreate\"/>\nExample units of measure annotation:\n\n<Annotation Term=\"Measures.Unit\" String=\"MiBy\"/>\nExample expanded resource annotation:\n\n<Annotation Term=\"OData.AutoExpand\"/>\nExample insert capabilities annotation (showing POST is not allowed):\n\n<Annotation Term=\"Capabilities.InsertRestrictions\">\n  <Record>\n    <PropertyValue Property=\"Insertable\" Bool=\"false\"/>\n  </Record>\n</Annotation>\nExample update capabilities annotation (showing PATCH and PUT are allowed):\n\n<Annotation Term=\"Capabilities.UpdateRestrictions\">\n  <Record>\n    <PropertyValue Property=\"Updatable\" Bool=\"true\"/>\n    <Annotation Term=\"OData.Description\" String=\"The desired speed can be changed.\"/>\n  </Record>\n</Annotation>\nExample delete capabilities annotation (showing DELETE is allowed):\n\n<Annotation Term=\"Capabilities.DeleteRestrictions\">\n  <Record>\n    <PropertyValue Property=\"Deletable\" Bool=\"true\"/>\n    <Annotation Term=\"OData.Description\" String=\"The resource can be deleted.\"/>\n  </Record>\n</Annotation>\nExample resource URI patterns annotation:\n\n<Annotation Term=\"Redfish.Uris\">\n  <Collection>\n    <String>/redfish/v1/AccountService/Accounts/{ManagerAccountId}</String>\n  </Collection>\n</Annotation>\nExample URI segment annotation:\n\n<NavigationProperty Name=\"Tasks\" Type=\"TaskService.TaskService\" Nullable=\"false\">\n  <Annotation Term=\"OData.Permissions\" EnumMember=\"OData.Permission/Read\"/>\n  <Annotation Term=\"OData.Description\" String=\"The link to the task service.\"/>\n  <Annotation Term=\"OData.AutoExpandReferences\"/>\n  <Annotation Term=\"Redfish.URISegment\" String=\"TaskService\"/>\n</NavigationProperty>\nExample owning entity annotation:\n\n<Annotation Term=\"Redfish.OwningEntity\" String=\"DMTF\"/>\nExample deprecated annotation:\n\n<Annotation Term=\"Redfish.Revisions\">\n  <Collection>\n    <Record>\n      <PropertyValue Property=\"Kind\" EnumMember=\"Redfish.RevisionKind/Deprecated\"/>\n      <PropertyValue Property=\"Version\" String=\"v1_3_0\"/>\n      <PropertyValue Property=\"Description\"\n        String=\"This property has been deprecated in favor of ModuleManufacturerID.\"/>\n    </Record>\n  </Collection>\n</Annotation>\nExample deprecated annotation applied to resource URI patterns:\n\n<Annotation Term=\"Redfish.DeprecatedUris\">\n  <Collection>\n    <String>/redfish/v1/Chassis/{ChassisId}/Thermal</String>\n ", "doc_id": "75829444-bccd-40e0-b04d-a28a7b84dd33", "embedding": null, "doc_hash": "8d8b22b021fbf71f1914b0bb0f25aec8b5fb0e1168d517e5229852cd37930e11", "extra_info": null, "node_info": {"start": 230306, "end": 233752, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "1e112192-ce57-4364-8fc7-71531b26fe5f", "3": "4a0e96d2-1909-45c5-a7a4-ea646d9af7c5"}}, "__type__": "1"}, "4a0e96d2-1909-45c5-a7a4-ea646d9af7c5": {"__data__": {"text": " </Collection>\n</Annotation>\n11.2 JSON Schema\n11.2.1 JSON Schema overview\nThe JSON Schema Specification defines a JSON format for describing JSON payloads. The following clause describes how Redfish uses JSON Schema to describe resources and resource collections.\n\n11.2.2 File naming conventions for JSON Schema\nEach Redfish JSON Schema file represents a single resource type.\n\nVersioned Redfish JSON Schema files shall use the resource type to name the file, in this format:\n\n<ResourceType>.v<MajorVersion>_<MinorVersion>_<Errata>.json\n\nFor example, version 1.3.0 of the Chassis schema is Chassis.v1_3_0.json.\n\nUnversioned Redfish JSON Schema files shall use the resource type to name the file, in this format:\n\n<ResourceType>.json\n\nFor example, the unversioned definition of the Chassis schema is Chassis.json.\n\n11.2.3 Core JSON Schema files\nTable 28 describes the core JSON Schema files:\n\nTable 28 \u2014 Core JSON Schema files\nFile\tDescription\nodata-v4.json\tDefinitions for common OData properties.\nredfish-error.v1_0_0.json and its subsequent versions\tPayload definition of the Redfish error response.\nredfish-schema-v1.json\tExtensions to the JSON Schema that define Redfish JSON Schema files.\nResource.json and its subsequent versions\tAll base definitions for resources, resource collections, and common properties, such as Status.\n11.2.4 JSON Schema format\nEach JSON Schema file shall contain a JSON object to describe resources, resource collections, and other definitions for the data model.\n\nTable 29 describes the JSON object, which contains the following terms:\n\nTable 29 \u2014 JSON Schema format\nTerm\tDescription\n$id\tReference to the URI where the schema file is published.\n$ref\tFor a schema file that describes a resource or resource collection, the reference to the structural definition of the resource or resource collection.\n$schema\tURI to the Redfish schema extensions for JSON Schema. The value should be http://redfish.dmtf.org/schemas/v1/redfish-schema-v1.json.\ncopyright\tCopyright statement for the organization producing the JSON Schema.\ndefinitions\tStructures, enumerations, and other definitions defined by the schema.\ntitle\tFor a schema file that describes a resource or resource collection, the matching type identifier for the resource or resource collection.\n11.2.5 JSON Schema definitions body\nThis clause describes the types of definitions found in the definitions term of a Redfish JSON Schema file.\n\n11.2.5.1 Resource definitions in JSON Schema\nTo satisfy versioning requirements, the JSON Schema representation of each resource shall have one unversioned schema file and a set of versioned schema files.\n\nThe unversioned definition of a resource shall contain an anyOf statement. This statement shall consist of an array of $ref terms, which point to the following definitions:\n\nThe JSON Schema definition for a reference property.\nThe versioned definitions of the resource.\nThe unversioned definition of a resource shall contain the uris term to express the allowable URIs for the resource, and the deletable, insertable, and updatable terms to express the capabilities of the resource.\n\nThe following example shows an unversioned resource definition in JSON Schema:\n\n{\n  \"ComputerSystem\": {\n    \"anyOf\": [{\n      \"$ref\": \"http://redfish.dmtf.org/schemas/v1/odata.v4_0_3.json#/definitions/idRef\"\n    }, {\n      \"$ref\": \"http://redfish.dmtf.org/schemas/v1/ComputerSystem.v1_0_0.json#/definitions/ComputerSystem\"\n    }, {\n      \"$ref\": \"http://redfish.dmtf.org/schemas/v1/ComputerSystem.v1_0_1.json#/definitions/ComputerSystem\"\n    }, {\n     ", "doc_id": "4a0e96d2-1909-45c5-a7a4-ea646d9af7c5", "embedding": null, "doc_hash": "88537e81dffe2a23457b962dc59b3900ef11e54bd81539081e1891a4d3372c68", "extra_info": null, "node_info": {"start": 233821, "end": 237388, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "75829444-bccd-40e0-b04d-a28a7b84dd33", "3": "1cf88464-f860-4119-8cc1-e257d0abcd9a"}}, "__type__": "1"}, "1cf88464-f860-4119-8cc1-e257d0abcd9a": {"__data__": {"text": "   }, {\n      \"$ref\": \"http://redfish.dmtf.org/schemas/v1/ComputerSystem.v1_6_0.json#/definitions/ComputerSystem\"\n    }],\n    \"deletable\": true,\n    \"description\": \"The ComputerSystem schema represents a general purpose machine or system.\",\n    \"insertable\": false,\n    \"longDescription\": \"This resource shall represent resources that represent a computing system.\",\n    \"updatable\": true,\n    \"uris\": [\n      \"/redfish/v1/Systems/{ComputerSystemId}\"\n    ]\n  },\n  ...\n}\nThe versioned definition of a resource shall contain the property definitions for the given version of the resource.\n\n11.2.5.2 Enumerations in JSON Schema\nTable 30 describes the terms that constitute definitions for enumerations:\n\nTable 30 \u2014 JSON Schema enumerations\nTerm\tDescription\nenum\tString array that contains the possible enumeration values.\nenumDescriptions\tObject that contains the descriptions for each of the enumerations as name-value pairs.\nenumLongDescriptions\tObject that contains the long descriptions for each of the enumerations as name-value pairs.\nenumDeprecated\tObject that contains the deprecation guidance for each of the enumerations as name-value pairs.\nenumVersionDeprecated\tObject that contains the deprecation version information for each of the enumerations as name-value pairs.\ntype\tBecause all enumerations in Redfish are strings, the type term always has the string value.\nThe following example shows an enumeration definition in JSON Schema:\n\n{\n  \"Flavors\": {\n    \"enum\": [\"Lit\", \"Blinking\", \"Off\"],\n    \"enumDescriptions\": {\n      \"Blinking\": \"The Indicator LED is blinking.\",\n      \"Lit\": \"The Indicator LED is lit.\",\n      \"Off\": \"The Indicator LED is off.\"\n    },\n    \"enumLongDescriptions\": {\n      \"Blinking\": \"This value shall represent the Indicator LED is in a blinking state where the LED is being turned on and off in repetition.\",\n      \"Lit\": \"This value shall represent the Indicator LED is in a solid on state.\",\n      \"Off\": \"This value shall represent the Indicator LED is in a solid off state.\"\n    },\n    \"type\": \"string\"\n  },\n  ...\n}\n11.2.5.3 Actions in JSON Schema\nVersioned definitions of resources shall contain a definition called Actions. This definition is a container with a set of terms that point to the different actions supported by the resource. The names of standard actions shall be in the form:\n\n#<ResourceType>.<ActionName>\n\nExample Actions definition:\n\n{\n   \"Actions\": {\n      \"additionalProperties\": false,\n      \"description\": \"The available actions for this resource.\",\n      \"longDescription\": \"This type shall contain the available actions for this resource.\",\n      \"properties\": {\n         \"#ComputerSystem.Reset\": {\n            \"$ref\": \"#/definitions/Reset\"\n         }\n      },\n      \"type\": \"object\"\n   },\n   ...\n}\nAnother definition within the same schema file shall describe the action itself. This definition shall contain a term called parameters to describe the client request body. It also shall contain property definitions for the target and title properties shown in response payloads for the resource.\n\nThe following example shows a definition of an action:\n\n{\n   \"Reset\": {\n      \"additionalProperties\": false,\n      \"description\": \"This action resets the system.\",\n      \"longDescription\": \"This action shall perform a reset of the ComputerSystem.\",\n    ", "doc_id": "1cf88464-f860-4119-8cc1-e257d0abcd9a", "embedding": null, "doc_hash": "6f505b63253f223ad46203fb30fdf10f59004be4e777b81f2e75fa90748f6c44", "extra_info": null, "node_info": {"start": 237385, "end": 240700, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "4a0e96d2-1909-45c5-a7a4-ea646d9af7c5", "3": "90c3cfa9-dc17-42f4-9196-ede4f85f977f"}}, "__type__": "1"}, "90c3cfa9-dc17-42f4-9196-ede4f85f977f": {"__data__": {"text": "\"This action shall perform a reset of the ComputerSystem.\",\n      \"parameters\": {\n         \"ResetType\": {\n            \"$ref\": \"http://redfish.dmtf.org/schemas/v1/Resource.json#/definitions/ResetType\",\n            \"description\": \"The type of reset to be performed.\",\n            \"longDescription\": \"This parameter shall define the type of reset to be performed.\"\n         }\n      },\n      \"properties\": {\n         \"target\": {\n            \"description\": \"Link to invoke action\",\n            \"format\": \"uri\",\n            \"type\": \"string\"\n         },\n         \"title\": {\n            \"description\": \"Friendly action name\",\n            \"type\": \"string\"\n         }\n      },\n      \"type\": \"object\"\n   },\n   ...\n}\nAction parameters may specify a type that is a resource definition. In these cases, the parameter in the request shall contain a reference object to a resource within the service.\n\n11.2.5.4 OEM actions in JSON Schema\nOEM-specific actions shall be defined by using an action definition in an appropriately named JSON Schema file. For example, the following definition defines the OEM #ContosoNetworkDevice.Ping action, assuming it's found in the versioned ContosoNetworkDevice JSON Schema file, such as ContosoNetworkDevice.v1_0_0.json.\n\n{\n   \"Ping\": {\n      \"additionalProperties\": false,\n      \"parameters\": {},\n      \"properties\": {\n         \"target\": {\n            \"description\": \"Link to invoke action\",\n            \"format\": \"uri\",\n            \"type\": \"string\"\n         },\n         \"title\": {\n            \"description\": \"Friendly action name\",\n            \"type\": \"string\"\n         }\n      },\n      \"type\": \"object\"\n   },\n   ...\n}\n11.2.5.5 Action with a response body\nA response body for an action shall be defined using the actionResponse term within the action definition. For example, the following definition defines the GenerateTicket action with a response that contains the definition specified by #/definitions/GenerateTicketResponse.\n\n{\n   \"GenerateTicket\": {\n      \"actionResponse\": {\n         \"$ref\": \"#/definitions/GenerateTicketResponse\"\n      },\n      \"parameters\": {}\n   },\n   \"GenerateTicketResponse\": {\n      \"additionalProperties\": false,\n      \"description\": \"The response body for GenerateTicket.\",\n      \"properties\": {\n         \"TicketId\": {\n            \"description\": \"The ticket identifier.\",\n            \"readonly\": true,\n            \"type\": \"string\"\n         }\n      },\n      \"required\": [\"TicketId\"],\n      \"type\": \"object\"\n   }\n}\nIn the previous example, the following payload is an example response for the", "doc_id": "90c3cfa9-dc17-42f4-9196-ede4f85f977f", "embedding": null, "doc_hash": "70431f3fec8a271600118f032ad200aaf20cd32e5097e593886755c0a287db71", "extra_info": null, "node_info": {"start": 240653, "end": 243198, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "1cf88464-f860-4119-8cc1-e257d0abcd9a", "3": "59d4d8c4-0942-4748-a22d-7c64f4eadf81"}}, "__type__": "1"}, "59d4d8c4-0942-4748-a22d-7c64f4eadf81": {"__data__": {"text": "the previous example, the following payload is an example response for the GenerateTicket action.\n\n{\n   \"TicketId\": \"40478281bd0f6b9e7131db6c4f673438\"\n}\n11.2.6 JSON Schema terms\nTable 31 describes the JSON Schema terms that Redfish uses to provide schema annotations for Redfish JSON Schema:\n\nTable 31 \u2014 JSON Schema terms\nJSON Schema term\tRelated Redfish schema annotation\ndescription\nenumDescriptions\tDescription\nlongDescription\nenumLongDescriptions\tLong description\nadditionalProperties\tAdditional properties\nreadonly\nwriteOnly\tPermissions\nrequired\tRequired\nrequiredOnCreate\tRequired on create\nunits\tUnits of measure\nautoExpand\tExpanded resource\ndeletable\ninsertable\nupdatable\tResource capabilities\nuris\tResource URI patterns\nuriSegment\tURI segment\nowningEntity\tOwning entity\ndeprecated\nversionDeprecated\nurisDeprecated\tDeprecated\n11.3 OpenAPI\n11.3.1 OpenAPI overview\nThe OpenAPI Specification defines a format for describing JSON payloads and the set of URIs a client can access on a service. The following clause describes how Redfish uses OpenAPI to describe resources and resource collections.\n\n11.3.2 File naming conventions for OpenAPI schema\nEach Redfish OpenAPI file represents a single resource type.\n\nVersioned Redfish OpenAPI files shall be named using the resource type name for the schema, following the format:\n\n<ResourceType>.v<MajorVersion>_<MinorVersion>_<Errata>.yaml\n\nFor example, version 1.3.0 of the Chassis schema is Chassis.v1_3_0.yaml.\n\nUnversioned Redfish OpenAPI files shall use the resource type name to name the file, in this format:\n\n<ResourceType>.yaml\n\nFor example, the unversioned definition of the Chassis schema is Chassis.yaml.\n\n11.3.3 Core OpenAPI schema files\nTable 32 describes the core OpenAPI schema files:\n\nTable 32 \u2014 Core OpenAPI schema files\nFile\tDescription\nodata-v4.yaml\tDefinitions for common OData properties.\nopenapi.yaml\tURI paths and their respective payload structures.\nResource.yaml and its subsequent versions\tAll base definitions for resources, resource collections, and common properties, such as Status.\n11.3.4 openapi.yaml\nThe openapi.yaml file is the starting point for clients to understand the construct of the service.\n\nTable 33 describes the terms that the openapi.yaml file contains:\n\nTable 33 \u2014 openapi.yaml terms\nTerm\tDescription\ncomponents\tGlobal definitions. For Redfish, contains the format of the Redfish error response.\ninfo\tStructure consisting of information about what the openapi.yaml is describing, such as the author of the file and any contact information.\nopenapi\tVersion of OpenAPI the document follows.\npaths\tURIs supported by the document, with possible methods, response bodies, and request bodies.\nThe service shall return the openapi.yaml file, if present in the Redfish service, as a YAML document by using either the application/yaml or application/vnd.oai.openapi MIME types. The service may append ;charset=utf-8 to the MIME type. Note that while the application/yaml type is in common use today, the application/vnd.oai.openapi type was recently defined and approved specifically to support OpenAPI. Implementations should use caution when selecting the MIME type as this specification may change in the future to reflect adoption of the OpenAPI-defined MIME type.\n\nThe paths term shall contain an array of the possible URIs. Each URI shall contain methods supported by the URI. Each method shall contain the possible response bodies and request bodies.\n\nExample paths entry for a resource:\n\n/redfish/v1/Systems/{ComputerSystemId}:\n  get:\n    parameters:\n    - description: The value of the Id property of the ComputerSystem resource\n      in: path\n      name: ComputerSystemId\n      required: true\n  ", "doc_id": "59d4d8c4-0942-4748-a22d-7c64f4eadf81", "embedding": null, "doc_hash": "cae937dd993550db785a2fe7532d1c61ed02de53f3966536d0c63d5bb951008f", "extra_info": null, "node_info": {"start": 243188, "end": 246880, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "90c3cfa9-dc17-42f4-9196-ede4f85f977f", "3": "e122c0cc-1848-4a64-969e-431db86f6f0b"}}, "__type__": "1"}, "e122c0cc-1848-4a64-969e-431db86f6f0b": {"__data__": {"text": "   name: ComputerSystemId\n      required: true\n      schema:\n        type: string\n    responses:\n      '200':\n        content:\n          application/json:\n            schema:\n              $ref: http://redfish.dmtf.org/schemas/v1/ComputerSystem.v1_6_0.yaml#/components/schemas/ComputerSystem\n        description: The response contains a representation of the ComputerSystem\n          resource\n      default:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RedfishError'\n        description: Error condition\nExample paths entry for an action:\n\n/redfish/v1/Systems/{ComputerSystemId}/Actions/ComputerSystem.Reset:\n  post:\n    parameters:\n    - description: The value of the Id property of the ComputerSystem resource\n      in: path\n      name: ComputerSystemId\n      required: true\n        type: string\n    requestBody:\n      content:\n        application/json:\n          schema:\n            $ref: http://redfish.dmtf.org/schemas/v1/ComputerSystem.v1_6_0.yaml#/components/schemas/ResetRequestBody\n      required: true\n    responses:\n      '200':\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RedfishError'\n        description: The response contains the results of the Reset action\n      '202':\n        content:\n          application/json:\n            schema:\n              $ref: http://redfish.dmtf.org/schemas/v1/Task.v1_4_0.yaml#/components/schemas/Task\n        description: Accepted; a task has been generated\n      '204':\n        description: Success, but no response data\n      default:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RedfishError'\n        description: Error condition\n11.3.5 OpenAPI file format\nWith the exception of openapi.yaml, each OpenAPI file shall contain a YAML object to describe resources, resource collections, or other definitions for the data model. Table 34 describes the terms that the YAML object contains:\n\nTable 34 \u2014 YAML object terms\nTerm\tDescription\ncomponents\tStructures, enumerations, and other definitions defined by the schema.\nx-copyright\tCopyright statement for the organization producing the OpenAPI file.\ntitle\tFor a schema file that describes a resource or resource collection, the matching type identifier for the resource or resource collection.\n11.3.6 OpenAPI components body\nThis clause describes the types of definitions that can be found in the components term of a Redfish OpenAPI", "doc_id": "e122c0cc-1848-4a64-969e-431db86f6f0b", "embedding": null, "doc_hash": "385261e74e54f7b5f0339c0b1d40f0f637dcdc36979f1dba32f82c5dfd6c9e68", "extra_info": null, "node_info": {"start": 246908, "end": 249423, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "59d4d8c4-0942-4748-a22d-7c64f4eadf81", "3": "f2a316c5-b728-4408-87cd-dc7d343d5f7d"}}, "__type__": "1"}, "f2a316c5-b728-4408-87cd-dc7d343d5f7d": {"__data__": {"text": "the types of definitions that can be found in the components term of a Redfish OpenAPI file.\n\n11.3.6.1 Resource definitions in OpenAPI\nTo satisfy versioning requirements, the OpenAPI representation of each resource shall have one unversioned schema file and a set of versioned schema files.\n\nThe unversioned definition of a resource shall contain an anyOf statement. This statement shall consist of an array of $ref terms, which point to the following definitions:\n\nThe OpenAPI definition for a reference property.\nThe versioned definitions of the resource.\nExample unversioned resource definition in OpenAPI:\n\nComputerSystem:\n  anyOf:\n  - $ref: http://redfish.dmtf.org/schemas/v1/odata.v4_0_3.yaml#/components/schemas/idRef\n  - $ref: http://redfish.dmtf.org/schemas/v1/ComputerSystem.v1_0_0.yaml#/components/schemas/ComputerSystem\n  - $ref: http://redfish.dmtf.org/schemas/v1/ComputerSystem.v1_0_1.yaml#/components/schemas/ComputerSystem\n  - $ref: http://redfish.dmtf.org/schemas/v1/ComputerSystem.v1_6_0.yaml#/components/schemas/ComputerSystem\n  description: The ComputerSystem schema represents a general purpose machine\n    or system.\n  x-longDescription: This resource shall be used to represent resources that represent\n    a computing system.\nThe versioned definition of a resource shall contain the property definitions for the given version of the resource.\n\n11.3.6.2 Enumerations in OpenAPI\nTable 35 describes the terms in OpenAPI enumerations:\n\nTable 35 \u2014 OpenAPI enumerations\nTerm\tDescription\nenum\tString array that contains the possible enumeration values.\ntype\tBecause all enumerations in Redfish are strings, the type term always has the value string.\nx-enumDescriptions\tObject that contains the descriptions for each of the enumerations as name-value pairs.\nx-enumLongDescriptions\tObject that contains the long descriptions for each enumeration as a name-value pair.\nx-enumDeprecated\tObject that contains the deprecation guidance for each of the enumerations as name-value pairs.\nx-enumVersionDeprecated\tObject that contains the deprecation version information for each of the enumerations as name-value pairs.\nExample enumeration definition in OpenAPI:\n\nIndicatorLED:\n  enum:\n  - Lit\n  - Blinking\n  - 'Off'\n  type: string\n  x-enumDescriptions:\n    Blinking: The Indicator LED is blinking.\n    Lit: The Indicator LED is lit.\n    'Off': The Indicator LED is off.\n  x-enumLongDescriptions:\n    Blinking: This value shall represent the Indicator LED is in a blinking state\n      where the LED is being turned on and off in repetition.\n    Lit: This value shall represent the Indicator LED is in a solid on state.\n    'Off': This value shall represent the Indicator LED is in a solid off state.\n11.3.6.3 Actions in OpenAPI\nVersioned definitions of resources shall contain a definition called Actions. This definition is a container with a set of terms that point to the different actions supported by the resource. The names of standard actions shall be in the form:\n\n#<ResourceType>.<ActionName>\n\nExample Actions definition:\n\nActions:\n  additionalProperties: false\n  description: The available actions for this resource.\n  properties:\n    '#ComputerSystem.Reset':\n      $ref: '#/components/schemas/Reset'\n  type: object\n  x-longDescription: This type shall contain the available actions for this resource.\nAnother definition within the same schema file shall describe the action itself. This definition shall contain property definitions for the target and title properties shown in response payloads for the resource.\n\nThe following example shows a definition of", "doc_id": "f2a316c5-b728-4408-87cd-dc7d343d5f7d", "embedding": null, "doc_hash": "847ecf831208161e6f7c361a8b052dc0d0587a9e48db415369bf3ffaccd00767", "extra_info": null, "node_info": {"start": 249389, "end": 252965, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "e122c0cc-1848-4a64-969e-431db86f6f0b", "3": "b23a8fdf-4289-4529-84ea-8f980c3d74e4"}}, "__type__": "1"}, "b23a8fdf-4289-4529-84ea-8f980c3d74e4": {"__data__": {"text": "properties shown in response payloads for the resource.\n\nThe following example shows a definition of an action:\n\nReset:\n  additionalProperties: false\n  description: This action resets the system.\n  properties:\n    target:\n      description: Link to invoke action\n      format: uri\n      type: string\n    title:\n      description: Friendly action name\n      type: string\n  type: object\n  x-longDescription: This action shall reset the ComputerSystem.\nThe parameters for the action shall be defined in another definition with RequestBody appended to the name of the action. This gets mapped from the openapi.yaml file for expressing the POST method for the URI of the action.\n\nThe following example shows a definition of parameters of an action:\n\nResetRequestBody:\n  additionalProperties: false\n  description: This action resets the system.\n  properties:\n    ResetType:\n      $ref: http://redfish.dmtf.org/schemas/v1/Resource.yaml#/components/schemas/ResetType\n      description: The reset type.\n      x-longDescription: This parameter shall define the type of reset to perform.\n  type: object\n  x-longDescription: This action shall reset the ComputerSystem.\n11.3.6.4 OEM actions in OpenAPI\nOEM-specific actions shall be defined by using an action definition in an appropriately named OpenAPI file. For example, the following definition defines the OEM #ContosoNetworkDevice.Ping action, assuming it's found in the versioned ContosoNetworkDevice OpenAPI file with a name, such as ContosoNetworkDevice.v1_0_0.yaml.\n\nPing:\n  additionalProperties: false\n  properties:\n    target:\n      description: Link to invoke action\n      format: uri\n      type: string\n    title:\n      description: Friendly action name\n      type: string\n  type: object\nPingRequestBody:\n  additionalProperties: false\n  properties: {}\n  type: object\n11.3.7 OpenAPI terms used by Redfish\nTable 36 describes the OpenAPI terms that Redfish uses to provide schema annotations for Redfish OpenAPI files:\n\nTable 36 \u2014 OpenAPI terms used by Redfish\nOpenAPI term\tRelated Redfish schema annotation\ndescription\nx-enumDescriptions\tDescription\nx-longDescription\nx-enumLongDescriptions\tLong description\nadditionalProperties\tAdditional properties\nreadOnly\nwriteOnly\tPermissions\nrequired\tRequired\nx-requiredOnCreate\tRequired on create\nx-units\tUnits of measure\nx-autoExpand\tExpanded resource\nx-uriSegment\tURI segment\nx-owningEntity\tOwning entity\ndeprecated\nx-deprecatedReason\nx-versionDeprecated\tDeprecated\n11.4 Schema modification rules\nSchema referenced from the implementation may vary from the canonical definitions of those schema defined by the Redfish schema or other entities, provided they adhere to the following rules. Clients should take this into consideration when attempting operations on the resources defined by schema.\n\nModified schema may constrain a read/write property to be read only.\nModified schema may constrain a property by adding length annotations to properties that do not have those annotations.\nModified schema may constrain a property by adding a pattern annotation to properties that do not have that annotation.\nModified schema may constrain the capabilities of a resource or resource collection to remove support for HTTP operations.\nModified schema may change the update capabilities to indicate a client can perform a PATCH or PUT request on the resource to support writable OEM properties.\nModified schema may remove properties that are not required.\nModified schema may remove actions.\nModified schema may remove action parameters that are not required.\nModified schema may change description annotations.\nModified schema may change any external references to point to Redfish schema that adheres to the modification rules.\nModified schema may change the owning entity annotation to specify who made the", "doc_id": "b23a8fdf-4289-4529-84ea-8f980c3d74e4", "embedding": null, "doc_hash": "ca18d0ec913a20f50013479dfffd351f403ca188c00b3964ff643727150da3ff", "extra_info": null, "node_info": {"start": 252950, "end": 256743, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "f2a316c5-b728-4408-87cd-dc7d343d5f7d", "3": "c0b7ca3c-25ce-450a-9bb0-f8fa712dfdca"}}, "__type__": "1"}, "c0b7ca3c-25ce-450a-9bb0-f8fa712dfdca": {"__data__": {"text": "schema may change the owning entity annotation to specify who made the modifications.\nModified schema may remove URIs from the resource URI patterns annotation.\nModified schema may add URIs to the resource URI patterns annotation to define OEM URIs for standard resources and shall follow the OEM URI rules specified by the OEM URIs clause.\nOther modifications to the schema shall not be allowed.\n12 Service details\n12.1 Eventing\n12.1.1 Eventing overview\nThis clause describes how to use the REST-based mechanism to subscribe to and receive event messages.\n\nNote: For security implications of eventing, see the Security details clause.\n\nThe Redfish service requires a client or administrator to create subscriptions to receive events.\n\nTo create a subscription, use one of these methods:\n\nDirectly HTTP POST to the subscription collection.\nIndirectly open a server-sent events (SSE) connection for the event service.\n12.1.2 POST to subscription collection\nTo locate the event service, the client traverses the Redfish service interface. The event service is located in the service root, as described in the ServiceRoot schema.\n\nAfter the client discovers the service, they perform an HTTP POST on the resource collection URI for Subscriptions in the event service to subscribe to events. For the subscription body syntax, see the Redfish EventDestination schema. This request includes:\n\nThe URI where an event-receiver client expects events to be sent. When an event is triggered within the Redfish service, the service sends an event to that URI.\nThe type of events to send.\nIf the subscription request succeeds, the service shall return:\n\nAn HTTP 201 Created status code.\nThe Location header that contains a URI of the newly created subscription resource.\nIf the subscription request succeeds, the service should return:\n\nA response body containing a representation of the subscription resource that conforms to the EventDestination schema.\nAfter a subscription is registered with the service, clients begin receiving events. Clients do not receive events retroactively. The service does not retain historical events.\n\nServices shall:\n\nSupport push style eventing for all resources that can send events.\nRespond to a request to create a subscription with an error if the body of the request is conflicting. For instance, if parameters in the request are not supported, the service shall return the HTTP 400 Bad Request status code.\nRetain subscriptions as persistent across service restarts.\nServices shall not:\n\nPush events by using HTTP POST unless an event subscription has been created. To terminate the event stream at any time, either the client or the service can delete the subscription.\nSend a push event payload larger than 1 Mebibyte (MiB). If more than 1 MiB of data is to be sent, the service shall divide the payload on the nearest Event entry such that the total payload transmitted to the client is less than 1 MiB. This restriction shall not apply to metric reports.\nServices may:\n\nTerminate a subscription by sending a SubscriptionTerminated message from the Base Message Registry as the last event.\nTerminate a subscription if the number of delivery errors exceeds pre-configured thresholds.\nTo unsubscribe from the events associated with this subscription, the client or administrator shall perform an HTTP DELETE request to the subscription's resource URI.\n\nSubsequent requests to subscription resources that have been terminated respond with the HTTP 404 Not Found status code.\n\nSome configurable properties define the behavior for all event subscriptions. For details, see the Redfish EventService schema.\n\nDEPRECATED: Previous versions of the specification required services to reject subscription requests if RegistryPrefixes and MessageIds were in the same request.\n\n12.1.3 Open an SSE connection\nA service may support the ServerSentEventUri property in the EventService resource. If a client performs a GET request on the URI that the ServerSentEventUri contains, an SSE connection opens for the client. For details about this method, see the server-sent events Event service clause.\n\n12.1.4 EventType-based eventing\nDEPRECATED: EventType-based eventing is deprecated in the Redfish schema in favor of using RegistryPrefix and", "doc_id": "c0b7ca3c-25ce-450a-9bb0-f8fa712dfdca", "embedding": null, "doc_hash": "3ac799b410ff989c6df41a117f2ec3ff8384beb715659b88029b96a9126118ca", "extra_info": null, "node_info": {"start": 256772, "end": 261027, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "b23a8fdf-4289-4529-84ea-8f980c3d74e4", "3": "22ccfccd-aa89-48b3-8fb6-2ad3c05c99e0"}}, "__type__": "1"}, "22ccfccd-aa89-48b3-8fb6-2ad3c05c99e0": {"__data__": {"text": "is deprecated in the Redfish schema in favor of using RegistryPrefix and ResourceType.\n\nDEPRECATED\n\nTable 37 describes the types of events that Redfish generates:\n\nTable 37 \u2014 EventType-based eventing\nEvent\tOccurs when\tDescription\nLife cycle\tResources are created, modified, or destroyed.\n\nUsually indicates that the resource and, optionally, its properties have changed.\tNot every modification of a resource results in an event. This behavior is similar to when ETags are changed and implementations might not send an event for every resource change.\n\nFor example, if an event is sent for every Ethernet packet that is received or each time that a sensor changes one degree, more events than fit in a scalable interface are generated.\nAlert\tAn event of some significance happens.\n\nDepending on the resource, may be generated directly or indirectly.\tUsually adopts a message registry approach similar to extended error handling in that a MessageId is included.\n\nAn example of an alert event is, a chassis is opened, a button is pushed, a cable is unplugged, or a threshold exceeded.\n\nThese events usually do not correspond well to life cycle-type events. Therefore, alerts have their own category.\nMetric report\tThe telemetry service generates or updates a metric report.\tGenerated as specified by the MetricReportDefinition resources found subordinate to the telemetry service. Can occur periodically, on demand, or when changes are detected in the metric properties.\n\nFor details, see the Redfish MetricReportDefinition schema.\nEND DEPRECATED\n\n12.1.5 Subscribing to events\nTable 38 describes the properties that a subscriber provides to subscribe to events and filter received messages:\n\nTable 38 \u2014 Subscription properties\nProperty\tDescription\nMessageIds\tAn array of allowable values for MessageId in an event.\n\nAn event is sent to the subscriber if the MessageId of the event is contained in this array or is found in a message registry referenced by RegistryPrefixes.\n\nTo not perform inclusive filtering based upon MessageId, provide an empty array.\n\nThe contents of the array should not include the major or minor version of the message registry. For example, instead of Resource.1.2.ResourceCreated, use Resource.ResourceCreated.\nRegistryPrefixes\tAn array of standard or OEM message registries containing the allowable values for MessageId in an event.\n\nAn event is sent to the subscriber if the MessageId is found in a message registry in this array or is contained in MessageIds.\n\nTo not perform inclusive filtering based upon the message registry of the MessageId, provide an empty array.\n\nThe contents of the array does not include the registry version. For example, instead of Base.1.5.0, use Base.\nResourceTypes\tAn array of standard or OEM resource types.\n\nAn event is sent to the subscriber if the OriginOfCondition resource type matches one of the ResourceTypes values.\n\nTo not perform filtering based upon the resource type of the OriginOfCondition, provide an empty array.\n\nThe contents of the array does not include the schema version. For example, instead of Task.v1_2_0.Task, use Task.\nOriginResources\tAn array of URIs to resources.\n\nAn event is sent to the subscriber if the OriginOfCondition property matches one of the URIs listed in OriginResources. To include subordinate resources regardless of depth, set the SubordinateResources property to true.\n\nTo not perform filtering based upon the URI of the OriginOfCondition, provide an empty array.\nExcludeMessageIds\tAn array of disallowed values for MessageId in an event.\n\nAn event is not sent to the subscriber if the MessageId of the event is contained in this array.\n\nTo not perform exclusive filtering based upon MessageId, provide an empty array.\n\nThe contents of the array should not include the major or minor version of the message registry. For example, instead of Resource.1.2.ResourceCreated, use Resource.ResourceCreated.\nExcludeRegistryPrefixes\tAn array of standard or OEM message registries containing the disallowed values for MessageId in an event.\n\nAn event is not sent to the subscriber if the MessageId is found in a message registry in this", "doc_id": "22ccfccd-aa89-48b3-8fb6-2ad3c05c99e0", "embedding": null, "doc_hash": "82a3aab8eb9401b13ca5591990d025d70ea1a2ca36e334670158550dc7dd8ca7", "extra_info": null, "node_info": {"start": 261026, "end": 265157, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "c0b7ca3c-25ce-450a-9bb0-f8fa712dfdca", "3": "58461a93-cbfd-4552-83bd-e3ab7356d095"}}, "__type__": "1"}, "58461a93-cbfd-4552-83bd-e3ab7356d095": {"__data__": {"text": "not sent to the subscriber if the MessageId is found in a message registry in this array.\n\nTo not perform exclusive filtering based upon the message registry of the MessageId, provide an empty array.\n\nThe contents of the array does not include the registry version. For example, instead of Base.1.5.0, use Base.\nEventFormatType\tThe format that can be sent by using the EventFormatTypes property in the event service.\n\nRepresents the format of the payload sent to the event destination.\n\nIf the subscriber omits this value, the payload corresponds to the Event schema.\nClients can read the EventService resource of a service in order to determine what control properties in the previous table are supported.\n\n12.1.6 Event formats\nTable 39 describes the event formats:\n\nTable 39 \u2014 Event formats\nEvent format\tDescription\nMetric report message objects\tUsed when the telemetry service generates a new or updates an existing metric report. Metric report message objects sent to the specified client endpoint shall contain the properties, as described in the Redfish MetricReport schema.\nEvent message objects\tUsed for all other types of events. Event message objects POSTed to the specified client endpoint shall contain the properties as described in the Redfish Event schema. Supports a message registry. In a message registry approach, a message registry lists the MessageIds in a well-known format. These MessageIds are terse in nature and thus they are much smaller than actual messages, making them suitable for embedded environments.\n\nThe registry also contains a message. The message itself can have arguments and default values for severity and recommended actions. The MessageId property follows the format defined in the MessageId format clause\n\nEvent messages may also have an EventGroupId property, which lets clients know that different messages may be from the same event. For instance, if a LAN cable is disconnected, they may get a specific message from one registry about the LAN cable being disconnected, another message from a general registry about the resource changing, perhaps a message about resource state change, and maybe more. For the client to determine whether these have the same root cause, these messages have the same value for the EventGroupId property.\n12.1.7 OEM extensions\nOEMs can extend both messages and message registries. Any individual message, per the MessageRegistry schema definition, define OEM sections. Thus, if OEMs wish to provide additional information or properties, use the OEM section.\n\nOEMs shall not supply additional message arguments beyond those in a standard message registry. OEMs may substitute their own message registry for the standard registry to provide the OEM section within the registry but shall not change the standard values, such as messages, in such registries.\n\n12.2 Asynchronous operations\nServices that support asynchronous operations implement the TaskService and Task resources.\n\nThe TaskService resource describes the service that handles task operations. It contains a resource collection of zero or more Task resources. Each Task resource describes a long-running operation that is spawned when a request takes longer than a few seconds, such as when a service is instantiated.\n\nThe Task schema defines task structure, including the start time, end time, task state, task status, and zero or more task-associated messages.\n\nEach task has a number of possible states, which are defined in the Task schema as the values for the TaskState property.\n\nWhen a client issues a request that results in a long-running operation, the service returns the HTTP 202 Accepted status code and a Location header that contains a task monitor URI and, optionally, the Retry-After header that defines the amount of time that the client should wait before querying the status of the operation. The 202 Accepted response body should contain an instance of the Task resource that represents the state of the operation.\n\nThe task monitor is an opaque, service-generated URI provided to the client who initiated the request. To query the status of an operation and determine when the operation has been completed and whether it succeeded, the client performs a GET request on the task monitor URI. The client should not include the application/http MIME type in the Accept header.\n\nAs long as the operation is in process, the service shall return the HTTP 202 Accepted status code when the client performs a GET request on the", "doc_id": "58461a93-cbfd-4552-83bd-e3ab7356d095", "embedding": null, "doc_hash": "3639c9aa4a99b88b754f9720cb87aad75646668e01c742b1ba76a32ee54c0dae", "extra_info": null, "node_info": {"start": 265152, "end": 269634, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "22ccfccd-aa89-48b3-8fb6-2ad3c05c99e0", "3": "50cbe525-7367-44af-8718-f5f73e507f3e"}}, "__type__": "1"}, "50cbe525-7367-44af-8718-f5f73e507f3e": {"__data__": {"text": "service shall return the HTTP 202 Accepted status code when the client performs a GET request on the task monitor URI.\n\nIf a service supports cancellation of a task, the Allow header shall contain DELETE for the task monitor. To cancel the operation, the client may perform a DELETE request on the task monitor URI. The service determines when to delete the associated Task resource. The client may also perform a DELETE request on the Task resource to cancel the operation. Deleting the Task resource may invalidate the associated task monitor. A subsequent GET request on the task monitor URI returns either the HTTP 410 Gone or 404 Not Found status code.\n\nIn the unlikely event that a DELETE of the task monitor or Task resource returns the HTTP 202 Accepted status code, an additional task shall not be started and instead the client may monitor the existing Task resource for the status of the cancellation request. When the task finally completes cancellation, operations on the task monitor URI and Task resources shall return the HTTP 404 Not Found status code.\n\nAfter the operation has been completed, the service shall update the TaskState in the Task resource with the appropriate value. In addition, the task monitor shall return:\n\nThe appropriate HTTP status code, such as but not limited to 200 OK for most operations or 201 Created for POST to create a resource.\nThe headers and response body of the initial operation, as if it had completed synchronously.\nIf the initial operation fails, the response body shall contain an error response.\n\nIf the operation has been completed and the service has already deleted the task, the service may return the HTTP 410 Gone or 404 Not Found status code. This situation can occur if the client waits too long to read the task monitor.\n\nTo continue to get status information, the client can use the resource identifier from the 202 Accepted response to directly query the Task resource.\n\nServices that support asynchronous operations shall implement the Task resource.\nThe response to an asynchronous operation shall return the HTTP 202 Accepted status code and set the Location response header to the URI of a task monitor associated with the task. The response may also include the Retry-After header that defines the amount of time that the client should wait before polling for status. The response body should contain a representation of the Task resource.\nGET requests to either the task monitor or Task resource shall return the current status of the operation without blocking.\nHTTP GET, PUT, and PATCH operations should always be synchronous.\nClients shall be prepared to handle both synchronous and asynchronous responses for HTTP GET, PUT, PATCH, POST, and DELETE requests.\nServices shall persist pending tasks produced by client requests containing @Redfish.OperationApplyTime across service restarts, until the task begins execution.\nTasks that are pending execution should include the @Redfish.OperationApplyTime property to indicate when the task will start. If the @Redfish.OperationApplyTime value is AtMaintenanceWindowStart or InMaintenanceWindowOnReset, the task should also include the @Redfish.MaintenanceWindow property.\nServices shall reject modification requests to the @Redfish.MaintenanceWindow property in the Task resource.\nChanging the maintenance window for a resource may not affect existing tasks.\n12.3 Resource tree stability\nThe resource tree, which is defined as the set of URIs and array elements within the implementation, should be consistent on a single service across device resets or power cycles, and should withstand a reasonable amount of configuration change, such as adding an adapter to a server.\n\nThe resource tree on one service might not be consistent across instances of devices. The client should traverse the data model and discover resources to interact with them.\n\nSome resources might remain very stable from system to system, such as manager network settings. However, the architecture does not guarantee this stability.\n\nA resource tree should remain stable across service restarts and minor device configuration changes. Thus, the set of URIs and array element indexes should remain constant.\nA client shall not expect the resource tree to be consistent between instances of services.\n12.4 Discovery\n12.4.1 Discovery overview\nAutomatic discovery of managed devices supporting Redfish may be accomplished by using the Simple Service Discovery Protocol (SSDP). This protocol enables network-efficient discovery without resorting to ping-sweeps, router table searches, or", "doc_id": "50cbe525-7367-44af-8718-f5f73e507f3e", "embedding": null, "doc_hash": "e0bdf3f89d2392dd5ec1be8d162b53d48a00ae748ed40c26a141238de53b4706", "extra_info": null, "node_info": {"start": 269619, "end": 274200, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "58461a93-cbfd-4552-83bd-e3ab7356d095", "3": "1f87cb26-c953-49ef-99e3-a7d2693f738d"}}, "__type__": "1"}, "1f87cb26-c953-49ef-99e3-a7d2693f738d": {"__data__": {"text": "discovery without resorting to ping-sweeps, router table searches, or restrictive DNS naming schemes. Use of SSDP is optional, and if implemented, shall enable the user to disable the protocol through the ManagerNetworkProtocol resource.\n\nThe objective of discovery is for client software to locate managed devices that conform to the Redfish Specification. Therefore, the primary SSDP functionality is incorporated in the M-SEARCH query. Redfish also follows the SSDP extensions and naming that UPnP uses, where applicable, so that systems that conform to the Redfish Specification can also implement UPnP without conflict.\n\n12.4.2 UPnP compatibility\nFor compatibility with general-purpose SSDP client software, primarily UPnP, the service should use UDP port 1900 for all SSDP traffic. In addition, the Time-to-Live (TTL) hop count setting for SSDP multicast messages should default to 2.\n\n12.4.3 USN format\nThe UUID in the USN field of the service shall equal the UUID property in the service root. If multiple or redundant managers exist, the UUID of the service shall remain static regardless of redundancy failover. The unique ID shall be in the canonical UUID format, followed by ::dmtf-org.\n\n12.4.4 M-SEARCH response\nThe Redfish service Search Target (ST) is defined as:\n\nurn:dmtf-org:service:redfish-rest:1\nThe managed device shall respond to M-SEARCH queries for Search Target (ST) of the Redfish service, as well as ssdp:all. For UPnP compatibility, the managed device should respond to M-SEARCH queries for Search Target (ST) of upnp:rootdevice.\n\nThe URN provided in the ST header in the reply shall use the redfish-rest: service name followed by the major version of the Redfish Specification. If the minor version of the Redfish Specification to which the service conforms is a non-zero value, that minor version shall be appended with and preceded by a colon (:).\n\nFor example, a service that conforms to a Redfish Specification v1.4 would reply with a redfish-rest:1:4 service.\n\nThe managed device shall provide clients with the AL header that points to the Redfish service root URL.\n\nFor UPnP compatibility, the managed device should provide clients with the Location header that points to the UPnP XML descriptor.\n\nThe response to an M-SEARCH multicast or unicast query shall use the following format:\n\nHTTP/1.1 200 OK\nCACHE-CONTROL:max-age=<MaxAgeSeconds>\nST:urn:dmtf-org:service:redfish-rest:1\nUSN:uuid:<ServiceUUID>::urn:dmtf-org:service:redfish-rest:1\nAL:<ServiceRootURI>\nEXT:\nwhere\n\n<MaxAgeSeconds> is the number of seconds caches can store the response, and is at least 1800.\n<ServiceUUID> is the UUID of the Redfish service, such as 92384634-2938-2342-8820-489239905423.\n<ServiceRootURI> is the absolute URI of the Redfish service root, such as https://192.168.1.50/redfish/v1/.\nA service may provide additional headers for UPnP compatibility.\n\n12.4.5 Notify, alive, and shutdown messages\nRedfish devices may implement the additional UPnP-defined SSDP messages to announce their availability to software. If implemented, services shall allow the end user to disable the traffic separately from the M-SEARCH response functionality. This capability enables users to use the discovery functionality with minimal amounts of generated network traffic.\n\n12.5 Server-sent events\n12.5.1 General\nServer-sent events (SSE), defined by the Web Hypertext Application Technology Working Group (WHATWG), enables a client to open a connection with a web service. The web service can continuously push data to the client, as needed.\n\nSuccessful resource responses for SSE shall:\n\nReturn the HTTP 200 OK status code.\nHave a Content-Type header set as", "doc_id": "1f87cb26-c953-49ef-99e3-a7d2693f738d", "embedding": null, "doc_hash": "cef12b98279ee9d0fbcc0c749fc553c9cfb57a24f03910cfdd22e063fb4caf43", "extra_info": null, "node_info": {"start": 274223, "end": 277880, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "50cbe525-7367-44af-8718-f5f73e507f3e", "3": "db07472f-1aca-48d6-8c1e-08a51789fde6"}}, "__type__": "1"}, "db07472f-1aca-48d6-8c1e-08a51789fde6": {"__data__": {"text": "the HTTP 200 OK status code.\nHave a Content-Type header set as text/event-stream or text/event-stream;charset=utf-8.\nUnsuccessful resource responses for SSE shall:\n\nReturn an HTTP 400 or greater status code.\nHave a Content-Type header set as application/json or application/json;charset=utf-8.\nContain a JSON object in the response body, as described in Error responses, which details the error or errors.\nA service may occasionally send a comment within a stream to keep the connection alive. Services shall separate events with blank lines. Blank lines should be sent as part of the end of an event, otherwise dispatch may be delayed in conforming consumers.\n\nThe following clauses describe how Redfish uses SSE in different Redfish data model contexts. For details about SSE, see the HTML5 Specification.\n\n12.5.2 Event service\nA service's implementation of the EventService resource may contain the ServerSentEventUri property. If a client performs a GET request on the URI specified by the ServerSentEventUri property, the service shall keep the connection open and conform to the HTML5 Specification until the client closes the socket. Service-generated events shall be sent to the client by using the open connection.\n\nWhen a client opens an SSE stream for the event service, the service shall create an EventDestination resource in the Subscriptions collection for the event service to represent the connection. The Context property in the EventDestination resource shall be a service-generated opaque string.\n\nThe service shall delete the corresponding EventDestination resource when the connection is closed. The service shall close the connection if the corresponding EventDestination resource is deleted.\n\nThe service shall use the id field in the SSE stream to uniquely identify a payload in the SSE stream. The value of the id field is determined by the service. A service should accept the Last-Event-ID header from the client to allow a client to restart the event stream in case the connection is interrupted.\n\nThe service shall use the data field in the SSE stream based on the payload format. The SSE streams have these formats:\n\nMetric report SSE stream. Services shall use this format when the telemetry service generates or updates a metric report.\nEvent message SSE stream. Services shall use this format for all other types of events.\nTo reduce the amount of data returned to the client, the service should support the $filter query parameter in the URI for the SSE stream.\n\nNote: The $filter syntax shall follow the format in the $filter query parameter clause.\n\nThe service should support these properties as filter criteria:\n\nEventFormatType\n\nThe service sends events of the matching EventFormatType.\n\nExample:\n\nhttps://sseuri?$filter=EventFormatType eq 'Event'\nValid values are the EventFormatType enumerated string values that the Redfish EventService schema defines.\n\nEventType\n\nThe service sends events of the matching EventType.\n\nExample:\n\nhttps://sseuri?$filter=EventType eq 'StatusChange'\nValid values are the EventType enumerated string values that the Redfish Event schema defines.\n\nMessageId\n\nThe service sends events with the matching MessageId.\n\nExample:\n\nhttps://sseuri?$filter=MessageId eq 'Contoso.1.0.TempAssert'\nMetricReportDefinition\n\nThe service sends metric reports generated from the MetricReportDefinition.\n\nExample:\n\nhttps://sseuri?$filter=MetricReportDefinition eq '/redfish/v1/TelemetryService/MetricReportDefinitions/PowerMetrics'\nOriginResource\n\nThe service sends events for the resource.\n\nExample:\n\nhttps://sseuri?$filter=OriginResource eq '/redfish/v1/Chassis/1/Thermal'\nRegistryPrefix\n\nThe service sends events with messages that are part of the RegistryPrefix.\n\nExample:\n\nhttps://sseuri?$filter=(RegistryPrefix eq 'Resource') or (RegistryPrefix eq 'Task')\nResourceType\n\nThe service sends events for resources that match the ResourceType.\n\nExample:\n\nhttps://sseuri?$filter=(ResourceType eq 'Power') or (ResourceType eq 'Thermal')\nSubordinateResources\n\nWhen SubordinateResources is true and OriginResource is specified, the", "doc_id": "db07472f-1aca-48d6-8c1e-08a51789fde6", "embedding": null, "doc_hash": "b897989bd5b29d11a3ad995c60133d2de3a859181f56337abe7dd238e74f6d5b", "extra_info": null, "node_info": {"start": 277890, "end": 281968, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "1f87cb26-c953-49ef-99e3-a7d2693f738d", "3": "4fca5ee8-a17e-4439-ba8d-810304a971f1"}}, "__type__": "1"}, "4fca5ee8-a17e-4439-ba8d-810304a971f1": {"__data__": {"text": "SubordinateResources is true and OriginResource is specified, the service sends events for the resource and its subordinate resources.\n\nExample:\n\nhttps://sseuri?$filter=(OriginResource eq '/redfish/v1/Systems/1') and (SubordinateResources eq true)\n12.5.2.1 Event message SSE stream\nThe service shall use the data field in the SSE stream to include the JSON representation of the Event object.\n\nThe following example payload shows a stream that contains a single event with the id field set to 1, and a data field that contains a single Event object.\n\nid: 1\ndata:{\ndata:    \"@odata.type\": \"#Event.v1_6_0.Event\",\ndata:    \"Id\": \"1\",\ndata:    \"Name\": \"Event Array\",\ndata:    \"Context\": \"ABCDEFGH\",\ndata:    \"Events\": [\ndata:        {\ndata:            \"MemberId\": \"1\",\ndata:            \"EventType\": \"Alert\",\ndata:            \"EventId\": \"1\",\ndata:            \"Severity\": \"Warning\",\ndata:            \"MessageSeverity\": \"Warning\",\ndata:            \"EventTimestamp\": \"2017-11-23T17:17:42-0600\",\ndata:            \"Message\": \"The LAN has been disconnected\",\ndata:            \"MessageId\": \"Alert.1.0.LanDisconnect\",\ndata:            \"MessageArgs\": [\ndata:                \"EthernetInterface 1\",\ndata:                \"/redfish/v1/Systems/1\"\ndata:            ],\ndata:            \"OriginOfCondition\": {\ndata:                \"@odata.id\": \"/redfish/v1/Systems/1/EthernetInterfaces/1\"\ndata:            },\ndata:            \"Context\": \"ABCDEFGH\"\ndata:        }\ndata:    ]\ndata:}\n12.5.2.2 Metric report SSE stream\nThe service shall use the data field in the SSE stream to include the JSON representation of the MetricReport object.\n\nThe following example payload shows a stream that contains a metric report with the id field set to 127, and the data field containing the metric report object.\n\nid: 127\ndata:{\ndata:    \"@odata.id\": \"/redfish/v1/TelemetryService/MetricReports/AvgPlatformPowerUsage\",\ndata:    \"@odata.type\": \"#MetricReport.v1_3_0.MetricReport\",\ndata:    \"Id\": \"AvgPlatformPowerUsage\",\ndata:    \"Name\": \"Average Platform Power Usage metric report\",\ndata:    \"MetricReportDefinition\": {\ndata:        \"@odata.id\": \"/redfish/v1/TelemetryService/MetricReportDefinitions/AvgPlatformPowerUsage\"\ndata:    },\ndata:    \"MetricValues\": [\ndata:        {\ndata:            \"MetricId\": \"AverageConsumedWatts\",\ndata:            \"MetricValue\": \"100\",\ndata:            \"Timestamp\": \"2016-11-08T12:25:00-05:00\",\ndata:            \"MetricProperty\":", "doc_id": "4fca5ee8-a17e-4439-ba8d-810304a971f1", "embedding": null, "doc_hash": "3b48ab412e94c21ab62ad298ae47b47c6de7bdf904fd0b46e63d153ac0a2b6a4", "extra_info": null, "node_info": {"start": 281963, "end": 284385, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "db07472f-1aca-48d6-8c1e-08a51789fde6", "3": "2b0cdc1f-a921-48e6-9316-2b41554a29ae"}}, "__type__": "1"}, "2b0cdc1f-a921-48e6-9316-2b41554a29ae": {"__data__": {"text": "           \"MetricProperty\": \"/redfish/v1/Chassis/Tray_1/Power#/0/PowerConsumedWatts\"\ndata:        },\ndata:        {\ndata:            \"MetricId\": \"AverageConsumedWatts\",\ndata:            \"MetricValue\": \"94\",\ndata:            \"Timestamp\": \"2016-11-08T13:25:00-05:00\",\ndata:            \"MetricProperty\": \"/redfish/v1/Chassis/Tray_1/Power#/0/PowerConsumedWatts\"\ndata:        },\ndata:        {\ndata:            \"MetricId\": \"AverageConsumedWatts\",\ndata:            \"MetricValue\": \"100\",\ndata:            \"Timestamp\": \"2016-11-08T14:25:00-05:00\",\ndata:            \"MetricProperty\": \"/redfish/v1/Chassis/Tray_1/Power#/0/PowerConsumedWatts\"\ndata:        }\ndata:    ]\ndata:}\n12.6 Update service\n12.6.1 Overview\nThis clause covers the mechanism for software updates by using the update service.\n\n12.6.2 Software update types\nClients can use these methods to update software through the update service:\n\nSimple updates: The service pulls the update from a client-indicated network location.\nMultipart HTTP push updates: The client uses HTTP or HTTPS with a multipart-formatted request body to push a software image to the service.\n12.6.2.1 Simple updates\nA service can support the SimpleUpdate action within the UpdateService resource. A client can perform a POST request on the action target URI to initiate a pull-based update, as defined by the UpdateService schema. After a successful POST, the service should return the HTTP 202 Accepted status code with the Location header set to the URI of a task monitor. Clients can use this task to monitor the progress and results of the update, which includes the progress of image transfer to the service, as described in the Asynchronous operations clause.\n\n12.6.2.2 Multipart HTTP push updates\nA service may support the MultipartHttpPushUri property within the UpdateService resource. A client can perform an HTTP or HTTPS POST request on the URI specified by this property to initiate a push-based update.\n\nAccess to this URI shall require the same privilege as access to the update service.\nA client POST to this URI shall contain the Content-Type HTTP header with the value multipart/form-data, with the body formatted as defined by this specification. For more information about multipart/form-data HTTP requests, see RFC7578.\nThe client POST request shall contain the binary image as one of the parts in a multipart/form-data request body, as defined by Table 40. In addition, the request shall include action parameters for the update in a JSON formatted part in the same multipart/form-data request body, as defined by Table 40. If the request has no action parameters, an empty JSON object shall be used.\nA service may require the Content-Length HTTP header for POST requests to this URI. In this case, if a client does not include the required Content-Length header in the POST request, the service shall return the HTTP 411 Length Required status code.\nA service should return the HTTP 413 Payload Too Large status code if the size of the binary image is larger than the maximum image size that the service supports, as advertised in MaxImageSizeBytes property in the UpdateService resource.\nAfter a successful POST to this URI, the service shall return the HTTP 202 Accepted status code with a Location header set to the URI of a task monitor. Clients can use this task to monitor the progress and results of the update, as described in the Asynchronous operations clause.\nUpon completion of the requested update, the service shall return the HTTP 200 OK status code and an", "doc_id": "2b0cdc1f-a921-48e6-9316-2b41554a29ae", "embedding": null, "doc_hash": "c188b442872288eb3308c81263e43edb36e15820f91d3e3bf2a6f876ba00b7f8", "extra_info": null, "node_info": {"start": 284427, "end": 287949, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "4fca5ee8-a17e-4439-ba8d-810304a971f1", "3": "dd55cf0e-c8bb-45ad-82fa-12c466c86f09"}}, "__type__": "1"}, "dd55cf0e-c8bb-45ad-82fa-12c466c86f09": {"__data__": {"text": "completion of the requested update, the service shall return the HTTP 200 OK status code and an error response, with a message that indicates success or any additional relevant messages, or the HTTP 204 No Content status code.\nThe service should return the HTTP 200 OK status code. If the update was successfully processed and completed without errors, warnings, or other notifications for the client, the service should return the UpdateSuccessful message from the Update Message Registry in the code property in the response body.\nTable 40 describes the requirements of a multipart/form-data request body for an HTTP push software update:\n\nTable 40 \u2014 Multipart HTTP push updates\nRequest body part\tHTTP headers\tHeader value and parameters\tRequired\tDescription\nAction parameters JSON part\tContent-Disposition\tform-data; name=\"UpdateParameters\"\tYes\tJSON-formatted part for passing the action parameters. The value of the name field shall be \"UpdateParameters\". The format of the JSON shall follow the definition of the UpdateParameters object in the UpdateService schema.\nServices may allow the inclusion of the @Redfish.OperationApplyTime property in the request body. See Operation apply time.\nContent-Type\tapplication/json;charset=utf-8 or application/json\tYes\tMedia type format and character set of this request part.\nUpdate file binary part\tContent-Disposition\tform-data; name=\"UpdateFile\"; filename=string\tYes\tBinary file to use for this software update. The value of the name field shall be \"UpdateFile\". The value of the filename field should reflect the name of the file as loaded by the client.\nContent-Type\tapplication/octet-stream\tYes\tMedia type format of the binary update file.\nOEM specific parts\tContent-Disposition\tform-data; name=\"OemXXXX\"\tNo\tOptional OEM part. The value of the name field shall start with \"Oem. Content-Type is optional, and depends on the OEM part type.\nThis example shows a multipart/form-data request to push an update image:\n\nPOST /redfish/v1/UpdateService/upload HTTP/1.1\nHost: <host-path>\nContent-Type: multipart/form-data; boundary=---------------------------d74496d66958873e\nContent-Length: <computed-length>\nConnection: keep-alive\nX-Auth-Token: <session-auth-token>\n\n-----------------------------d74496d66958873e\nContent-Disposition: form-data; name=\"UpdateParameters\"\nContent-Type: application/json\n\n{\n   \"Targets\": [\"/redfish/v1/Managers/1\"],\n   \"@Redfish.OperationApplyTime\": \"OnReset\",\n   \"Oem\": {}\n}\n\n-----------------------------d74496d66958873e\nContent-Disposition: form-data; name=\"UpdateFile\"; filename=\"flash.bin\"\nContent-Type: application/octet-stream\n\n<software image binary>\n13 Security details\n13.1 Transport Layer Security (TLS) protocol\n13.1.1 Transport Layer Security (TLS) protocol overview\nImplementations shall support the Transport Layer Security (TLS) protocol v1.2 with RFC7525 recommendations or later. Implementations may remove support for older versions for TLS in favor of newer versions.\n\nDEPRECATED: Previous versions of this specification allowed for TLS v1.1.\n\nImplementations should support:\n\nThe Storage Networking Industry Association (SNIA) TLS Specification for Storage Systems.\nThe latest version of the TLS v1.x specification.\n13.1.2 Cipher suites\nImplementations shall only support cipher suites listed as \"Recommended\" in the TLS Cipher Suites table defined by the IANA TLS Parameters registry.\n\nCipher suites that are listed as mandatory in various RFCs, but are not \"Recommended\" in the TLS Cipher Suites table defined by the IANA TLS Parameters registry, shall not be supported.\n\nImplementations should consider the support of pre-shared key ciphers suites listed as \"Recommended\" in the TLS Cipher Suites table defined by the IANA TLS Parameters registry, which enable authentication and identification without trusted certificates.\n\nDEPRECATED\n\nImplementations should support AES-256-based ciphers from the TLS", "doc_id": "dd55cf0e-c8bb-45ad-82fa-12c466c86f09", "embedding": null, "doc_hash": "10a94702ce7573f47fdedc29ed3a7209ba207f1395dd92cde8dbbb7e8b1463a0", "extra_info": null, "node_info": {"start": 287888, "end": 291787, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "2b0cdc1f-a921-48e6-9316-2b41554a29ae", "3": "86ef4402-abf3-4fda-bd70-dde5651bcaf3"}}, "__type__": "1"}, "86ef4402-abf3-4fda-bd70-dde5651bcaf3": {"__data__": {"text": "should support AES-256-based ciphers from the TLS suites.\n\nRedfish implementations should consider the support of ciphers, such as the following ciphers, which enable authentication and identification without trusted certificates:\n\n    TLS_PSK_WITH_AES_256_GCM_SHA384\nTLS_DHE_PSK_WITH_AES_256_GCM_SHA384\nTLS_RSA_PSK_WITH_AES_256_GCM_SHA384\nThe advantage of these recommended ciphers is:\n\nAES-GCM is not only efficient and secure, but hardware implementations can achieve high speeds with low cost and low latency because the mode can be pipelined.\n\nAdditionally, Redfish implementations should support the following cipher:\n\nTLS_RSA_WITH_AES_128_CBC_SHA\nFor more information, see RFC5487 and RFC5288.\n\nEND DEPRECATED\n\n13.1.3 Certificates\nRedfish implementations shall support replacement of the default certificate if one is provided.\n\nRedfish implementations shall use certificates that conform to X.509-v3, as defined in RFC5280.\n\n13.2 Sensitive data\nOperations that contain sensitive data should use HTTPS only. For example, a SimpleUpdate action with a user name and password should use HTTPS to protect the sensitive data.\n\nProperties in service responses that represent sensitive data, such as passwords, shall be null.\n\nResponses from URIs where the URI itself contains sensitive data in a URI segment may return the HTTP 404 Not Found status code instead of the HTTP 401 Unauthorized status code, the HTTP 403 Forbidden status code, or the HTTP 405 Method Not Allowed status code to prevent attackers from obtaining the sensitive data in the URI.\n\n13.3 Authentication\n13.3.1 Authentication overview\nServices:\n\nShall support both HTTP Basic authentication and Redfish session login authentication.\nShall use only connections that conform to TLS to transport the data between any third-party authentication service and clients.\nShall not require a client that uses HTTP Basic authentication to create a session.\nMay implement other authentication mechanisms.\n13.3.2 Authentication requirements\n13.3.2.1 Resource and operation authentication requirements\nServices shall authenticate all write requests to Redfish resources. For example:\n\nPOST, except to the Sessions resource collection for authentication\nPUT\nPATCH\nDELETE\nRedfish resources shall not be available as unauthenticated, except for:\n\nThe service root to identify the device and service locations.\nThe Redfish metadata document to get resource types.\nThe OData service document for compatibility with OData clients.\nThe Redfish OpenAPI YAML document for compatibility with OpenAPI clients.\nThe version object at /redfish.\nServices may reject requests to the previous resources if invalid credentials are provided by the client.\n\nNote: This specification does not cover external services that are linked through external references. These services may have other security requirements.\n\n13.3.2.2 HTTP header authentication requirements\nAn authentication header shall accompany every request that establishes a secure channel.\n\nServices:\n\nShall process HTTP headers for authentication before other headers that may affect the response. For example, ETag, If-Match, and so on.\nShall not use HTTP cookies to authenticate any activity, such as GET, POST, PUT, PATCH, and DELETE.\n13.3.2.3 Authentication failure requirements\nWhen authentication fails, extended error messages shall not provide privileged information.\n\n13.3.3 HTTP Basic authentication\nServices shall support HTTP Basic authentication, as defined by RFC7617, and shall use only connections that conform to TLS to transport the data between any third-party authentication service and clients.\n\nAll requests that use HTTP Basic authentication shall require HTTPS.\n\nWhen multi-factor authentication is enabled, services shall reject HTTP Basic authentication for accounts that are not configured to bypass multi-factor authentication. Session-based authentication is required in this case.\n\nNote: The IETF has highlighted security concerns with HTTP Basic authentication. While HTTPS is required for the usage of", "doc_id": "86ef4402-abf3-4fda-bd70-dde5651bcaf3", "embedding": null, "doc_hash": "c783030406f8da4835bea73d8791c777900004dcc8ea4d1c0ec326e3e527cae2", "extra_info": null, "node_info": {"start": 291824, "end": 295860, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "dd55cf0e-c8bb-45ad-82fa-12c466c86f09", "3": "75245e91-a3ef-4f4f-aa9e-98ffb252654b"}}, "__type__": "1"}, "75245e91-a3ef-4f4f-aa9e-98ffb252654b": {"__data__": {"text": "security concerns with HTTP Basic authentication. While HTTPS is required for the usage of HTTP Basic authentication, there are other concerns implementers need to be aware of that RFC7617 documents.\n\n13.3.4 Redfish session login authentication\nService shall provide login sessions that conform with this specification.\n\nSession management is determined by the implementation of the Redfish service, which includes orphaned session timeout and the management of the number of simultaneous open sessions.\n\n13.3.4.1 Redfish login sessions\nFor improved performance and security, a client should use the session management interface to create a Redfish login session. The session service specifies the URI for session management.\n\nTo establish a session, find the URI in either:\n\nThe session service's Sessions property.\nThe service root's links property under the Sessions property.\nBoth URIs shall be the same.\n\n{\n   \"SessionService\": {\n      \"@odata.id\": \"/redfish/v1/SessionService\"\n   },\n   \"Links\": {\n      \"Sessions\": {\n         \"@odata.id\": \"/redfish/v1/SessionService/Sessions\"\n      }\n   },\n   ...\n}\n13.3.4.2 Session login\nTo create a Redfish session without an authentication header, perform an HTTP POST request on the session service's Sessions resource collection. The POST to create a session shall only be supported with HTTPS. If both HTTP and HTTPS are enabled, a POST request to create a session through the HTTP port should redirect to the HTTPS port. Include the following POST body:\n\nPOST /redfish/v1/SessionService/Sessions HTTP/1.1\nHost: <host-path>\nContent-Type: application/json;charset=utf-8\nContent-Length: <computed-length>\nAccept: application/json;charset=utf-8\nOData-Version: 4.0\n\n{\n   \"UserName\": \"<username>\",\n   \"Password\": \"<password>\"\n}\nFields in brackets are placeholders for client-specific values.\n\nWhen a multi-factor authentication type that requires tokens is enabled, services shall require the Token property in the POST request to the SessionCollection resource for accounts that are not configured to bypass multi-factor authentication. The service shall verify the provided token in addition to verifying the username and password.\n\nTo verify that the request has been initiated from an authorized client domain, services should save the Origin header in reference to this session creation and compare it to subsequent requests using this session.\n\nThe response to the POST request to create a session shall include:\n\nX-Auth-Token header. Contains a session authentication token that the client can use in subsequent requests.\nLocation header. Contains a hyperlink to the new Session resource.\nJSON response body. Contains the full representation of the new Session resource.\nThe following sample response shows a newly created session:\n\nHTTP/1.1 201 Created\nLocation: /redfish/v1/SessionService/Sessions/1\nX-Auth-Token: <session-auth-token>\n\n{\n   \"@odata.id\": \"/redfish/v1/SessionService/Sessions/1\",\n   \"@odata.type\": \"#Session.v1_0_0.Session\",\n   \"Id\": \"1\",\n   \"Name\": \"User Session\",\n   \"Description\": \"User Session\",\n   \"UserName\": \"<username>\",\n   \"Password\": null\n}\nThe client that sends the session login request should save the session authentication token from the X-Auth-Token header and the contents of the Location header from the response of the login POST request.\n\nTo authenticate subsequent requests, the client sets the X-Auth-Token header to the session authentication token that the POST login request returns.\n\nNote: The session ID differs from the session authentication token, as follows:\n\nSession ID: The session ID uniquely identifies the Session resource. The response data with the last segment of the Location header URI returns is the session ID. To view active sessions and terminate any session, an administrator with sufficient privileges can use the session ID.\nSession authentication token:", "doc_id": "75245e91-a3ef-4f4f-aa9e-98ffb252654b", "embedding": null, "doc_hash": "0db2b8794e4abedb305b24a62a29a8546e31c16348307039e4bc3c788d425e25", "extra_info": null, "node_info": {"start": 295827, "end": 299694, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "86ef4402-abf3-4fda-bd70-dde5651bcaf3", "3": "07584687-9dbd-4c23-a34a-860fdd1f0a59"}}, "__type__": "1"}, "07584687-9dbd-4c23-a34a-860fdd1f0a59": {"__data__": {"text": "an administrator with sufficient privileges can use the session ID.\nSession authentication token: Only the client that executes the login has the session authentication token.\n13.3.4.3 Session lifetime\nUnlike some token-based methods that use token expiration times, Redfish sessions time out. As long as a client continues to send requests more frequently than the session timeout period, the session remains open and the session authentication token remains valid. If the session times out, it is automatically terminated.\n\n13.3.4.4 Session termination or logout\nWhen the client logs out, the Redfish session terminates. The session terminates through a DELETE request to the Session resource defined in either the Location header URI or the session ID in the response data.\n\nThis ability to DELETE a session through the Session resource enables an administrator with sufficient privileges to terminate other users' sessions from a different session.\n\nWhen a session is terminated, the service shall not affect independent connections established originally by this session for other purposes, such as connections for server-sent events or transferring an image for the update service.\n\n13.3.5 Client certificate authentication\nIf client certificate authentication is enabled, the service shall send a client certificate request during the Transport Layer Security (TLS) handshake. When the service obtains a client certificate during the TLS handshake, the service shall verify the certificate with the certificates in CertificateCollection resource referenced by the ClientCertificate property within the MFA property of the AccountService resource. The service shall check for certificate revocation before processing the request with any configured Online Certificate Status Protocol (OCSP) servers.\n\nThe RespondToUnauthenticatedClients property within the ClientCertificate property within the MFA property of the AccountService resource controls the response behavior when an invalid certificate is provided by the client.\n\nIf the property contains true or is not supported by the service, the service shall not fail the TLS handshake. This is to allow the service to send error messages or unauthenticated resources to the client.\nIf the property contains false, the service shall fail the TLS handshake.\n13.4 Authorization\n13.4.1 Authorization overview\nThe Redfish authorization subsystem controls which users have access to resources and the type of access that users have. It consists of two parts: the privilege model and the operation-to-privilege mapping.\n\nThe privilege model maps users to roles and maps roles to privileges. A privilege is a permission to complete an operation, such as read or write, within a defined management domain. For example the ConfigureUsers privilege allows adding a user. A user is authorized to access a resource if they have the privileges required for that resource. The operation-to-privilege mapping defines which privileges are required to access any given operation.\n\nRedfish allows vendors to extend the standard privilege model with OEM privileges and custom OEM roles. OEM privileges and custom roles participate in the privilege model the same as Redfish standard privileges and roles. Services may also allow clients to create custom roles. Restricted roles and restricted privileges allow vendors to further refine their authority model.\n\nServices shall enforce the same privilege model for ETag-related activity as is enforced for the data being represented by the ETag. For example, the privilege required to read an ETag shall be the same as the privilege to read the data item that the ETag represents.\n\n13.4.2 Privilege model\nEach user shall be assigned exactly one role with the RoleId property in the ManagerAccount resource. The value of the RoleId property identifies a Role resource in the RoleCollection resource, where a role defines a set of privileges. A role shall be assigned to a user when a manager account is created. The client shall provide the RoleId property when creating a manager account to select one of the standard or custom roles.\n\nServices shall provide information about all roles through the RoleCollection resource. The AssignedPrivileges and OemPrivileges arrays in the Role resource define a set of assigned privileges for the associated role. Two roles with the same privileges shall behave equivalently.\n\n13.4.2.1 Roles\nRedfish defines a set of standard roles, allows a service to define custom OEM roles, and allows", "doc_id": "07584687-9dbd-4c23-a34a-860fdd1f0a59", "embedding": null, "doc_hash": "d200dd5f422d1100d3c1f745c95e95c4492a853dfc1b9ac725d2c5f9e7312ac7", "extra_info": null, "node_info": {"start": 299686, "end": 304199, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "75245e91-a3ef-4f4f-aa9e-98ffb252654b", "3": "3041c9bf-cc44-42b8-bf2b-79b23b8bc4d3"}}, "__type__": "1"}, "3041c9bf-cc44-42b8-bf2b-79b23b8bc4d3": {"__data__": {"text": "a set of standard roles, allows a service to define custom OEM roles, and allows client-defined custom roles.\n\nA service shall support all of the standard roles in Table 41. The value of the Id and AssignedPrivileges properties in the Role resource for the standard roles shall contain the Role name and Assigned privileges column values, respectively. The AssignedPrivileges property for standard roles shall not be modifiable. The IsPredefined property for standard roles shall contain the value true.\n\nTable 41 describes the standard roles:\n\nTable 41 \u2014 Required standard roles\nRole name\tAssigned privileges\nAdministrator\tLogin, ConfigureManager, ConfigureUsers, ConfigureComponents, ConfigureSelf\nOperator\tLogin, ConfigureComponents, ConfigureSelf\nReadOnly\tLogin, ConfigureSelf\nA service may support one or more of the standard roles in Table 42. The value of the Id and AssignedPrivileges properties in the Role resource for the standard roles shall contain the Role name and Assigned privileges column values, respectively. The AssignedPrivileges property for standard roles shall not be modifiable. The IsPredefined property for standard roles shall contain the value true.\n\nTable 42 describes the optional standard roles:\n\nTable 42 \u2014 Optional standard roles\nRole name\tAssigned privileges\tDescription\nSystemAdministrator\tLogin, ConfigureSelf, AdministrateSystems\tAdminsitrator for systems found in the systems collection. Able to manage boot configuration, keys, and certificates for systems.\nSystemOperator\tLogin, ConfigureSelf, OperateSystems\tOperator for systems found in the systems colletion. Able to perform resets and configure interfaces.\nStorageAdministrator\tLogin, ConfigureSelf, AdministrateStorage\tAdministrator for storage subsystems and storage systems found in the storage collection and storage system collection respectively.\nStorageBackupOperator\tLogin, ConfigureSelf, OperateStorageBackup\tOperator for storage backup functionality for storage subsystems and storage systems found in the storage collection and storage system collection respectively.\nA service may define custom OEM roles. The IsPredefined property for OEM roles shall contain the value true. A service shall not allow users to modify predefined OEM roles. OEM role names should begin with a lowercase character or \"Oem\" followed by a vendor name to avoid conflict with future Redfish predefined role names.\n\nA service may allow custom client-defined roles to be created, modified, and deleted. If allowed, a user can perform a POST request on the RoleCollection resource to create a role, indicating privileges in the AssignedPrivileges and OemPrivileges properties in the Role resource. A service may restrict which privileges are allowed. The IsPredefined property for client-defined roles shall contain the value false. A service shall not allow a client-defined role to be deleted while it is in use, for example, when it is assigned to a local user or an LDAP RemoteRoleMapping property.\n\nThe value of the RoleId property shall be unique across all roles within the RoleCollection resource.\n\nNon-Redfish services, such as those enabled by the AccountTypes property within the ManagerAccount resource, should map the Redfish RoleId to their permission system. For example, an SSH user with Administrator as the value of the RoleId property could map to \"root\" for the SSH service. However, the privileges specified by the AssignedPrivileges and OemPrivileges do not necessarily map to non-Redfish services.\n\n13.4.2.2 Restricted roles and restricted privileges\nRestricted roles and restricted privileges are intended to prevent privilege escalation. Restricted roles and restricted privileges are not less functional, but their usage is restricted to particular users. For example, to have a security administrator have privileges that the administrator does not have, you need to ensure the administrator cannot escalate to the security administrator role. An implementation can help achieve this by restricting the Administrator role and providing an alternate administrator role that lacks the security privilege.\n\nA service may restrict any role. The Restricted property for restricted roles shall contain the value true. When a standard role is restricted, services shall provide the AlternateRoleId property to reference a non-restricted custom role intended for clients to use as an", "doc_id": "3041c9bf-cc44-42b8-bf2b-79b23b8bc4d3", "embedding": null, "doc_hash": "9673e42c30c13b66e43b2b165e2d6a19bdbfaab2092d223dd60d3d1ee6057390", "extra_info": null, "node_info": {"start": 304220, "end": 308604, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "07584687-9dbd-4c23-a34a-860fdd1f0a59", "3": "c076b365-76bc-43f3-b1b9-9ebf51a2efa2"}}, "__type__": "1"}, "c076b365-76bc-43f3-b1b9-9ebf51a2efa2": {"__data__": {"text": "property to reference a non-restricted custom role intended for clients to use as an alternate. Services may pre-define or create accounts that are configured with a restricted role.\n\nServices shall not allow:\n\nA RoleId value for a restricted role to be specified when creating or modifying a ManagerAccount resource. This ensures administrators cannot create an account for themselves that has a restricted role.\nModification of ManagerAccount resources with a RoleId property containing a value for a restricted role, with the exception of the Enabled property. This ensures administrators cannot gain access to another account.\nDeletion of ManagerAccount resources with a RoleId property containing a value for a restricted role.\nA restricted role to be specified in the LocalRole property within the RemoteRoleMapping property within the AccountService and ExternalAccountProvider resources.\nA service may restrict any privilege, including standard and OEM privileges. The RestrictedPrivileges and RestrictedOemPrivileges properties in the AccountService resource shall specify the restricted privileges. Services shall not allow custom roles to specify restricted privileges. Services may contain predefined roles that are configured with restricted privileges.\n\n13.4.2.3 OEM privileges\nOEM privileges allow a service to extend the privilege model by adding additional privileges to have additional control of what operations are allowed. It can be used when a standard privilege is overly broad.\n\nA service may define OEM privileges and may include OEM privileges in any predefined role, including standard and custom OEM roles. The OemPrivileges property within the Role resource shall contain the OEM privileges that are assigned to the role. The OemPrivileges property in the Role resource for the predefined roles shall not be modifiable.\n\nA service may allow OEM privileges to be assigned to client-defined roles.\n\n13.4.3 Redfish service operation-to-privilege mapping\nFor every request that a client makes to a service, the service shall determine that the authenticated identity of the requester has the authorization to complete the requested operation on the resource in the request.\n\nUsing the role and privileges authorization model where an authenticated identity context is assigned a role and a role is a set of privileges, the service typically checks an HTTP request against a mapping of the authenticated requesting identity role and privileges to determine whether the identity privileges are sufficient to complete the operation in the request.\n\nA service may perform additional checks based on the identity of the user and remove data from responses. For example, a service might restrict access for non-administrative users to only access their own ManagerAccount, Session, and EventDestination resources.\n\n13.4.3.1 Why specify operation-to-privilege mapping?\nInitial versions of the Redfish Specifications defined several role-to-privilege mappings for standardized roles and normatively identified several privilege labels but did not normatively detail what these privileges or how privilege-to-operations mappings could be specified or represented in a normative fashion.\n\nThe lack of a methodology to define which privileges are required to complete a requested operation against the URI in the request puts at risk the interoperability between service implementations that clients may encounter due to variances in privilege requirements between implementations.\n\nAlso, a lack of methodology for specifying and representing the operation-to-privilege mapping prevents the Redfish Forum or other governing organizations from normatively defining privilege requirements for a service.\n\n13.4.3.2 Representing operation-to-privilege mappings\nA service should provide a Privilege Registry in the registry collection. This registry represents the privileges required to complete HTTP operations against resources supported by the service.\n\nThe Privilege Registry is a JSON document that contains a Mappings array of where an individual entry exists for every resource type that the service supports.\n\nThe operation-to-privilege mapping is defined for every resource type and applies to every resource the service implements for the applicable resource type.\n\nIn several situations, specific resources or properties may have differing operation-to-privilege mappings than the resource type-level mappings. In these cases, the resource type-level mappings need to be overridden. The PrivilegeRegistry schema defines the", "doc_id": "c076b365-76bc-43f3-b1b9-9ebf51a2efa2", "embedding": null, "doc_hash": "281f131e3ba789d9c8fa33662ab2a50a5d8208cbf5f58e16f2bf4b7f6cb30652", "extra_info": null, "node_info": {"start": 308600, "end": 313144, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "3041c9bf-cc44-42b8-bf2b-79b23b8bc4d3", "3": "ac0ffff7-7678-4831-918e-1791c02100cf"}}, "__type__": "1"}, "ac0ffff7-7678-4831-918e-1791c02100cf": {"__data__": {"text": "mappings need to be overridden. The PrivilegeRegistry schema defines the methodology for resource type-level operation-to-privilege mappings and related overrides.\n\nIf a service provides a Privilege Registry, the service shall use the Redfish Forum's Privilege Registry definition as a base operation-to-privilege mapping definition for operations that the service supports to promote interoperability for Redfish clients.\n\n13.4.3.3 Operation map syntax\nAn operation map defines the set of privileges required to complete an operation on a resource-type.\n\nThe mapped operations are GET, PUT, PATCH, POST, DELETE, and HEAD. A privilege mapping is defined for each operation, irrespective of whether the service or data model supports the operation on the resource-type.\n\nThe privilege labels may be the Redfish standardized labels that the PrivilegeType enumeration in the Privileges schema defines and they may be OEM-defined privilege labels. The required privileges for an operation are specified using logical AND and OR behavior. For more information, see the Privilege AND and OR syntax clause.\n\nThe following example defines the privileges required for various operations on the Manager resource. Unless the implementation defines mapping overrides to the OperationMap array, the specified operation-to-privilege mapping represents behavior for all Manager resources in a service implementation.\n\n{\n   \"Entity\": \"Manager\",\n   \"OperationMap\": {\n      \"GET\": [{\n         \"Privilege\": [\"Login\"]\n      }],\n      \"HEAD\": [{\n         \"Privilege\": [\"Login\"]\n      }],\n      \"PATCH\": [{\n         \"Privilege\": [\"ConfigureManager\"]\n      }],\n      \"POST\": [{\n         \"Privilege\": [\"ConfigureManager\"]\n      }],\n      \"PUT\": [{\n         \"Privilege\": [\"ConfigureManager\"]\n      }],\n      \"DELETE\": [{\n         \"Privilege\": [\"ConfigureManager\"]\n      }]\n   }\n}\n13.4.3.4 Mapping overrides syntax\nTable 43 describes the operation-to-privilege mapping, which varies from the resource type-level mapping:\n\nTable 43 \u2014 Mapping overrides syntax\nSituation\tDescription\nProperty override\tProperty has different privilege requirements than the resource in which it resides. For example, the Password property in the ManagerAccount resource requires the ConfigureSelf or ConfigureUsers privilege to change, in contrast to the ConfigureUsers privilege required for the other properties in ManagerAccount resources. If multiple properties with the same name are present in a resource, the property override applies to all property instances.\nSubordinate override\tResource is used in context of another resource and the contextual privileges need to govern. For example, the privileges for PATCH operations on EthernetInterface resources depend on whether the resource is subordinate to the Manager resource, where ConfigureManager is required, or the ComputerSystem resource, where ConfigureComponents is required.\nResource URI override\tResource instance has different privilege requirements for an operation than those defined for the resource type.\nThe overrides are defined in the context of the operation-to-privilege mapping for a resource type.\n\nIf multiple overrides are specified for a single resource type, the following precedence should be used for determining the appropriate override to apply:\n\nProperty override\nResource URI override\nSubordinate override\n13.4.3.5 Property override example\nIn the following example, the Password property on the ManagerAccount resource requires the ConfigureSelf or ConfigureUsers privilege to change, in contrast to the ConfigureUsers privilege required for the other properties in ManagerAccount resources:\n\n{\n   \"Entity\": \"ManagerAccount\",\n   \"OperationMap\": {\n      \"GET\": [{\n         \"Privilege\": [\"ConfigureManager\"]\n      },", "doc_id": "ac0ffff7-7678-4831-918e-1791c02100cf", "embedding": null, "doc_hash": "670a7b40b99b210ea25a0cc4b69e661dd0ff4a3f63516514ebe2ba2f5895281d", "extra_info": null, "node_info": {"start": 313153, "end": 316911, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "c076b365-76bc-43f3-b1b9-9ebf51a2efa2", "3": "964f0df5-73d1-482e-8a8e-fc9ae9fc12c3"}}, "__type__": "1"}, "964f0df5-73d1-482e-8a8e-fc9ae9fc12c3": {"__data__": {"text": "    \"Privilege\": [\"ConfigureManager\"]\n      }, {\n         \"Privilege\": [\"ConfigureUsers\"]\n      }, {\n         \"Privilege\": [\"ConfigureSelf\"]\n      }],\n      \"HEAD\": [{\n         \"Privilege\": [\"Login\"]\n      }],\n      \"PATCH\": [{\n         \"Privilege\": [\"ConfigureUsers\"]\n      }],\n      \"POST\": [{\n         \"Privilege\": [\"ConfigureUsers\"]\n      }],\n      \"PUT\": [{\n         \"Privilege\": [\"ConfigureUsers\"]\n      }],\n      \"DELETE\": [{\n         \"Privilege\": [\"ConfigureUsers\"]\n      }]\n   },\n   \"PropertyOverrides\": [{\n      \"Targets\": [\"Password\"],\n      \"OperationMap\": {\n         \"PATCH\": [{\n            \"Privilege\": [\"ConfigureUsers\"]\n         }, {\n            \"Privilege\": [\"ConfigureSelf\"]\n         }]\n      }\n   }]\n}\n13.4.3.6 Subordinate override\nThe Targets property in SubordinateOverrides lists a hierarchical representation for when to apply the override. In the following example, the override for an EthernetInterface resource is applied when it is subordinate to an EthernetInterfaceCollection resource, which in turn is subordinate to a Manager resource. If a client were to PATCH an EthernetInterface resource that matches this override condition, it requires the ConfigureManager privilege. Otherwise, the client requires the ConfigureComponents privilege.\n\n{\n   \"Entity\": \"EthernetInterface\",\n   \"OperationMap\": {\n      \"GET\": [{\n         \"Privilege\": [\"Login\"]\n      }],\n      \"HEAD\": [{\n         \"Privilege\": [\"Login\"]\n      }],\n      \"PATCH\": [{\n         \"Privilege\": [\"ConfigureComponents\"]\n      }],\n      \"POST\": [{\n         \"Privilege\": [\"ConfigureComponents\"]\n      }],\n      \"PUT\": [{\n         \"Privilege\": [\"ConfigureComponents\"]\n      }],\n      \"DELETE\": [{\n         \"Privilege\": [\"ConfigureComponents\"]\n      }]\n   },\n   \"SubordinateOverrides\": [{\n      \"Targets\": [\"Manager\", \"EthernetInterfaceCollection\"],\n      \"OperationMap\": {\n         \"PATCH\": [{\n            \"Privilege\": [\"ConfigureManager\"]\n         }],\n         \"POST\": [{\n            \"Privilege\": [\"ConfigureManager\"]\n         }],\n         \"PUT\": [{\n            \"Privilege\": [\"ConfigureManager\"]\n         }],\n         \"DELETE\": [{\n            \"Privilege\": [\"ConfigureManager\"]\n         }]\n      }\n   }]\n}\n13.4.3.7", "doc_id": "964f0df5-73d1-482e-8a8e-fc9ae9fc12c3", "embedding": null, "doc_hash": "f24fb5dab62fce109248d2c614814793e9011d33c7c12b32326fca5b50a97877", "extra_info": null, "node_info": {"start": 316940, "end": 319141, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "ac0ffff7-7678-4831-918e-1791c02100cf", "3": "7b472a46-f426-4061-8646-e20d86a6f255"}}, "__type__": "1"}, "7b472a46-f426-4061-8646-e20d86a6f255": {"__data__": {"text": "    }\n   }]\n}\n13.4.3.7 Resource URI override\nThe following example demonstrates the resource URI override syntax to define operation privilege variations for resource URIs.\n\nThe example defines both ConfigureComponents and OEMAdminPriv privileges as required to make a PATCH operation on the two resource URIs listed as targets.\n\n{\n   \"Entity\": \"ComputerSystem\",\n   \"OperationMap\": {\n      \"GET\": [{\n         \"Privilege\": [\"Login\"]\n      }],\n      \"HEAD\": [{\n         \"Privilege\": [\"Login\"]\n      }],\n      \"PATCH\": [{\n         \"Privilege\": [\"ConfigureComponents\"]\n      }],\n      \"POST\": [{\n         \"Privilege\": [\"ConfigureComponents\"]\n      }],\n      \"PUT\": [{\n         \"Privilege\": [\"ConfigureComponents\"]\n      }],\n      \"DELETE\": [{\n         \"Privilege\": [\"ConfigureComponents\"]\n      }]\n   },\n   \"ResourceURIOverrides\": [{\n      \"Targets\": [\"/redfish/v1/Systems/VM6\", \"/redfish/v1/Systems/Sys1\"],\n      \"OperationMap\": {\n         \"GET\": [{\n            \"Privilege\": [\"Login\"]\n         }],\n         \"PATCH\": [{\n            \"Privilege\": [\"ConfigureComponents\", \"OEMSysAdminPriv\"]\n         }]\n      }\n   }]\n}\n13.4.3.8 Privilege AND and OR syntax\nThe array placement of the privilege labels in the OperationMap GET, HEAD, PATCH, POST, PUT, and DELETE operation element arrays define the logical combinations of privileges that are required to call an operation on a resource or property.\n\nFor OR logical combinations, the privilege label appears in the operation element array as individual elements.\n\nThe following example defines either Login or OEMPrivilege1 privileges that are required to perform a GET request.\n\n{\n   \"GET\": [{\n      \"Privilege\": [\"Login\"]\n   }, {\n      \"Privilege\": [\"OEMPrivilege1\"]\n   }]\n}\nFor logical AND combinations, the privilege label appears in the Privilege property array in the operation element.\n\nThe following example defines both ConfigureComponents and OEMSysAdminPriv that are required to perform a PATCH request.\n\n{\n   \"PATCH\": [{\n      \"Privilege\": [\"ConfigureComponents\", \"OEMSysAdminPriv\"]\n   }]\n}\n13.4.4 Delegated authorization with OAuth 2.0\nServices may support the RFC6749-defined OAuth 2.0 authorization framework.\n\n13.4.4.1 OAuth 2.0 overview\nThe OAuth 2.0 authorization framework allows a client to obtain access to a resource server from a resource owner and an authorization server.\n\nClients request access from a resource owner and is given an authorization grant. The authorization grant is then provided to the authorization server and an access token is provided to the client. The client provides the access token to the resource server in order to access a protected resource.\n\nA Redfish service is considered to be a resource server in the OAuth 2.0 authorization framework.\n\n13.4.4.2 OAuth 2.0 data model requirements\nServices that support OAuth 2.0:\n\nShall support the OAuth2 property in the AccountService resource.\nMay support additional OAuth 2.0 servers with ExternalAccountProvider", "doc_id": "7b472a46-f426-4061-8646-e20d86a6f255", "embedding": null, "doc_hash": "b9e39c4ffa47bc52848781fd8c4c246fe339c59369eb796396255a9c23b32802", "extra_info": null, "node_info": {"start": 319162, "end": 322111, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "964f0df5-73d1-482e-8a8e-fc9ae9fc12c3", "3": "8e552055-ef62-48c6-9533-074483ce4fe3"}}, "__type__": "1"}, "8e552055-ef62-48c6-9533-074483ce4fe3": {"__data__": {"text": "AccountService resource.\nMay support additional OAuth 2.0 servers with ExternalAccountProvider resources.\n13.4.4.3 OAuth 2.0 access tokens\nAccess tokens are the credentials the client provides to a service to access a protected resource. Clients provide the access token to the service in the Authorization request header as a bearer token.\n\nServices that support OAuth 2.0 shall support receiving an RFC7519-defined JSON Web Token (JWT) in the Authorization request header.\n\nJWTs are a compressed JSON structure that contain a JOSE Header, a set of claims that describe the type of access that is granted to a client, and a signature. Each component of a JWT is Base64URL-encoded and concatenated with a . to form the token string for the Authorization header.\n\nTable 44 describes the JWT JOSE Header parameters and their requirements for services and clients. Any other parameters are outside the scope of this specification.\n\nServices shall process the parameters in Table 44 if the Service requirement column contains Yes. Services should process other parameters.\n\nThe JWT provided by the client shall contain the parameters in Table 44 if the JWT requirement column contains Yes. The JWT provided by the client may omit other parameters.\n\nTable 44 \u2014 OAuth 2.0 JWT JOSE Header parameters\nParameter\tService requirement\tJWT requirement\tDescription\ntyp\tYes\tNo\tType of token. The string is case insensitive. If not present, services shall assume the value is JWT.\nalg\tYes\tYes\tAlgorithm for the signature of the token. Services shall not accept the value none.\nTable 45 describes the claims and their requirements for services and clients. Any other claims are outside the scope of this specification.\n\nServices shall process the claims in Table 45 if the Service requirement column contains Yes. Services should process other claims.\n\nThe JWT provided by the client shall contain the claims in Table 45 if the JWT requirement column contains Yes. The JWT provided by the client may omit other claims.\n\nTable 45 \u2014 OAuth 2.0 JWT claims\nClaim\tService requirement\tJWT requirement\tDescription\niss\tYes\tYes\tIssuer of the token. Identifies the authorization server that signed the token.\nsub\tYes\tYes\tSubject of the token. Identifies the client issued the token.\naud\tYes\tYes\tAudience of the token. Identifies the resource server intended to accept the token.\nexp\tYes\tNo\tExpiration time of the token.\nnbf\tYes\tNo\t\"Not before\" time of the token.\niat\tYes\tNo\tIssued time of the token.\njti\tYes\tNo\tUnique identifier of the token.\nscope\tYes\tYes\tType of access the token grants. See the Redfish OAuth2.0 scope usage clause.\nExample JOSE Header:\n\n{\n    \"typ\": \"JWT\",\n    \"alg\": \"RS256\"\n}\nExample JWT claims:\n\n{\n    \"iss\": \"https://contoso.org/services/oauth2\",\n    \"sub\": \"Joe Smith\",\n    \"aud\": \"92384634-2938-2342-8820-489239905423\",\n    \"exp\": 1735707600,\n    \"scope\": \"Redfish.Role.Operator\",\n    \"jti\": \"97d52311-5f55-4482-b947-8a70c326fdfd\"\n}\nExample token encoded in the Authorization request header:\n\nAuthorization: Bearer mF_9.B5f-4.1JqM\nNote: The previous example does not reflect a real JWT and is provided to show encoding in the Authorization request header.\n\n13.4.4.4 Redfish OAuth2.0 scope usage\nThe value of the scope claim is expressed as a list of space-delimited, case-sensitive strings. Each value in the list describes a type of access that was granted to the client.\n\nThis specification defines two formats for values in the scope claim: Redfish roles and Redfish privileges. Other formats are outside the scope of this specification.\n\nRedfish roles within the scope claim shall be in the", "doc_id": "8e552055-ef62-48c6-9533-074483ce4fe3", "embedding": null, "doc_hash": "f99dfc6ab8710ef43a4ed8af99b9cca4d305d96468c5625814888e969ab2a1dd", "extra_info": null, "node_info": {"start": 322041, "end": 325633, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "7b472a46-f426-4061-8646-e20d86a6f255", "3": "50dea32e-2387-45ce-ab1c-f47c0ea8a5b1"}}, "__type__": "1"}, "50dea32e-2387-45ce-ab1c-f47c0ea8a5b1": {"__data__": {"text": "scope of this specification.\n\nRedfish roles within the scope claim shall be in the form Redfish.Role.<RoleId> where <RoleId> is the identifier of the Redfish role granted to the client.\n\nRedfish privileges within the scope claim shall be in the form Redfish.Privilege.<PrivilegeId> where <PrivilegeId> is the standard privilege or OEM privilege granted to the client.\n\nServices shall ignore unsupported values in the scope claim. If the token provided by the client is valid, the service shall apply roles and privileges in the scope claim to the operation.\n\n13.5 Account service\n13.5.1 Account service overview\nImplementations should store user passwords with one-way encryption techniques.\nImplementations may support exporting user accounts with passwords, but shall do so using encryption methods to protect them.\nUser accounts shall support ETags and atomic operations. Implementations may reject requests that do not include an ETag.\nWhen authentication fails, extended error messages shall not provide privileged information.\n13.5.2 Password management\nA Redfish service provides local user accounts through a collection of ManagerAccount resources located under the account service. The ManagerAccount resources enable users to manage their own account information, and for administrators to create, delete, and manage other user accounts.\n\nWhen account properties are changed, the service may close open sessions for this account and require re-authentication.\n\n13.5.3 Password change required handling\nThe service may require that passwords assigned by the manufacturer be changed by the end user prior to accessing the service. In addition, administrators may require users to change their account's password upon first access.\n\nThe ManagerAccount resource contains a PasswordChangeRequired boolean property to enable this functionality. Resources that have the property set to true shall require the user to change the write-only Password property in that resource before access is granted. Manufacturers including user credentials for the service may use this method to force a change to those credentials before access is granted.\n\nWhen a client accesses the service by using credentials from a ManagerAccount resource that has a PasswordChangeRequired value of true, the service shall allow:\n\nA session login and include a @Message.ExtendedInfo object in the response containing the PasswordChangeRequired message from the Base Message Registry. This indicates to the client that their session is restricted to performing only the password change operation before access is granted.\nA GET operation on the ManagerAccount resource associated with the account.\nA PATCH operation on the ManagerAccount resource associated with the account to update the Password property. If the value of Password is changed, the service shall also set the PasswordChangeRequired property to false.\nFor all other operations, the service shall respond with the HTTP 403 Forbidden status code and include a @Message.ExtendedInfo object that contains the PasswordChangeRequired message from the Base Message Registry.\n\n13.6 Asynchronous tasks\nIrrespective of which user or privileged context starts a task, services shall enforce the privileges described in the privilege registry required to perform operations on the Task resource.\n\n13.7 Event subscriptions\nBefore pushing event data object to the destination, the service may verify the destination for identity purposes.\n\n14 Redfish Host Interface\nThe Redfish Host Interface Specification defines how software that runs on a host computer system can interface with a Redfish service that manages the host. For details, see DSP0270.\n\n15 Redfish composability\nA service may implement the CompositionService resource off of ServiceRoot to bind resources. One example is disaggregated hardware, which allows for independent components, such as processors, memory, I/O controllers, and drives, to be bound to create logical constructs that operate together. This enables a client to dynamically assign resources for an application.\n\nA service that supports composability shall implement resource blocks, defined by the ResourceBlock schema, and resource zones, defined in the Zone schema, for the composition service. Resource blocks provide an inventory of components available to the client for building compositions. Resource zones describe the binding restrictions of the resource blocks that the service manages.\n\nThe resource zones within the composition service shall include the collection capabilities annotation in responses. The collection capabilities annotation allows a client to discover which resource collections in the service support compositions, the different composition request types", "doc_id": "50dea32e-2387-45ce-ab1c-f47c0ea8a5b1", "embedding": null, "doc_hash": "1e076f0d09e20ec2e30d3932e2dc470d6d84d72ffa90b8a955701fd4d11e33fa", "extra_info": null, "node_info": {"start": 325650, "end": 330397, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "8e552055-ef62-48c6-9533-074483ce4fe3", "3": "0c0d3d7e-a21f-46d3-aaec-8b50ebff0aea"}}, "__type__": "1"}, "0c0d3d7e-a21f-46d3-aaec-8b50ebff0aea": {"__data__": {"text": "discover which resource collections in the service support compositions, the different composition request types allowed, how the POST request for the resource collection is formatted, and which properties are required.\n\nA service that supports composability and client multi-tenancy shall:\n\nImplement the FreePool and ActivePool properties in the CompositionService resource.\nImplement the CompositionReservations property in the CompositionService resource.\nFilter GET requests for the ResourceBlocks, FreePool, ActivePool, ResourceZones, and CompositionReservations resource collections where the value of the Client property in the ResourceBlock resource or CompositionReservation resource matches the client identity.\nEnsure the resources in composition requests are assigned to the client specified by the Client property in the ResourceBlock resource or CompositionReservation resource.\nNot filter any HTTP operations within the composition service for clients that contain the privilege ConfigureCompositionInfrastructure unless specified by query parameters.\nMove resource blocks between the FreePool and ActivePool resource collections based on the outcome of composition requests.\nA resource block is moved to the FreePool resource collection when it is not contributing to any composed resources.\nA resource block is moved to the ActivePool resource collection when it is contributing to one or more composed resources.\n15.1 Composition requests\n15.1.1 Composition requests overview\nA service that implements the composition service, as defined by the CompositionService schema, shall support one or more of the following types of composition requests:\n\nSpecific composition\nConstrained composition\nExpandable resources\nA service that supports the removal of a composed resource shall support the DELETE method on the composed resource.\n\nA service may implement the Compose action in the CompositionService resource for the above composition requests.\n\n15.1.2 Specific composition\nA specific composition is when a client identifies an exact set of resources in which to build a logical entity.\n\nA service that supports specific compositions shall support a POST request that contains an array of hyperlinks to resource blocks. The schema for the resource being composed defines where the resource blocks are specified in the request.\n\nThe following example shows a ComputerSystem being composed with a specific composition request:\n\nPOST /redfish/v1/Systems HTTP/1.1\nContent-Type: application/json;charset=utf-8\nContent-Length: <computed length>\nOData-Version: 4.0\n\n{\n   \"Name\": \"Sample Composed System\",\n   \"Links\": {\n      \"ResourceBlocks\": [{\n         \"@odata.id\": \"/redfish/v1/CompositionService/ResourceBlocks/ComputeBlock0\"\n      }, {\n         \"@odata.id\": \"/redfish/v1/CompositionService/ResourceBlocks/DriveBlock2\"\n      }, {\n         \"@odata.id\": \"/redfish/v1/CompositionService/ResourceBlocks/NetBlock4\"\n      }]\n   }\n}\n15.1.3 Constrained composition\nA constrained composition is when a client has identified a set of criteria, or constraints, in which to build a logical entity. This includes criteria such as quantities of components, or characteristics of components. A service that supports constrained compositions shall support a POST request that contains the set of characteristics to apply to the composed resource. The specific format of the request is defined by the schema for the resource being composed. This type of request may include expanded elements of resources subordinate to the composed resource.\n\nThe following constrained composition request composes a ComputerSystem:\n\nPOST /redfish/v1/Systems HTTP/1.1\nContent-Type: application/json;charset=utf-8\nContent-Length: <computed length>\nOData-Version: 4.0\n\n{\n   \"Name\": \"Sample Composed System\",\n   \"PowerState\": \"On\",\n   \"BiosVersion\": \"P79 v1.00 (09/20/2013)\",\n   \"Processors\": {\n      \"Members\": [{\n        ", "doc_id": "0c0d3d7e-a21f-46d3-aaec-8b50ebff0aea", "embedding": null, "doc_hash": "ce093897df7f1606452e462aee01a646b4c52c5dd99a6d22d4d234966c71d1d4", "extra_info": null, "node_info": {"start": 330369, "end": 334272, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "50dea32e-2387-45ce-ab1c-f47c0ea8a5b1", "3": "d01d3273-130a-44b3-8fd8-36ca7424523b"}}, "__type__": "1"}, "d01d3273-130a-44b3-8fd8-36ca7424523b": {"__data__": {"text": "     \"Members\": [{\n         \"@Redfish.RequestedCount\": 4,\n         \"@Redfish.AllowOverprovisioning\": true,\n         \"ProcessorType\": \"CPU\",\n         \"ProcessorArchitecture\": \"x86\",\n         \"InstructionSet\": \"x86-64\",\n         \"MaxSpeedMHz\": 3700,\n         \"TotalCores\": 8,\n         \"TotalThreads\": 16\n      }]\n   },\n   \"Memory\": {\n      \"Members\": [{\n         \"@Redfish.RequestedCount\": 4,\n         \"CapacityMiB\": 8192,\n         \"MemoryType\": \"DRAM\",\n         \"MemoryDeviceType\": \"DDR4\"\n      }]\n   },\n   \"SimpleStorage\": {\n      \"Members\": [{\n         \"@Redfish.RequestedCount\": 6,\n         \"Devices\": [{\n            \"CapacityBytes\": 322122547200\n         }]\n      }]\n   },\n   \"EthernetInterfaces\": {\n      \"Members\": [{\n         \"@Redfish.RequestedCount\": 1,\n         \"SpeedMbps\": 1000,\n         \"FullDuplex\": true,\n         \"NameServers\": [\"names.redfishspecification.org\"],\n         \"IPv4Addresses\": [{\n            \"SubnetMask\": \"255.255.252.0\",\n            \"AddressOrigin\": \"Dynamic\",\n            \"Gateway\": \"192.168.0.1\"\n         }]\n      }]\n   }\n}\n15.1.4 Expandable resources\nAn expandable resource is when a service has a baseline composition that cannot be removed. Instead of a client making requests to create a composed resource, a client can only add or remove resources from the composed resource. A service that supports expandable resources shall support one or more of the update methods that the Updating a composed resource clause describes.\n\n15.2 Updating a composed resource\nA service that supports updating a composed resource shall provide one or more of the following methods to update composed resources:\n\nThe PUT or PATCH methods on the composed resource with a modified list of resource blocks.\nActions on the composed resource for adding and removing resource blocks.\nIf the actions for adding and removing resource blocks are present in the resource, clients should use this method before attempting PUT or PATCH.\n16 Aggregation\nAggregation has been a Redfish concept since its inception. Redfish uses collection for services that can represent more than one system. As the scale of Redfish implementations increase, clients want to operate on Redfish resources in bulk.\n\nAggregation is the representation of Redfish resources from a variety of sources so that they can be managed, in whole or in part, by a Redfish client. Membership can be heterogeneous and arbitrary, but it is expected that most aggregate members are the same resource type, such as an aggregate of ComputerSystem resource, which is represented by an Aggregate resource where members of its Elements array are exclusively of type ComputerSystem. The Redfish service proxies on behalf of the aggregated components to provide common operations. The Redfish service is representing resources on behalf of the components and incoming operations must be tracked by the Redfish service before being accomplished by communicating with the individual resources. Thus, aggregation also allows a Redfish client to act on resources as", "doc_id": "d01d3273-130a-44b3-8fd8-36ca7424523b", "embedding": null, "doc_hash": "feb542500bf925d2db686ee13b9d4119cef0aafb369f127f88ded1a7593941b2", "extra_info": null, "node_info": {"start": 334359, "end": 337383, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "0c0d3d7e-a21f-46d3-aaec-8b50ebff0aea", "3": "08336141-8f91-4c40-abe8-8df694953bdb"}}, "__type__": "1"}, "08336141-8f91-4c40-abe8-8df694953bdb": {"__data__": {"text": "with the individual resources. Thus, aggregation also allows a Redfish client to act on resources as a group using aggregates.\n\n16.1 Classes of aggregators\n16.1.1 Implicit and complex aggregators\nThere are at least two classes of Redfish aggregators:\n\nImplicit aggregators. An example of an implicit aggregator is an enclosure manager, such as a manager of blades in an enclosure. This implementation has ComputerSystem resources representing blades in the ComputerSystemCollection resource, and one or more Manager resources in the ManagerCollection resource. It also would likely have a Chassis resource for each blade and a Chassis resource for the enclosure, which would use the Contains property in Links to express the containment relationship to the individual blades. This class of aggregator has tight coupling with system design, and proxies requests to and from the blades to perform management functions.\nComplex aggregators. An example of a complex aggregator is a rack-level manager, fabric manager, or a manager of similar scale, especially if it represents resources that it gathers through the proxy of information from other managers, like BMCs. The sources that this manager aggregates are more complex in nature and potentially varying. This manager probably has an interface to the resources and proxies the Redfish service on behalf of each set of resources. At this scale, a Redfish client would prefer to provide common functions, such as resetting a set of systems, to the Redfish service as a whole rather than invoking actions individually to achieve scalability requirements. This class of service also may need assistance in adding members to the service, such as providing address and account information for the aggregator to contact the components and initiate the proxy of Redfish operations.\n16.1.2 Use cases\nSeveral use cases make explicit aggregator representation necessary. What they have in common is the need for common functions for scalability. There are several classes of these common functions.\n\nOne use case is service-type functions. An example is a firmware update on a large number of systems. Rather than invoke actions on individual resources, it is more efficient for a client to specify to which resources to apply the image. In this case, a service already exists in the model so an aggregation service is not needed. Instead the existing service must be augmented to enable the application of an image to a list of resources.\n\nAnother use case is common actions. Examples are the Reset or SetDefaultBootOrder actions. These actions are defined in the ComputerSystem schema, but the Redfish URI structure requires that the action occur on each ComputerSystem resource. Thus, an individual operation applies to each resource. It is more efficient for a client to send one action with the list of the resources to which to apply the action. For example, to reset one thousand systems, sending one thousand individual reset operations requires significant overhead as compared to sending a single operation with a list of one thousand systems to reset.\n\nA final use case is changing an attribute on multiple members of a collection. An example is changing the boot order on a large number of systems. This use case requires one operation per system. However, assuming the resources are in the same collection, the deep PATCH operation meets the requirements of this use case.\n\n16.2 Aggregation service\n16.2.1 Aggregation service overview\nThe AggregationService resource represents the Redfish aggregation service, which provides aggregation functions.\n\nThe aggregation service contains the group actions that can apply to groups of resources. The AggregationService schema defines the common actions that a client can take on groups of resources. These actions take an array of resource URIs as one of the parameters to which the action applies. If all members of the resource array do not support the method, a 4xx status code shall be returned and the body shall contain an error response. If at least one member of the resource array successfully completed the action but others did not, the status code should be 200 OK with @Message.ExtendedInfo objects for the failed members.\n\nThe aggregation service also contains Aggregate, AggregationSource, and ConnectionMethod resources.\n\n16.2.2 Aggregator requirements\nBy implementing the AggregationService resource and including an AggregationSourceCollection resource, a complex aggregator shall meet the following requirements:\n\nProxy to the aggregated resources on behalf of the service.\nProvide error and state", "doc_id": "08336141-8f91-4c40-abe8-8df694953bdb", "embedding": null, "doc_hash": "5fc545f27a4c4d5a13ff30eee1c0a5c45fb47f3ed38ab1e7ff86bf140397250a", "extra_info": null, "node_info": {"start": 337312, "end": 341926, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "d01d3273-130a-44b3-8fd8-36ca7424523b", "3": "533a349a-8428-4bdb-af76-5c2a3bde7c04"}}, "__type__": "1"}, "533a349a-8428-4bdb-af76-5c2a3bde7c04": {"__data__": {"text": "to the aggregated resources on behalf of the service.\nProvide error and state propagation, such as health roll-up, when needed to provide such data to the parent resource.\nCombine resource collections from the aggregated resources.\nFor example, ComputerSystem resources that were gathered through proxy shall be in one ComputerSystemCollection resource.\nServices shall complete a URI fix-up for all aggregated resources because every system cannot be at /redfish/v1/Systems/1.\nIt is advisable for Redfish implementations to use unique values for the Id properties. For example, base the Id property of a ComputerSystem resource on something unique like a UUID or serial number, or the manufacturer MAC address for network adapters, or WWN for Fibre Channel controllers.\nUnify other services.\nThe aggregation implementation hosts only one event service. The implementation shall combine all events into one stream. The implementation also hosts only one sessions service, telemetry service, update service, and other services. Thus the aggregator represents unification of Redfish services with which it communicates and proxies on the client's behalf to the providers of those services and information.\n16.2.3 Aggregates\nThe Aggregate resource is the grouping mechanism that clients use to indicate to the service that this group of resources can be treated the same for certain functions, such as the actions. Each aggregate contains the list of individual resources that are to be treated as a single unit for operations. For example, if a client wishes to express that a subset of the ComputerSystemCollection resource be treated as a single unit for certain operations like reset, reset boot order, or firmware update, it can express the aggregate as the target URI for the operation.\n\nThe Aggregate schema defines the common actions that a client can make on an aggregate. The Aggregate resource contains an Elements array that specifies the members of the aggregate. Actions that are supported on an aggregate but not supported on all Elements, such as a Reset action that is not supported on an individual member of the Elements array, are not silently skipped. If all members of the Elements array do not support the method, a 4xx status code shall be returned and the body shall contain an error response. If at least one member of the Elements array successfully completed the action, but others did not, the status code should be 200 OK with @Message.ExtendedInfo objects for the failed members.\n\n16.2.4 Aggregation sources and connection methods\nThe aggregation service model also includes a definition for the information used to access the resources being represented by the aggregator. Two collections of resources are used to represent this. These are the AggregationSource and ConnectionMethod resources.\n\nThe AggregationSource resource represents the source of information for the resources being reflected by the aggregator. It typically represents a lower layer service provided by another manager. It contains information needed to access that source, such as the address and account information. It also has a reference to the ConnectionMethod resource used to access it.\n\nThe ConnectionMethod resource represents the protocol and other semantics required to communicate with the resources being aggregated. Examples of connection methods are Redfish, IPMI, and proprietary access methods. For methods such as IPMI, it's also possible to specify the variations and nuances from multiple vendors.\n\n17 ANNEX A (informative) Change log\nVersion\tDate\tDescription\n1.18.0\t2023-04-04\tAdded URI segment annotation clause to allow schema to describe when URIs do not meet expected naming rules.\n1.17.1\t2023-04-04\tUpdated example in M-SEARCH response to better explain the different values a service provides in an M-SEARCH response.\nUpdated Writable properties annotation to include an example.\nUpdated Modification success responses to provide links to appropriate sections for each operation. Clarified that response bodies for create operations are optional.\nUpdated the response table in POST (action) to use consistent terminology for action responses.\nUpdated Resource and operation authentication requirements to state that services can optionally reject requests to unauthenticated resources if the provided credentials are invalid.\nUpdated Action responses to provide guidance for finding the schema definition of the action response based on the action's name in response payloads.\nUpdated The $select query parameter to clarify that unsupported properties are omitted from", "doc_id": "533a349a-8428-4bdb-af76-5c2a3bde7c04", "embedding": null, "doc_hash": "20ad9749253a85bca5f765a61b000f09331e8d4cbe01e245f8d146dc8cc2fe2b", "extra_info": null, "node_info": {"start": 341946, "end": 346541, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "08336141-8f91-4c40-abe8-8df694953bdb", "3": "b5c68073-871e-4f72-9704-f5ce21b50de5"}}, "__type__": "1"}, "b5c68073-871e-4f72-9704-f5ce21b50de5": {"__data__": {"text": "The $select query parameter to clarify that unsupported properties are omitted from responses.\nUpdated Response headers to make Access-Control-Allow-Origin an optional response header.\nClarified Duration values to state that negative durations are not allowed.\n1.17.0\t2022-12-08\tUpdated Deprecated annotation to allow for deprecating URIs.\nUpdated Protocol details to allow for optional HTTP 2.0 support.\nUpdated Permissions annotation to allow for write-only to be specified to enforce services respond with null for their value.\nUpdated HTTP Basic authentication and Redfish session login authentication to describe behavior when multi-factor authentication is enabled.\nAdded Client certificate authentication clause to allow for client certificates to be authenticated during TLS handshaking.\n1.16.1\t2022-12-08\tUpdated GUID and UUID values to correct the format for GUID and UUID properties.\nUpdated The $select query parameter to clarify the syntax of $select for arrays.\nUpdated Status codes to remove references to nonexistent HTTP headers.\nUpdated Sensitive data to clarify that the phrase \"URIs containing sensitive data\" is meant to reflect the URI itself rather than the response body.\nCorrected the example RelatedProperties property in message objects throughout the specification to remove the leading # to meet syntax specified by RFC6901.\nUpdated MessageId format to better formalize the string tokens used to distinguish the different parts of MessageId values.\n1.16.0\t2022-08-04\tAdded optional standard roles to the Roles clause.\nAdded new Allowable patterns for string values, Allowable values for numbers and durations, and Writable properties annotation payload annotations.\nRenamed allowable values payload annotation to Allowable values for strings.\n1.15.2\t2022-08-04\tUpdated URI naming rules to give an example URI when a hyperlink to a subordinate resource is not found at the root of the resource.\nUpdated Modification success responses to not imply a service deficiency if HTTP 204 No Content is returned.\nClarified the usage of the WWW-Authenticate header in the Response headers clause.\nUpdated Redfish service operation-to-privilege mapping to explain that the service can filter response data based on the user's identity beyond what is assigned as a privilege.\nUpdated Links to state that some design exceptions have been made for putting a hyperlink inside of Links or at the root of a resource.\nUpdated ETags to give guidance to implementers when managing resources that update frequently.\nUpdated Properties overview to state that all properties are required to have well-known types, with some exceptions.\nUpdated OEM-specified object naming to allow for exceptions to domain suffix rules for listed organizations.\nUpdated Asynchronous operations to better distinguish Task resources from task monitors to the reader.\nUpdated The $select query parameter to allow for object-level messages and messages for requested properties even if not specified by the client.\nClarified The $select query parameter that error responses act as if $select was not specified.\n1.15.1\t2022-04-07\tUpdated Query parameter overview to recommend the = character is ignored if specified with the only and excerpt query parameters.\nUpdated Multipart HTTP push updates to use consistent terminology for action parameters, and to correct the use of HTTP status code 413 instead of 412 to indicate a payload is too large to be processed by the service.\nUpdated Schema definition languages to use normative terminology throughout.\nClarified Asynchronous tasks to explain the allowable operations on a Task resource are controlled by the privilege registry.\nClarified ETags to describe the behavior of ETags during expansion.\nDeprecated statement in POST to subscription collection with regards to keeping MessageIds and RegistryPrefixes as mutually exclusive.\nUpdated Subscribing to events to match the schema updates made to EventDestination.\n1.15.0\t2021-12-02\tUpdated the Operation apply time and Multipart HTTP push updates to expand the usage of the @Redfish.OperationApplyTimeSupport annotation to properties referencing URIs for multipart HTTP POST operations.\n1.14.2\t2021-12-02\tClarified that the Created message from the Base Message Registry is an acceptable response in the POST (action) clause when a new resource is", "doc_id": "b5c68073-871e-4f72-9704-f5ce21b50de5", "embedding": null, "doc_hash": "ff32c7abefca602b82cb3b00119b2fa1187f63c27665a21cbb7087a7dedeabd4", "extra_info": null, "node_info": {"start": 346536, "end": 350870, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "533a349a-8428-4bdb-af76-5c2a3bde7c04", "3": "2aaf2078-af54-4d6a-ac0f-d1404bd7cc0e"}}, "__type__": "1"}, "2aaf2078-af54-4d6a-ac0f-d1404bd7cc0e": {"__data__": {"text": "Message Registry is an acceptable response in the POST (action) clause when a new resource is created.\nClarified the Permissions annotation clause to describe requirements for schemas published by DMTF.\nUpdated the Units of measure annotation clause to describe encoding rules for units not covered by UCUM. Provided alternative recommendations for RPM units.\nClarified Collection capabilities annotation clause that properties marked as required are not required for the resource referenced by the CapabilitiesObject property.\nClarified that @Redfish.MaintenanceWindow property behavior in Task resources in the Asynchronous operations clause.\n1.14.1\t2021-10-06\tCorrected various examples for @Redfish.OperationApplyTimeSupport, @Redfish.Settings, @Redfish.MaintenanceWindow, and @Redfish.SettingsApplyTime to include @odata.type.\nClarified the Link header clause to state the Link response header requirement only applies to resources.\n1.14.0\t2021-09-15\tExtended Query parameter overview clause to define how OEM query parameters are constructed.\nAdded Delegated authorization with OAuth 2.0 clause to define how clients provide OAuth 2.0 tokens to a service as a method of authorization.\n1.13.1\t2021-08-04\tVarious clarifications to the Extending standard resources clause to better describe naming rules for OEM resources.\nAdded recommended URI for local schema files to the Redfish-defined URIs and relative reference rules clause.\nClarified the OData $metadata clause that any absolute or relative URI is allowed for referencing schema files.\nAdding missing statement to the URI naming rules clause that Members cannot be used as the value of a URI segment for resource collections.\nAdded missing exceptions to the PATCH (update) clause for when @odata.id is to not be ignored by the service.\nClarified the ETags clause that both strong and weak ETags are allowed in If-Match and If-None-Match request headers.\nClarified the Deep operations clause to specify that services ignore resources in the payload if no modifications are requested.\nAdded the Enumerations clause to clarify the design patterns for creating enumerations.\nClarified the Id clause that HTTP unsafe characters are not permitted in the value of the Id property due to its usage in URI construction.\nClarified the Non-resource reference properties that these properties are strings containing URIs.\n1.13.0\t2021-04-08\tAdded client multi-tenancy behavior to the Redfish composability clause. This adds free pool, active pool, and composition reservation constructs to Redfish composability.\nAdded Compose action as a method of performing composition requests to the Redfish composability clause.\n1.12.1\t2021-04-08\tInternational Organization for Standardization (ISO) updates:\nAdded paragraph numbering.\nAdded Foreword to the table of contents as an unnumbered heading, and placed Acknowledgments inside Foreword.\nMade Scope a level-1 clause.\nNormative references: Removed unused normative references and moved some references into Bibliography. The Bibliography lists, for information, those documents which are cited informatively in the document, as well as other information resources.\nChanged Abstract to Introduction.\nCorrected level-1 clauses to remove hanging paragraphs and to correct the occurrence of the single Use cases and Aggregator requirements sub-clauses.\nTerms, definitions, symbols, and abbreviated terms:\nCombined Symbols and abbreviated terms clause with Terms and definitions clause into Terms, definitions, symbols, and abbreviated terms clause.\nFormatted the clause correctly.\nAdded the Hardware terms, Web development terms, and Redfish terms sub-clauses to this clause.\nRemoved may, shall, and should from definitions.\nRemoved these terms: managed system, Redfish event receiver, and Redfish provider.\nCorrected definitions so none begin with an article.\nChanged may to can or might where appropriate.\nChanged one must to shall.\nAdded numbered captions to tables and changed occurrences of the following table to use precise references to the table numbers.\nFixed broken cross-references.\nCorrected URIs in the deep PATCH", "doc_id": "2aaf2078-af54-4d6a-ac0f-d1404bd7cc0e", "embedding": null, "doc_hash": "9d669e4c5c9ae923cb4e2db7716c11001b5151006c018661d1bd47c0ebfd5ddc", "extra_info": null, "node_info": {"start": 350865, "end": 354983, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "b5c68073-871e-4f72-9704-f5ce21b50de5", "3": "2ca18a48-9d18-45f4-ba37-e7e77936ad38"}}, "__type__": "1"}, "2ca18a48-9d18-45f4-ba37-e7e77936ad38": {"__data__": {"text": "broken cross-references.\nCorrected URIs in the deep PATCH example.\nFixed several query parameter examples where string values were not properly wrapped with single quotes.\nCorrected Accept-Encoding usage to allow for encoded responses if the client does not provide the header to align with RFC7231.\nClarified usage of DELETE for the @Redfish.OperationApplyTimeSupport term.\nRemoved duplicative clauses for HTTP 405 Method Not Allowed usage in PATCH (update) in favor of more general clauses.\nReplaced exception table in PATCH (update) in favor of text.\nMoved error cases from response table in POST (action) to be with other text that describes error cases.\nAdded linkage in the description for HTTP 201 Created to reference response bodies for actions.\nAdded informative text regarding the usage of If-Match and If-Match-None headers in GET, PATCH, and PUT clauses.\nClarified the behavior of $select when an object property is selected.\nAdded introductory text to guide readers to other Redfish documents.\nClarified the ordering of processing query parameters.\nClarified that update restrictions for a resource can be modified to support writable OEM properties.\nClarified the Settings resource clause to show behavior of properties in the active resource and settings resource based on the service's capabilities.\nCorrected behavior for usage of null based on the configuration of a resource and other special situations.\nClarified OEM naming rules for all OEM definitions to ensure names don't collide.\nRemoved the term \"namespace\" from all non-CSDL related clauses and replaced them with references to a new resource type term.\n1.12.0\t2020-12-01\tAdded introductory text to the Authorization clause.\nClarified usage of RoleId and how there are standard roles, custom OEM roles, and client-defined custom roles.\nAdded Restricted roles and restricted privileges to describe behavior for when roles and privileges are marked as restricted.\n1.11.2\t2020-12-01\tClarified that the Accept-Encoding header is used to request compression of response bodies.\nCorrected the PATCH (update), PUT (replace), and DELETE (delete) clauses to leverage all normative statements for successful operations found in the Modification success responses clause.\nReplaced RFC5988 reference with RFC8288.\nUpdated IETF links to use the \"IETF Tools\" site.\nClarified that insert capabilities is just for resource creation.\nFixed ETag examples to be RFC7234-conformant.\nClarified that OEM resources can have subordinate resources.\nReplaced RFC4627 reference with RFC8259.\nReplaced conflicting statements found in \"HTTP redirect authentication requirements\" with general clause for enforcing authentication and authorization at the target resource.\nClarified behavior of @odata.count when a collection is filtered.\nCreated standalone \"MessageId format\" clause.\nRemoved duplicative text found in the event format table and referenced the message object clauses as needed.\nCorrected the response body specified for a PATCH operation containing read-only properties.\nAdded informative text in the intro to the Data model clause describing the methods for OEM extensions.\nClarified that sensitive data in URIs can be hidden from unauthorized users by returning HTTP 404 Not Found.\nAdded embedded links to the Location header entry in the response header table.\nCorrected $select example in the The $select query parameter clause.\nCorrected several embedded links to direct to the correct clause.\n1.11.1\t2020-08-04\tAdded missing clause requiring sensitive data to be returned as null.\nClarified that Resolution, Severity, and MessageSeverity in responses can be service-defined and not come from a message registry.\nRelaxed schema rules to require description, long description, URI, and capabilities annotations only for schemas published or republished by DMTF.\nAdded clauses to Schema modification rules to allow for properties, actions, parameters, and URIs to be removed, descriptions to be modified, and pattern and length annotations to be added if not specified.\nRelaxed rule for the OData metadata document to not require, but only recommend that all referenced namespaces are included in the document.\nAdded clause to clarify the", "doc_id": "2ca18a48-9d18-45f4-ba37-e7e77936ad38", "embedding": null, "doc_hash": "ef7bc800fbe2318baab903df1015b7f0c838e938ff848e3080e3a6939a769bb4", "extra_info": null, "node_info": {"start": 355011, "end": 359216, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "2aaf2078-af54-4d6a-ac0f-d1404bd7cc0e", "3": "cf74b004-7a24-4725-b581-f6363e003c8b"}}, "__type__": "1"}, "cf74b004-7a24-4725-b581-f6363e003c8b": {"__data__": {"text": "namespaces are included in the document.\nAdded clause to clarify the usage of empty strings.\nClarified behavior of $skip when the value is greater than or equal to the number of members in a resource collection.\nCorrected the minimum value for $top to align with OData.\nClarified behavior of PATCH for partial success scenarios.\nVarious clarifications and style fixes to the Aggregation clause.\nClarified that HEAD requests shall be rejected when a query parameter is provided.\nRemoved erroneous requirement for ETags to be strong.\n1.11.0\t2020-04-30\tAdded Aggregation clause.\nClarified that services are allowed use HTTP 501 Not Implemented for unsupported HTTP methods.\nClarified the normative semantics around the term \"deprecated\".\nClarified clauses describing the usage of null for properties versus not reporting a property.\n1.10.0\t2020-03-27\tRestructured the Security details clause for ease of reading. Other than the changes listed below, no other changes were intended. Any clarifications that inadvertently altered the normative behavior are considered errata, and will be corrected in future revisions to the specification.\nDeprecated TLS v1.1, and set the minimum TLS requirement to be TLS v1.2 with RFC7525 recommendations.\nDeprecated existing cipher suites clause in favor of new clause to leverage IANA recommendations.\nAdded requirement for supporting the /redfish URI.\nAdded support for deep operations.\n1.9.1\t2020-03-27\tDeprecated full ISO8601 duration format in favor of a simplified version that does not contain years, months, and weeks.\nAdded missing normative language for how actions with response bodies are defined in schema.\nAdded HTTP 201 Created as valid responses for actions.\nClarified the ~ operator for the $expand query parameter to expand hyperlinks found in all Links properties.\nClarified the * and . operators for the $expand query parameter to expand hyperlinks found in payload annotations, such as @Redfish.Settings.\nClarified usage of action parameters that point to resources; the expectation is a reference object pointing to the resource in question is passed by the client.\nClarified that DELETE on a resource likely deletes subordinate resources.\nClarified best practices for naming rules, in particular with regards to acronyms.\nClarified behavior for when individual members of a resource collection cannot be returned as part of a $expand request.\nClarified usage of @Message.ExtendedInfo in error responses and provided guidance for clients for handling error responses.\n1.9.0\t2019-12-06\tMade change to no longer require the Server response header.\nAdded clause to Schema modification rules to allow for the addition of OEM URIs to standard resources.\nLoosened requirements on @odata.type within Oem to not require it in arrays where the type is used repeatedly.\n1.8.1\t2019-12-06\tMade many changes for style consistency, grammar, and general clarity. Except for the following additions, no normative changes were made. Any clarifications that inadvertently altered the normative behavior are considered errata, and will be corrected in future revisions to the Specification.\nClarified SSE with regards to requiring a blank line after each event.\nClarified order of precedence for resolving multiple operation overrides within the Privilege Registry.\nClarified cases for property overrides in the Privilege Registry where multiple objects in the same resource contain the same property name.\nUpdated references for HTTP Basic authentication to use RFC7617 instead of RFC7235.\nAdded text/event-stream, application/yaml, and application/vnd.oai.openapi usage to the Accept and Content-Type header table entries.\nAdded clause that provides guidance on service behavior when null is a property value in POST (create) operations.\nLoosened requirements on SSE id based on client usage.\nAdded documentation for settings, settings apply time, operation apply time, operation apply time support, maintenance window, collection capabilities, requested count, allow over-provisioning, zone affinity, supported certificates, and deprecated terms to the Payload annotations clause.\nAdded clauses that document responses", "doc_id": "cf74b004-7a24-4725-b581-f6363e003c8b", "embedding": null, "doc_hash": "9d2fff96784626a6e0b41aac353474ec42ea2ed0008b5dfe8c783742b76edb18", "extra_info": null, "node_info": {"start": 359209, "end": 363365, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "2ca18a48-9d18-45f4-ba37-e7e77936ad38", "3": "871a352f-12cc-4c99-ac4c-a35a71690c89"}}, "__type__": "1"}, "871a352f-12cc-4c99-ac4c-a35a71690c89": {"__data__": {"text": "terms to the Payload annotations clause.\nAdded clauses that document responses for actions with a response body defined in schema.\nClarified the allowable values payload annotation to show it can be used for both properties and action parameters.\n1.8.0\t2019-08-08\tAdded clause for using /redfish/v1/openapi.yaml as the well-known URI for the OpenAPI document.\nAdded clause that specifies non-resource reference properties with Uri in the name are accessed using Redfish protocol semantics.\nAdded SubordinateResources $filter parameter for SSE.\nAdded Update service clause that describes requirements for the SimpleUpdate action and the MultipartHttpPushUri property.\n1.7.1\t2019-08-08\tAdded statements about the owning entity annotation term and its usage in schema modifications.\nClarified SSE id from Id in an event payload and EventId within an event record.\nFixed recommended sequencing of the SSE id to be related to EventId within an event record.\nClarified that services are allowed to close sessions for an account when its password has changed.\nCorrected the Password management clause to describe how a user can GET their respective account resources when a password change is required.\nClarified that registries are not required to return @odata.id.\nClarified that services should use HTTP 400 Bad Request for invalid query requests.\nClarified that services should use HTTP 400 Bad Request when the only query is being combined with other query parameters.\nClarified that services should use HTTP 400 Bad Request when query parameters are used on non-GET operations.\nAdded clause about how to construct enumeration values.\nClarified references to specific messages to also reference their Message Registry.\nAdded language about the construction of action names in payloads.\nAdded informative text for how OEM actions can be defined.\nAdded guidance for using HTTPS whenever sensitive data is being transmitted.\nAdded clause restricting the maximum size of an event payload to be 1MiB.\nClarified that auto expanded resource collections can use paging.\nClarified error response format for SSE.\nClarified that charset=utf-8 is not required within the Content-Type header for SSE.\nAdded clause about how URI patterns are constructed.\nAdded Excerpt term.\n1.7.0\t2019-05-16\tMade many changes for style consistency, grammar, and general clarity. Except for the following additions, no normative changes were made. Any clarifications that inadvertently altered the normative behavior are considered errata, and will be corrected in future revisions to the Specification.\nAdded normative statements about how to handle array properties and PATCH operations on arrays.\nSeparated data model and schema language clauses.\nAdded clauses that describe how JSON Schema and OpenAPI files are formatted.\nAdded clause that describes the schema versioning methodology.\nAdded clause about how URI patterns are constructed based on the resource tree and property hierarchy.\nAdded dictionary file naming rules and repository locations.\nEnhanced localization definitions and defined repository locations.\nAdded statement about SSE to the Eventing mechanism clause.\nAdded Constrained composition and Expandable resources clauses to Redfish Composability.\nAdded clause about requiring event subscriptions to be persistent across service restarts.\nAdded clause about persistence of tasks generated as a result of using @Redfish.OperationApplyTime across service restarts.\nAdded clause about using @Redfish.OperationApplyTime and @Redfish.MaintenanceWindow within task responses.\nRemoved @odata.context property from example payloads.\nAdded Password management clause to describe functional behavior for restricting access when an account requires a password change.\nAdded clause around the usage of the HTTP 403 Forbidden status code when an account requires a password change.\n1.6.1\t2018-12-13\tAdded clause about percent encoding being allowed for query parameters.\nChanged $expand example to use SoftwareInventory instead of LogEntry.\nAdded clause about the use of a separator for multiple query parameters.\nFixed $filter examples to use / instead of . for property paths.\nClarified the usage of messages in a successful action response; provided an example.\nAdded clarification about services supporting a subset of HTTP operations on", "doc_id": "871a352f-12cc-4c99-ac4c-a35a71690c89", "embedding": null, "doc_hash": "efe1d3d7a13b871048055496f6ec3e2b6de4a6d4ad47598e9e5e81fd81c9df60", "extra_info": null, "node_info": {"start": 363356, "end": 367674, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "cf74b004-7a24-4725-b581-f6363e003c8b", "3": "164e803f-7fc6-493e-b11b-b795305cb4a8"}}, "__type__": "1"}, "164e803f-7fc6-493e-b11b-b795305cb4a8": {"__data__": {"text": "an example.\nAdded clarification about services supporting a subset of HTTP operations on resources specified in schema.\nAdded clarification about services implementing writable properties as read only.\nAdded clarification about session termination not affecting connections opened by the session.\nAdded Redfish Provider term definition.\nUpdated JSON Schema references to point to Draft 7 of the JSON Schema Specification.\nAdded clarifications about scenarios for when a request to add an event subscription contains conflicting information and how services respond.\nRemoved language about ignoring the Links property in PATCH requests.\nClarified usage of ETags to show that a client is not supposed to PATCH @odata.etag when attempting to use ETag protection for a resource.\nClarified usage of the only query parameter to show it's not to be combined with $expand and not to be used with singular resources.\nClarified the usage of the HTTP status codes with task monitors.\nMade various spelling and grammar fixes.\n1.6.0\t2018-08-23\tAdded methods of using $filter on the SSE URI for the event service.\nAdded support for the OpenAPI Specification v3.0. This allows OpenAPI-conforming software to access Redfish service implementations. This change might require modification to an implementation to support this version of the specification.\nAdded strict definitions for the URI patterns used for Redfish resources to support OpenAPI. Each URI is now constructed using a combination of fixed, defined path segments and the values of Id properties for resource collections. Also added restrictions on usage of unsafe characters in URIs. Implementations reporting support for Redfish v1.6.0 conform to these URI patterns.\nAdded support for creating and naming Redfish schema files in the OpenAPI YAML-based format.\nAdded URI construction rules for OEM extensions.\nChanged ETag usage to require strong ETag format.\nAdded requirement for HTTP Allow header as a response header for GET and HEAD operations.\nAdded metric reports as a type of event that can be produced by a Redfish service. Added support for SSE streaming of metric reports in support of new telemetry service.\nAdded registry, resource, origin, or EventFormatType-based event subscription methods as detailed in the Specification and schema. Added an EventFormatType to enable additional payload types for subscription-based or streaming events. Deprecated EventType-based event subscription mechanism.\nAdded event message grouping capability.\nProvided guidance for defining and using OEM extensions for messages and Message Registries.\nAdded excerpt and only query parameters.\nClarified requirements for resource collection responses, which includes required properties that were expected, but not listed explicitly in the Specification.\nChanged the requirement for the @odata.context annotation to be optional.\nRemoved requirement for clients to include the OData-Version HTTP header in all requests.\n1.5.1\t2018-08-10\tAdded clarifications to required properties in structured properties derived from ReferenceableMembers.\nReorganized Eventing clause to break out the different subscription methods to differentiate pub-sub from SSE.\nRemoved statements referencing OData conformance levels.\nClarified terminology to explain usage of absolute versus relative reference throughout.\nClarified client-side HTTP Accept header requirements.\nAdded evaluation order for supported query parameters and clarified examples.\nClarified handling of annotations in response payloads when used with $select queries.\nClarified service handling of annotations in PATCH requests.\nClarified handling of various PATCH request error conditions.\nClarified ability to create resource collection members by POST operations to the resource collection or the Members array within the resource.\nCorrected several examples to show required properties in payload.\nClarified usage of the Link header and values of rel=describedBy.\nClarified that the HTTP status code table only describes Redfish-specific behavior and that unless specified, all other usage follows the definitions within the appropriate RFCs.\nAdded entry for the HTTP 431 Request Header Fields Too Large status code.\nAdded statement that the HTTP 503 Service Unavailable status code can be used during reboot or reset of a service to indicate that the service is temporarily unavailable.\nClarified usage of the @odata.type annotation within embedded objects.\nAdded statements about the required Name, Id, and", "doc_id": "164e803f-7fc6-493e-b11b-b795305cb4a8", "embedding": null, "doc_hash": "69d78879603e949156f12ebdf14483dde0bd2e8554c93b5e4707a01480160075", "extra_info": null, "node_info": {"start": 367667, "end": 372170, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "871a352f-12cc-4c99-ac4c-a35a71690c89", "3": "902be665-cc31-4056-b4ab-f251dc68ab65"}}, "__type__": "1"}, "902be665-cc31-4056-b4ab-f251dc68ab65": {"__data__": {"text": "annotation within embedded objects.\nAdded statements about the required Name, Id, and MemberId properties, and the common Description property, which have always been shown as required in schema files, but which the Specification did not mention.\nAdded guidance for the value of time-date properties when time is unknown.\nAdded the title property description in actions.\nClarified usage of the @odata.nextLink annotation at the end of resource collections.\nAdded additional guidance for naming properties and enumeration values that contain \"OEM\" or that include acronyms.\nCorrected requirements for description and long description annotations.\nCorrected name of ConfigureComponents in the Operation-to-privilege mapping clause.\nVarious typographical errors and grammatical improvements.\n1.5.0\t2018-04-05\tAdded support for server-sent eventing for streaming events to web-based GUIs or other clients.\nAdded @Redfish.OperationApplyTime annotation to provide a mechanism for specifying deterministic behavior for the application of Create, Delete or Action (POST) operations.\n1.4.1\t2018-04-05\tUpdated name of the forum from SPMF to Redfish Forum.\nConsistently used the term, hyperlink.\nAdded example to clarify usage of $select query parameter with $expand, and clarified expected results when using AutoExpand. Corrected order of precedence for $filter parameter options.\nCorrected terminology for OEM-defined actions removing \"custom\" in favor of OEM, and clarified that the action target property is always required for an action, along with its usage.\nCorrected location header values for responses to data modification requests that create a task (Task resource vs. task monitor). Clarified error handling of DELETE operations on Task resources.\nRemoved references to obsolete and unused Privilege annotation namespace.\nClarified usage of the Base.1.0.GeneralError message in the Base Message Registry.\nAdded durable URIs for registries and profiles, and clarified intended usage for each folder in the repository. Added file naming conventions for registries and profiles, and clarified file naming for schemas.\nAdded statement to clarify that additional headers may be added to M-SEARCH responses for SSDP to enable UPnP compatibility.\nClarified assignment requirements for predefined or custom roles when new manager account instances are created, using the RoleId property.\n1.4.0\t2017-11-17\tAdded support for optional query parameters ($expand, $filter, and $select) on requests to enable more efficient retrieval of resources or properties from a Redfish service.\nClarified HTTP status and payload responses after successful processing of data modification requests. This includes POST operations to complete actions, and other POST, PATCH, or PUT requests.\nAdded entries for the HTTP 428 Precondition Required and 507 Insufficient Storage status codes to clarify the proper response to certain error conditions. Added reference links to the HTTP status code table throughout.\nUpdated the Abstract to reflect the current state of the specification.\nAdded reference to RFC6585 and clarified expected behavior when ETag support is used in conjunction with PUT or PATCH operations.\nAdded definition for Property term and updated text to use term consistently.\nAdded Client requirement column and information for HTTP headers on requests.\nClarified the usage and expected format of the @odata.context property value.\nAdded clause to describe how to revise structured properties and resolve their definitions in schema.\nAdded more descriptive definition for the settings resource. Added an example for the SettingsObject. Added description and example for using the @Redfish.SettingsApplyTime annotation.\nAdded Action example using the ActionInfo resource in addition to the simple @Redfish.AllowableValues example. Updated example to show a proper subset of the available enumerations to reflect a real-world example.\nAdded statement explaining the updates required to TaskState upon task completion.\n1.3.0\t2017-08-11\tAdded support for a service to optionally reject a PATCH or PUT operation if the If-Match or If-Match-None HTTP header is required by returning the HTTP 428 Precondition Required status code.\nAdded support for a service to describe when the values in the settings object for a resource are applied via the @Redfish.SettingsApplyTime", "doc_id": "902be665-cc31-4056-b4ab-f251dc68ab65", "embedding": null, "doc_hash": "815406ba2f30edd5267d88473b5f9e9c9f8d00d964f36ad90415a5e733a64060", "extra_info": null, "node_info": {"start": 372173, "end": 376528, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "164e803f-7fc6-493e-b11b-b795305cb4a8", "3": "c521454e-6605-414f-af7b-20f57993b0e9"}}, "__type__": "1"}, "c521454e-6605-414f-af7b-20f57993b0e9": {"__data__": {"text": "values in the settings object for a resource are applied via the @Redfish.SettingsApplyTime annotation.\n1.2.1\t2017-08-10\tClarified wording of the Oem object definition.\nClarified wording of the Partial resource results clause.\nClarified behavior of a service when receiving a PATCH with an empty JSON object.\nAdded statement about other uses of the HTTP 503 Service Unavailable status code.\nClarified format of URI fragments to conform to RFC6901.\nClarified use of absolute and relative URIs.\nClarified definition of the target property as originating from OData.\nClarified distinction between hyperlinks and the links property.\nCorrected the JSON example of the privilege map.\nClarified format of the @odata.context property.\nAdded clauses about the schema file naming conventions.\nClarified behavior of a service when receiving a PUT with missing properties.\nClarified valid values in the Accept header to include wildcards per RFC7231.\nCorrected ConfigureUser privilege to be spelled ConfigureUsers.\nCorrected the Session login clause to include normative language.\n1.2.0\t2017-04-14\tAdded support for the Redfish composability service.\nClarified service handling of the Accept-Encoding header in a request.\nImproved consistency and formatting of example requests and responses throughout.\nCorrected usage of the @odata.type property in response examples.\nClarified usage of the required annotation.\nClarified usage of SubordinateOverrides in the Privilege Registry.\n1.1.0\t2016-12-09\tAdded Redfish service operation-to-privilege mapping clause. This functionality enables a service to present a resource or even property-level mapping of HTTP operations to roles and privileges.\nAdded references to the Redfish Host Interface Specification (DSP0270).\n1.0.5\t2016-12-09\tErrata release. Various typographical errors.\nCorrected the use of collection, resource collection, and members throughout.\nAdded glossary entries for resource collection and members.\nCorrected certificate requirements to reference definitions and requirements in RFC5280 and added a normative reference to RFC5280.\nClarified usage of the HTTP POST and PATCH operations.\nClarified usage of the HTTP status codes and error responses.\n1.0.4\t2016-08-28\tErrata release. Various typographical errors.\nAdded example of an HTTP Link Header and clarified usage and content.\nAdded the Schema modification clause, which describes the allowed usage of the schema files.\nAdded recommendation to use TLS 1.2 or later, and to follow the SNIA TLS Specification. Added reference to the SNIA TLS Specification. Added additional recommended TLS_RSA_WITH_AES_128_CBC_SHA cipher suite.\nClarified that the Id property of a Role resource matches the role name.\n1.0.3\t2016-06-17\tErrata release. Fixed the missing numbering in the table of contents and clauses. Corrected URL references to external specifications. Added missing normative references. Corrected typographical error in ETag example.\nClarified examples for @Message.ExtendedInfo to show arrays of messages.\nClarified that a POST to session service to create a new session does not require authorization headers.\n1.0.2\t2016-03-31\tErrata release. Various typographical errors.\nCorrected normative language for M-SEARCH queries and responses.\nCorrected Cache-Control and USN format in M-SEARCH responses.\nCorrected schema namespace rules to conform to OData namespace requirements and updated examples throughout the document to conform to this format. Specifically, <namespace>.<n>.<n>.<n> becomes <namespace>.v<n>_<n>_<n>. File naming rules for JSON Schema and CSDL (XML) schemas were also corrected to match this format and to enable future major (v2) versions to coexist.\nAdded clause that details the location of the schema repository and lists the durable URLs for the repository.\nAdded definition for the value of the Units annotation, using the definitions from the UCUM Specification. Updated examples throughout to use this standardized form.\nModified the naming", "doc_id": "c521454e-6605-414f-af7b-20f57993b0e9", "embedding": null, "doc_hash": "4a0c74ab394a2126bdbf9921e3c28d254617ed3ad32af3fea874bb749e62973c", "extra_info": null, "node_info": {"start": 376525, "end": 380504, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "902be665-cc31-4056-b4ab-f251dc68ab65", "3": "7e856a36-b65c-4def-a9b8-50f278661a9e"}}, "__type__": "1"}, "7e856a36-b65c-4def-a9b8-50f278661a9e": {"__data__": {"text": "Updated examples throughout to use this standardized form.\nModified the naming requirements for Oem property naming to avoid future use of colon : and period . in property names, which can produce invalid or problematic variable names when used in some programming languages or environments. Both separators have been replaced with underscore (_), with colon (:) and period (.) usage now deprecated (but valid).\nRemoved duplicative or out-of-scope subclauses from the Security clause, which made unintended requirements on Redfish service implementations.\nAdded the requirement that property names in resource responses match the casing (capitalization) as specified in schema.\nUpdated normative references to current HTTP RFCs and added clause references throughout the document where applicable.\nClarified ETag header requirements.\nClarified that no authentication is required for accessing the service root.\nClarified description of retrieving resource collections.\nClarified usage of charset=utf-8 in the HTTP Accept and Content-Type headers.\nClarified usage of the Allow HTTP response header and added a table entry for the Retry-After header usage.\nClarified normative usage of the type property and context property, explaining the ability to use two URL forms, and corrected the @odata.context URL examples throughout.\nCorrected inconsistent terminology throughout the resource collection response clause.\nCorrected name of normative resource Members property (Members, not value).\nClarified that error responses may include information about multiple error conditions.\nCorrected name of Measures.Unit annotation term as used in examples.\nCorrected outdated reference to Core OData Specification in annotation term examples.\nAdded the Members property to the Common Redfish resource properties clause.\nClarified terminology and usage of the task monitor and related operations in the Asynchronous operations clause.\nClarified that implementation of the SSDP protocol is optional.\nCorrected typographical error in the SSDP USN field's string definition (now ::dmtf-org).\nAdded the OPTIONS method to the allowed HTTP methods list.\nFixed nullablity in example.\n1.0.1\t2015-09-17\tErrata release. Various grammatical corrections.\nClarified normative use of long description in schema files.\nClarified usage of the rel-describedby Link header.\nCorrected text in example of \"Select List\" in OData context property.\nClarified Accept-Encoding request header handling.\nDeleted duplicative and conflicting statement on returning extended error resources.\nClarified relative URI resolution rules.\nClarified USN format.\n1.0.0\t2015-08-04\tInitial release.\n18 Bibliography\nR. Fielding, 2000, Architectural Styles and the Design of Network-based Software Architectures, https://www.ics.uci.edu/%7Efielding/pubs/dissertation/top.htm\nIETF RFC5288, J. Salowey et al, AES Galois Counter Mode (GCM) Cipher Suites for TLS, https://tools.ietf.org/html/rfc5288\nIETF RFC5487, M. Badra et al, Pre-Shared Key Cipher Suites for TLS with SHA-256/384 and AES Galois Counter Mode, https://tools.ietf.org/html/rfc5487\nIETF RFC5789, L. Dusseault et al, PATCH Method for HTTP, https://tools.ietf.org/html/rfc5789\nIETF RFC6906, E. Wilde, The 'profile' Link Relation Type, https://tools.ietf.org/html/rfc6906\n28 October 1999, Simple Service Discovery Protocol/1.0 Operating without an Arbiter, https://tools.ietf.org/html/draft-cai-ssdp-v1-03\n10 March 2016, OData Version 4.0 Plus Errata 03: Core Vocabulary, https://docs.oasis-open.org/odata/odata/v4.0/errata03/csd01/complete/vocabularies/Org.OData.Core.V1.xml\n24 February 2014, OData JSON Format Version 4.0,", "doc_id": "7e856a36-b65c-4def-a9b8-50f278661a9e", "embedding": null, "doc_hash": "51be2eafc47d67fc9cc221adf243306e4a433dee0a037e9c5c6f0c723bb7cd91", "extra_info": null, "node_info": {"start": 380515, "end": 384146, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "c521454e-6605-414f-af7b-20f57993b0e9", "3": "49016831-549f-4b60-9422-bce1320cc3b8"}}, "__type__": "1"}, "49016831-549f-4b60-9422-bce1320cc3b8": {"__data__": {"text": "February 2014, OData JSON Format Version 4.0, https://docs.oasis-open.org/odata/odata-json-format/v4.0/os/odata-json-format-v4.0-os.html\n24 February 2014, OData Version 4.0 Part 2: URL Conventions, https://docs.oasis-open.org/odata/odata/v4.0/os/part2-url-conventions/odata-v4.0-os-part2-url-conventions.html", "doc_id": "49016831-549f-4b60-9422-bce1320cc3b8", "embedding": null, "doc_hash": "f863f39f71dde1cc342d04a3b148c4f80fb2bfa3780b58b1e32ac335c7203b54", "extra_info": null, "node_info": {"start": 384170, "end": 384478, "_node_type": "1"}, "relationships": {"1": "ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f", "2": "7e856a36-b65c-4def-a9b8-50f278661a9e"}}, "__type__": "1"}, "5a88e3a3-b62a-4dfc-a852-4b45dcdb8c23": {"__data__": {"text": "Overview\nThe Redfish Scalable Platforms Management API is a standard defined by the Distributed Management Task Force (DMTF). Redfish is a next-generation systems management interface standard, which enables scalable, secure, and open server management. It is a new interface that uses RESTful interface semantics to access data that is defined in model format to perform out-of-band systems management. It is suitable for a wide range of servers ranging from stand-alone servers to rack mount and bladed environments and for large scale cloud environments.\n\nDell PowerEdge servers offer a comprehensive range of embedded systems management functions enabled by the Integrated Dell Remote Access Controler (iDRAC) with Lifecycle Controller. These functions are designed by adhering industry standard application programming interfaces (APIs) including Redfish.\n\niDRAC with Lifecycle Controller technology is part of a larger data center solution that helps keep business critical applications and workloads available always. The technology allows administrators to deploy, monitor, manage, configure, update, troubleshoot, and remediate Dell servers from any location, and without the use of agents. It accomplishes this regardless of an operating system or a Hypervisor presence or state.\n\nThis document provides a brief overview on Redfish and information on various aspects of Redfish protocol, supported schema, and Redfish Eventing implemented in iDRAC. It also provides guidelines for using the Dell Redfish APIs.", "doc_id": "5a88e3a3-b62a-4dfc-a852-4b45dcdb8c23", "embedding": null, "doc_hash": "b558e942a6f64b3f26f18bd42a02e7b3e2ca588ef0ec0586226f5ee15ce98107", "extra_info": null, "node_info": {"start": 0, "end": 1519, "_node_type": "1"}, "relationships": {"1": "9608f604-0aa4-41dc-95e4-c398faffee59"}}, "__type__": "1"}}, "docstore/ref_doc_info": {"ba3bb0b6-fa9b-483d-b1d8-53eec5fe337f": {"doc_ids": ["1472bb32-ba40-4663-ad4e-88a379956d90", "ae53c8e6-c694-4e87-bea5-fbd33713669d", "ca26c800-9892-4c66-ba1e-bf863050022b", "231ab9ca-fa1b-4c2e-9d34-2f524bce0be6", "32448ad9-e248-43c4-931f-78f92922bcb1", "74d15f8c-d4c0-43ae-a19d-13016283f4c9", "1b20283c-ddc9-4782-8395-096c4a86dbb6", "41544a6f-b0bf-4a2f-9c8b-2875251edadc", "a8f2d9f4-9ca5-47bb-91b3-504727a4f2f8", "e1a57b67-63b9-4bf6-b447-cb3014eaa524", "05a5f862-af0b-4657-b89d-221f6ec61a25", "e0923949-891f-4204-959c-542e4b7c41b8", "633ccc35-ddb6-4b88-ad0d-d9f74fd290b0", "9e76414a-8833-4cd1-979e-378efe19320c", "81197b5c-0389-4564-941f-75878a05318d", "08192867-2750-406d-bed6-d517519b4896", "a7344246-a3af-42ab-aaa9-44cacdcfdc39", "f1f00229-0c5f-4cd2-ac15-6796e7b2b029", "19d94f00-f0dc-42de-9c49-87f4eab344e4", "cc1f20cc-aba2-4120-9ad8-1152139f0fff", "4629f306-f3d7-4359-8edc-2ca3296c2b0a", "6704b004-142e-4d47-9e1e-8ebd457b46b7", "80272e76-de5c-4685-b057-0ae4f57ea92e", "5bcff6cd-681f-47ac-8b2b-e6cfbbbac474", "78f19769-ac28-41c3-be95-79af18d37a4c", "b32e99e3-afa0-4899-9f8b-5f9837db5acd", "4ce1e049-5e08-48ed-afc5-d27ce7d2cafa", "45d9a296-ae06-4d0a-874a-59956d559999", "497e6b35-70ef-4352-a6c3-68bc4dce0a95", "05230e54-9208-495e-a1a1-acf17c128856", "33fd56ed-ac26-4ac7-bee1-42a061cc54c0", "af3b2431-b344-462a-a1e2-cfc1b3be5357", "135fee3f-6ccd-409b-bd7f-981a73ca1376", "af5f5680-cf8d-4fad-a608-22827dcc3d68", "531f4505-76be-49f5-ac98-b990198c0ac2", "bb1f5cfe-6784-489f-8a47-67b25e8c89a9", "4065dd88-695b-4ae1-8cc7-5d4242a683a1", "d596ba80-e9c9-49ca-86ef-1ec02710b1ed", "68693dc3-779f-46fc-b7ec-ecf0c33be39c", "c00660ed-9580-4301-8cc8-c7ba364bd7cc", "628228df-00b6-4c1e-af44-452800b36f8a", "b2b0a16d-f014-4c40-91fe-2706a1f122e5", "358a3e20-66b6-46b3-8fb3-31f8083b2716", "ec393b6f-e846-4d4e-ab78-8459444bd0d3", "20e6e519-1841-4541-912d-e2a07b05d349", "a08be7dc-c197-4a16-bd59-9f8b6760ea7b", "b0e48c2f-e795-40c6-9312-26b9f21760d4", "8709c34c-e7b0-432b-9cbf-523fbcfcdbc0", "c5233735-ec9e-4079-b1fb-ed756eece8d2", "93ca8501-a8c1-4241-b9b3-aeee3cd42029", "19e15187-1eab-44da-8d42-c3b8e16dc0ef", "0aea4aee-6978-4d4b-8f83-1d952c6a7577", "345a7f0b-3f6d-40d8-8c95-f996b7ef7035", "80a40057-da97-40d7-9284-10e5852de8b4", "4119fa5b-f399-4c71-a8ac-f2b4c4ad2798", "b2b1f2f7-7b51-4eef-97c5-77529de5668c", "bd0fefb4-9eaa-4174-8337-bd1aa613f38d", "19752d92-fb6f-4105-9725-6850307ae3e3", "b96445a9-2d64-495e-b22c-17712f9a3ff7", "1e112192-ce57-4364-8fc7-71531b26fe5f", "75829444-bccd-40e0-b04d-a28a7b84dd33", "4a0e96d2-1909-45c5-a7a4-ea646d9af7c5", "1cf88464-f860-4119-8cc1-e257d0abcd9a", "90c3cfa9-dc17-42f4-9196-ede4f85f977f", "59d4d8c4-0942-4748-a22d-7c64f4eadf81", "e122c0cc-1848-4a64-969e-431db86f6f0b", "f2a316c5-b728-4408-87cd-dc7d343d5f7d", "b23a8fdf-4289-4529-84ea-8f980c3d74e4", "c0b7ca3c-25ce-450a-9bb0-f8fa712dfdca", "22ccfccd-aa89-48b3-8fb6-2ad3c05c99e0", "58461a93-cbfd-4552-83bd-e3ab7356d095", "50cbe525-7367-44af-8718-f5f73e507f3e", "1f87cb26-c953-49ef-99e3-a7d2693f738d", "db07472f-1aca-48d6-8c1e-08a51789fde6", "4fca5ee8-a17e-4439-ba8d-810304a971f1", "2b0cdc1f-a921-48e6-9316-2b41554a29ae", "dd55cf0e-c8bb-45ad-82fa-12c466c86f09", "86ef4402-abf3-4fda-bd70-dde5651bcaf3", "75245e91-a3ef-4f4f-aa9e-98ffb252654b", "07584687-9dbd-4c23-a34a-860fdd1f0a59", "3041c9bf-cc44-42b8-bf2b-79b23b8bc4d3", "c076b365-76bc-43f3-b1b9-9ebf51a2efa2", "ac0ffff7-7678-4831-918e-1791c02100cf", "964f0df5-73d1-482e-8a8e-fc9ae9fc12c3", "7b472a46-f426-4061-8646-e20d86a6f255", "8e552055-ef62-48c6-9533-074483ce4fe3", "50dea32e-2387-45ce-ab1c-f47c0ea8a5b1", "0c0d3d7e-a21f-46d3-aaec-8b50ebff0aea", "d01d3273-130a-44b3-8fd8-36ca7424523b", "08336141-8f91-4c40-abe8-8df694953bdb", "533a349a-8428-4bdb-af76-5c2a3bde7c04", "b5c68073-871e-4f72-9704-f5ce21b50de5", "2aaf2078-af54-4d6a-ac0f-d1404bd7cc0e", "2ca18a48-9d18-45f4-ba37-e7e77936ad38", "cf74b004-7a24-4725-b581-f6363e003c8b", "871a352f-12cc-4c99-ac4c-a35a71690c89", "164e803f-7fc6-493e-b11b-b795305cb4a8", "902be665-cc31-4056-b4ab-f251dc68ab65", "c521454e-6605-414f-af7b-20f57993b0e9", "7e856a36-b65c-4def-a9b8-50f278661a9e", "49016831-549f-4b60-9422-bce1320cc3b8"], "extra_info": {}}, "9608f604-0aa4-41dc-95e4-c398faffee59": {"doc_ids": ["5a88e3a3-b62a-4dfc-a852-4b45dcdb8c23"], "extra_info": {}}}}